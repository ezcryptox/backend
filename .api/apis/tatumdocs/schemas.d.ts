declare const ActivateAccount: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Account ID";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["account.not.exists"];
                    };
                    readonly message: {
                        readonly description: "No such account.";
                        readonly type: "string";
                        readonly examples: readonly ["No such account."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.active";
                        readonly type: "string";
                        readonly examples: readonly ["account.active"];
                    };
                    readonly message: {
                        readonly description: "Unable to activate active account.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to activate active account."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "customer.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["customer.not.exists"];
                    };
                    readonly message: {
                        readonly description: "No customer with given external ID ${externalId} exists.";
                        readonly type: "string";
                        readonly examples: readonly ["No customer with given external ID ${externalId} exists."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.customer.inactive";
                        readonly type: "string";
                        readonly examples: readonly ["account.customer.inactive"];
                    };
                    readonly message: {
                        readonly description: "Unable to activate account, customer inactive.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to activate account, customer inactive."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const ActivateCustomer: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly maxLength: 50;
                    readonly minLength: 10;
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Customer internal ID";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "customer.internal.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["customer.internal.not.exists"];
                    };
                    readonly message: {
                        readonly description: "No such customer.";
                        readonly type: "string";
                        readonly examples: readonly ["No such customer."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "customer.active";
                        readonly type: "string";
                        readonly examples: readonly ["customer.active"];
                    };
                    readonly message: {
                        readonly description: "Unable to activate active customer.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to activate active customer."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const AdaTransferOffchain: {
    readonly body: {
        readonly oneOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly address: {
                    readonly description: "Blockchain address to send assets";
                    readonly maxLength: 90;
                    readonly minLength: 110;
                    readonly type: "string";
                    readonly examples: readonly ["addr1qyyxyhaa2e7kxeqcc72w7f747zqlgwwwstlzsg9umuxc40wnhawldxl4nan95rhtlcnju9q2r8j9qz8vslwsmrkj5r4spxhep9"];
                };
                readonly amount: {
                    readonly description: "Amount to be sent in ADA.";
                    readonly maxLength: 38;
                    readonly type: "string";
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly examples: readonly ["100000"];
                };
                readonly compliant: {
                    readonly description: "Compliance check, if withdrawal is not compliant, it will not be processed.";
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                };
                readonly fee: {
                    readonly description: "Fee to be submitted as a transaction fee to blockchain. If none is set, default value of 1 ADA is used.";
                    readonly type: "string";
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly examples: readonly ["2.5"];
                };
                readonly index: {
                    readonly description: "Derivation index of sender address.";
                    readonly maximum: 2147483647;
                    readonly type: "integer";
                    readonly examples: readonly [0];
                };
                readonly mnemonic: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "Mnemonic to generate private key for sender address. Either mnemonic and index, privateKey or signature Id must be present - depends on the type of account and xpub.";
                    readonly type: "string";
                    readonly examples: readonly ["urge pulp usage sister evidence arrest palm math please chief egg abuse"];
                };
                readonly xpub: {
                    readonly description: "Extended public key (xpub) of the wallet associated with the accounts. Should be present, when mnemonic is used.";
                    readonly maxLength: 192;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["41253768cd7c5831988e580cfc7eeecaa78bf52a1ede2bd2f245406605adfbadd5911ab567bc3dc7713e29c2c14bb898b24bb1f01a4992605343ad14703037b9"];
                };
                readonly paymentId: {
                    readonly description: "Identifier of the payment, shown for created Transaction within Tatum sender account.";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["1234"];
                };
                readonly senderAccountId: {
                    readonly maxLength: 24;
                    readonly minLength: 24;
                    readonly description: "Sender account ID";
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly senderNote: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "Note visible to owner of withdrawing account";
                    readonly type: "string";
                    readonly examples: readonly ["Sender note"];
                };
            };
            readonly required: readonly ["senderAccountId", "address", "amount", "mnemonic", "xpub", "index"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly address: {
                    readonly description: "Blockchain address to send assets to";
                    readonly maxLength: 90;
                    readonly minLength: 110;
                    readonly type: "string";
                    readonly examples: readonly ["addr1qyyxyhaa2e7kxeqcc72w7f747zqlgwwwstlzsg9umuxc40wnhawldxl4nan95rhtlcnju9q2r8j9qz8vslwsmrkj5r4spxhep9"];
                };
                readonly amount: {
                    readonly description: "Amount to be sent in ADA.";
                    readonly maxLength: 38;
                    readonly type: "string";
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly examples: readonly ["100000"];
                };
                readonly compliant: {
                    readonly description: "Compliance check, if withdrawal is not compliant, it will not be processed.";
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                };
                readonly fee: {
                    readonly description: "Fee to be submitted as a transaction fee to blockchain. If none is set, default value of 1 ADA is used.";
                    readonly type: "string";
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly examples: readonly ["2.5"];
                };
                readonly from: {
                    readonly description: "Blockchain address to send assets from";
                    readonly maxLength: 90;
                    readonly minLength: 110;
                    readonly type: "string";
                    readonly examples: readonly ["addr1qyyxyhaa2e7kxeqcc72w7f747zqlgwwwstlzsg9umuxc40wnhawldxl4nan95rhtlcnju9q2r8j9qz8vslwsmrkj5r4spxhep9"];
                };
                readonly signatureId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly description: "Identifier of the mnemonic / private key associated in signing application.\nWhen hash identifies mnemonic, index must be present to represent specific account to pay from.\nPrivate key, mnemonic or signature Id must be present.\n";
                    readonly examples: readonly ["26d3883e-4e17-48b3-a0ee-09a3e484ac83"];
                };
                readonly xpub: {
                    readonly description: "Extended public key (xpub) of the wallet associated with the accounts. XPub or attr must be used with signatureId.";
                    readonly maxLength: 192;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["41253768cd7c5831988e580cfc7eeecaa78bf52a1ede2bd2f245406605adfbadd5911ab567bc3dc7713e29c2c14bb898b24bb1f01a4992605343ad14703037b9"];
                };
                readonly index: {
                    readonly description: "Derivation index of sender address.";
                    readonly maximum: 2147483647;
                    readonly type: "integer";
                    readonly examples: readonly [0];
                };
                readonly paymentId: {
                    readonly description: "Identifier of the payment, shown for created Transaction within Tatum sender account.";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["1234"];
                };
                readonly senderAccountId: {
                    readonly maxLength: 24;
                    readonly minLength: 24;
                    readonly description: "Sender account ID";
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly senderNote: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "Note visible to owner of withdrawing account";
                    readonly type: "string";
                    readonly examples: readonly ["Sender note"];
                };
            };
            readonly required: readonly ["senderAccountId", "from", "address", "signatureId", "amount", "xpub"];
        }];
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly oneOf: readonly [{
                readonly type: "object";
                readonly properties: {
                    readonly id: {
                        readonly description: "ID of withdrawal. If transaction is not valid in blockchain, use this id to cancel withdrawal.";
                        readonly type: "string";
                        readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    };
                    readonly txId: {
                        readonly description: "TX hash of successful transaction.";
                        readonly type: "string";
                        readonly examples: readonly ["c83f8818db43d9ba4accfe454aa44fc33123d47a4f89d47b314d6748eb0e9bc9"];
                    };
                    readonly completed: {
                        readonly description: "If set to \"true\", the withdrawal has been completed in the virtual account; if set to \"false\", the withdrawal has not been completed and you have to <a href=\"https://apidoc.tatum.io/tag/Withdrawal#operation/completeWithdrawal\" target=\"_blank\">complete it manually</a>";
                        readonly type: "boolean";
                        readonly examples: readonly [true];
                    };
                };
                readonly required: readonly ["txId", "id", "completed"];
            }, {
                readonly type: "object";
                readonly properties: {
                    readonly signatureId: {
                        readonly description: "ID of prepared payment template to sign. This is should be stored on a client side to retrieve ID of the blockchain transaction, when signing application signs the transaction and broadcasts it to the blockchain.";
                        readonly format: "uuid";
                        readonly type: "string";
                        readonly examples: readonly ["1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6"];
                    };
                };
                readonly required: readonly ["id", "signatureId"];
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.missing";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.missing"];
                    };
                    readonly message: {
                        readonly description: "No such withdrawal.";
                        readonly type: "string";
                        readonly examples: readonly ["No such withdrawal."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "rate.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["rate.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such currency rate.";
                        readonly type: "string";
                        readonly examples: readonly ["No such currency rate."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "vc.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["vc.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such virtual currency.";
                        readonly type: "string";
                        readonly examples: readonly ["No such virtual currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.recipient.format";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.recipient.format"];
                    };
                    readonly message: {
                        readonly description: "Recipient blockchain address has incorrect format.";
                        readonly type: "string";
                        readonly examples: readonly ["Recipient blockchain address has incorrect format."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.failed.transaction.failed";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.failed.transaction.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to store withdrawal, it is impossible to create transaction.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to store withdrawal, it is impossible to create transaction."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.account.virtual";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.account.virtual"];
                    };
                    readonly message: {
                        readonly description: "Sender account cannot be virtual.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender account cannot be virtual."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "offchain.not.supported";
                        readonly type: "string";
                        readonly examples: readonly ["offchain.not.supported"];
                    };
                    readonly message: {
                        readonly description: "Offchain not supported for account with ${account.currency} currency.";
                        readonly type: "string";
                        readonly examples: readonly ["Offchain not supported for account with ${account.currency} currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "amount.format";
                        readonly type: "string";
                        readonly examples: readonly ["amount.format"];
                    };
                    readonly message: {
                        readonly description: "Amount has incorrect format.";
                        readonly type: "string";
                        readonly examples: readonly ["Amount has incorrect format."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "fee.format";
                        readonly type: "string";
                        readonly examples: readonly ["fee.format"];
                    };
                    readonly message: {
                        readonly description: "Fee has incorrect format.";
                        readonly type: "string";
                        readonly examples: readonly ["Fee has incorrect format."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.not.cancelled.transaction.failed";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.not.cancelled.transaction.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to broadcast transaction, and impossible to cancel withdrawal. ID is attached, \"${withdrawalId}\", cancel it manually.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to broadcast transaction, and impossible to cancel withdrawal. ID is attached, \"${withdrawalId}\", cancel it manually."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.prepare.failed";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.prepare.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to prepare transaction, withdrawal cancelled.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to prepare transaction, withdrawal cancelled."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.not.exists"];
                    };
                    readonly message: {
                        readonly description: "Unable to find sender account ${transaction.senderAccountId}.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find sender account ${transaction.senderAccountId}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.customer.disabled";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.customer.disabled"];
                    };
                    readonly message: {
                        readonly description: "Sender accounts customer ${senderAccount.customerId} is disabled, unable to perform payment.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender accounts customer ${senderAccount.customerId} is disabled, unable to perform payment."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "balance.insufficient";
                        readonly type: "string";
                        readonly examples: readonly ["balance.insufficient"];
                    };
                    readonly message: {
                        readonly description: "Insufficient balance for account ${transaction.senderAccountId} and payment amount ${transaction.amount}. Sender balance is ${senderAccount.balance.availableBalance as string}, amount is ${amount}";
                        readonly type: "string";
                        readonly examples: readonly ["Insufficient balance for account ${transaction.senderAccountId} and payment amount ${transaction.amount}. Sender balance is ${senderAccount.balance.availableBalance as string}, amount is ${amount}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "amount.btc";
                        readonly type: "string";
                        readonly examples: readonly ["amount.btc"];
                    };
                    readonly message: {
                        readonly description: "BTC|LTC|BCH|DOGE payment amount must be at least 0.00000001, not ${transaction.amount}.";
                        readonly type: "string";
                        readonly examples: readonly ["BTC|LTC|BCH|DOGE payment amount must be at least 0.00000001, not ${transaction.amount}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "amount.eth";
                        readonly type: "string";
                        readonly examples: readonly ["amount.eth"];
                    };
                    readonly message: {
                        readonly description: "ETH payment amount must be at least 0.000000000001, not ${transaction.amount}.";
                        readonly type: "string";
                        readonly examples: readonly ["ETH payment amount must be at least 0.000000000001, not ${transaction.amount}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.frozen";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.frozen"];
                    };
                    readonly message: {
                        readonly description: "Sender account ${transaction.senderAccountId} is frozen, unable to perform payment.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender account ${transaction.senderAccountId} is frozen, unable to perform payment."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.pending";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.pending"];
                    };
                    readonly message: {
                        readonly description: "Unable to prepare withdrawal, last withdrawal with id ${id} is not yet processed by blockchain.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to prepare withdrawal, last withdrawal with id ${id} is not yet processed by blockchain."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const AddressExists: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly currency: {
                    readonly type: "string";
                    readonly examples: readonly ["BNB"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "The cryptocurrency of the blockchain address to check";
                };
                readonly address: {
                    readonly type: "string";
                    readonly examples: readonly ["tbnb1sfj9981j2eo1ij2e09"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "The blockchain address to check";
                };
            };
            readonly required: readonly ["currency", "address"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly index: {
                    readonly type: "number";
                    readonly examples: readonly [1];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Only for BNB Beacon Chain, Stellar, or XRPL<ul><li>For <b>BNB Beacon Chain</b>, specify the memo.</li><li>For <b>Stellar</b>, specify the message.</li><li>For <b>XRPL</b>, specify the DestinationTag.</li></ul>";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly properties: {
                readonly id: {
                    readonly description: "The ID of the virtual account";
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly balance: {
                    readonly properties: {
                        readonly accountBalance: {
                            readonly description: "All assets on the account, both available and blocked";
                            readonly type: "string";
                            readonly examples: readonly ["1000000"];
                        };
                        readonly availableBalance: {
                            readonly description: "The account balance minus the blocked assets; use the available balance to determine how much a customer can send or withdraw from their virtual account";
                            readonly type: "string";
                            readonly examples: readonly ["1000000"];
                        };
                    };
                    readonly type: "object";
                    readonly required: readonly ["accountBalance", "availableBalance"];
                };
                readonly currency: {
                    readonly description: "The currency of the virtual account";
                    readonly type: "string";
                    readonly examples: readonly ["BTC"];
                };
                readonly frozen: {
                    readonly description: "If set to \"true\", the virtual account is frozen";
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                };
                readonly active: {
                    readonly description: "If set to \"true\", the virtual account is active";
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                };
                readonly customerId: {
                    readonly description: "The ID of the customer (newly created or existing one) associated with the virtual account";
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly accountNumber: {
                    readonly description: "The number associated with the virtual account in an external system";
                    readonly maxLength: 50;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["123456"];
                };
                readonly accountCode: {
                    readonly description: "The code associated with the virtual account in an external system to designate the purpose of the account in bookkeeping";
                    readonly type: "string";
                    readonly examples: readonly ["03_ACC_01"];
                };
                readonly accountingCurrency: {
                    readonly description: "The currency in which all the transactions for all accounts will be accounted";
                    readonly type: "string";
                    readonly examples: readonly ["EUR"];
                };
                readonly xpub: {
                    readonly description: "The extended public key of the blockchain wallet associated with the virtual account; used to generate deposit addresses for the virtual account";
                    readonly type: "string";
                    readonly examples: readonly ["xpub6FB4LJzdKNkkpsjggFAGS2p34G48pqjtmSktmK2Ke3k1LKqm9ULsg8bGfDakYUrdhe2EHw5uGKX9DrMbrgYnVfDwrksT4ZVQ3vmgEruo3Ka"];
                };
            };
            readonly required: readonly ["id", "active", "frozen", "currency", "balance"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["account.not.exists"];
                    };
                    readonly message: {
                        readonly description: "No such account.";
                        readonly type: "string";
                        readonly examples: readonly ["No such account."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "Address.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["address.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such address exists.";
                        readonly type: "string";
                        readonly examples: readonly ["No such address exists."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const AlgoDeployErc20Ledger: {
    readonly body: {
        readonly oneOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly symbol: {
                    readonly description: "The name of the token; used as an identifier within the Tatum platform and as a currency symbol on the blockchain";
                    readonly maxLength: 8;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                };
                readonly supply: {
                    readonly description: "The supply of the token";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["10000000"];
                };
                readonly description: {
                    readonly description: "The description of the token; used as a description within the Tatum platform and as a currency name on the blockchain";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["My Public Token"];
                };
                readonly address: {
                    readonly description: "The blockchain address to be assigned to the virtual account as a deposit address";
                    readonly maxLength: 58;
                    readonly minLength: 58;
                    readonly type: "string";
                    readonly examples: readonly ["NTAESFCB3WOD7SAOL42KSPVARLB3JFA3MNX3AESWHYVT2RMYDVZI6YLG4Y"];
                };
                readonly mnemonic: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "The mnemonic to generate the private key for the blockchain address from which the fee for deploying the smart contract will be deducted; is used together with the derivation index of this address";
                    readonly type: "string";
                    readonly examples: readonly ["artist alarm clerk obscure timber firm reopen provide ankle vicious exhibit waste math toilet believe puppy lucky coast post kind black suspect mule able market"];
                };
                readonly index: {
                    readonly description: "The derivation index of the blockchain address from which the fee for deploying the smart contract will be deducted; is used together with the mnemonic to generate the private key for this address";
                    readonly type: "integer";
                    readonly maximum: 2147483647;
                    readonly examples: readonly [0];
                };
                readonly basePair: {
                    readonly description: "The base pair for the virtual currency that represents the token; used to calculate the value of a transaction";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["EUR"];
                };
                readonly baseRate: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly minimum: 0;
                    readonly description: "The exchange rate for the base pair; one unit of the created virtual currency equals 1 unit of <code>basePair</code>*<code>baseRate</code>";
                    readonly examples: readonly [1];
                };
                readonly customer: {
                    readonly properties: {
                        readonly externalId: {
                            readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123654"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                            readonly default: "EUR";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly customerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                        readonly providerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                    };
                    readonly required: readonly ["externalId"];
                    readonly type: "object";
                    readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                };
            };
            readonly required: readonly ["description", "supply", "symbol", "basePair", "address", "mnemonic", "index"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly symbol: {
                    readonly description: "The name of the token; used as an identifier within the Tatum platform and as a currency symbol on the blockchain";
                    readonly maxLength: 8;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                };
                readonly supply: {
                    readonly description: "The supply of the token";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["10000000"];
                };
                readonly description: {
                    readonly description: "The description of the token; used as a description within the Tatum platform and as a currency name on the blockchain";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["My Public Token"];
                };
                readonly address: {
                    readonly description: "The blockchain address to be assigned to the virtual account as a deposit address";
                    readonly maxLength: 58;
                    readonly minLength: 58;
                    readonly type: "string";
                    readonly examples: readonly ["NTAESFCB3WOD7SAOL42KSPVARLB3JFA3MNX3AESWHYVT2RMYDVZI6YLG4Y"];
                };
                readonly privateKey: {
                    readonly description: "The private key of the blockchain address from which the fee for deploying the smart contract will be deducted";
                    readonly type: "string";
                    readonly maxLength: 103;
                    readonly minLength: 103;
                    readonly examples: readonly ["NBYMCVEEDFYV3TPWVRE6APE7PKHUJD4XAKXCKNCLKGUXOC3LFNJGZQCJCRA53HB7ZAHF6NFJH2QIVQ5USQNWG35QCJLD4KZ5IWMB24Q"];
                };
                readonly basePair: {
                    readonly description: "The base pair for the virtual currency that represents the token; used to calculate the value of a transaction";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["EUR"];
                };
                readonly baseRate: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly minimum: 0;
                    readonly description: "The exchange rate for the base pair; one unit of the created virtual currency equals 1 unit of <code>basePair</code>*<code>baseRate</code>";
                    readonly examples: readonly [1];
                };
                readonly customer: {
                    readonly properties: {
                        readonly externalId: {
                            readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123654"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                            readonly default: "EUR";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly customerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                        readonly providerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                    };
                    readonly required: readonly ["externalId"];
                    readonly type: "object";
                    readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                };
            };
            readonly required: readonly ["description", "supply", "symbol", "basePair", "privateKey", "address"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly symbol: {
                    readonly description: "The name of the token; used as an identifier within the Tatum platform and as a currency symbol on the blockchain";
                    readonly maxLength: 8;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                };
                readonly supply: {
                    readonly description: "The supply of the token";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["10000000"];
                };
                readonly description: {
                    readonly description: "The description of the token; used as a description within the Tatum platform and as a currency name on the blockchain";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["My Public Token"];
                };
                readonly address: {
                    readonly description: "The blockchain address to be assigned to the virtual account as a deposit address";
                    readonly maxLength: 58;
                    readonly minLength: 58;
                    readonly type: "string";
                    readonly examples: readonly ["NTAESFCB3WOD7SAOL42KSPVARLB3JFA3MNX3AESWHYVT2RMYDVZI6YLG4Y"];
                };
                readonly signatureId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly description: "The KMS identifier of either the <b>private key</b> of the blockchain address from which the fee for deploying the smart contract will be deducted, or the <b>mnemonic</b> to generate the private key for the blockchain address from which the fee will be deducted";
                    readonly examples: readonly ["26d3883e-4e17-48b3-a0ee-09a3e484ac83"];
                };
                readonly index: {
                    readonly type: "number";
                    readonly minimum: 0;
                    readonly description: "(Only if the signature ID is mnemonic-based) The index of the address from which the fee will be deducted that was generated from the mnemonic";
                };
                readonly basePair: {
                    readonly description: "The base pair for the virtual currency that represents the token; used to calculate the value of a transaction";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["EUR"];
                };
                readonly baseRate: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly minimum: 0;
                    readonly description: "The exchange rate for the base pair; one unit of the created virtual currency equals 1 unit of <code>basePair</code>*<code>baseRate</code>";
                    readonly examples: readonly [1];
                };
                readonly customer: {
                    readonly properties: {
                        readonly externalId: {
                            readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123654"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                            readonly default: "EUR";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly customerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                        readonly providerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                    };
                    readonly required: readonly ["externalId"];
                    readonly type: "object";
                    readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                };
            };
            readonly required: readonly ["description", "supply", "symbol", "basePair", "address", "signatureId"];
        }];
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly accountId: {
                        readonly description: "Account ID with the type of currency as created ERC20 token symbol. Account will be unfrozen when ERC20 contract address will be set.";
                        readonly type: "string";
                        readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    };
                    readonly txId: {
                        readonly description: "TX hash of successful transaction. From this transaction receipt contract address can be obtained.";
                        readonly type: "string";
                        readonly examples: readonly ["JGDMW6F6BUWQLFXDEPZIUO5WCTQOL3QV7KZ2SBV44K5WE6SSNN7Q"];
                    };
                };
                readonly type: "object";
                readonly required: readonly ["accountId", "txId"];
            }, {
                readonly properties: {
                    readonly accountId: {
                        readonly description: "Account ID with the type of currency as created ERC20 token symbol. Account will be unfrozen when ERC20 contract address will be set.";
                        readonly type: "string";
                        readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    };
                    readonly signatureId: {
                        readonly description: "ID of prepared payment template to sign. This is should be stored on a client side to retrieve ID of the blockchain transaction, when signing application signs the transaction and broadcasts it to the blockchain.";
                        readonly format: "uuid";
                        readonly type: "string";
                        readonly examples: readonly ["1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6"];
                    };
                };
                readonly type: "object";
                readonly required: readonly ["accountId", "signatureId"];
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.symbol.prefix";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.symbol.prefix"];
                    };
                    readonly message: {
                        readonly description: "ERC20 token cannot start with VC_.";
                        readonly type: "string";
                        readonly examples: readonly ["ERC20 token cannot start with VC_."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.address.xpub.both";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.address.xpub.both"];
                    };
                    readonly message: {
                        readonly description: "Either xpub or address must be present, not both.";
                        readonly type: "string";
                        readonly examples: readonly ["Either xpub or address must be present, not both."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.address.xpub.missing";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.address.xpub.missing"];
                    };
                    readonly message: {
                        readonly description: "Either xpub or address must be present.";
                        readonly type: "string";
                        readonly examples: readonly ["Either xpub or address must be present."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.duplicate.name";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.duplicate.name"];
                    };
                    readonly message: {
                        readonly description: "ERC20 token with given name already exists.";
                        readonly type: "string";
                        readonly examples: readonly ["ERC20 token with given name already exists."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "customer.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["customer.not.active"];
                    };
                    readonly message: {
                        readonly description: "Customer not active.";
                        readonly type: "string";
                        readonly examples: readonly ["Customer not active."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "virtual.creation.error";
                        readonly type: "string";
                        readonly examples: readonly ["virtual.creation.error"];
                    };
                    readonly message: {
                        readonly description: "It is not possible to create virtual currency.";
                        readonly type: "string";
                        readonly examples: readonly ["It is not possible to create virtual currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["account.not.exists"];
                    };
                    readonly message: {
                        readonly description: "No such account.";
                        readonly type: "string";
                        readonly examples: readonly ["No such account."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.missing";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.missing"];
                    };
                    readonly message: {
                        readonly description: "No xpub assigned to account, it is not possible to generate address. Use assignAddress method instead.";
                        readonly type: "string";
                        readonly examples: readonly ["No xpub assigned to account, it is not possible to generate address. Use assignAddress method instead."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "xpub.used";
                        readonly type: "string";
                        readonly examples: readonly ["xpub.used"];
                    };
                    readonly message: {
                        readonly description: "XPub already used registered within Tatum";
                        readonly type: "string";
                        readonly examples: readonly ["XPub already used registered within Tatum"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "Address.index.used";
                        readonly type: "string";
                        readonly examples: readonly ["address.index.used"];
                    };
                    readonly message: {
                        readonly description: "Unable to create address, derivation index is already used.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to create address, derivation index is already used."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "offchain.not.supported";
                        readonly type: "string";
                        readonly examples: readonly ["offchain.not.supported"];
                    };
                    readonly message: {
                        readonly description: "Offchain not supported for account with ${account.currency} currency.";
                        readonly type: "string";
                        readonly examples: readonly ["Offchain not supported for account with ${account.currency} currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.incompatible";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.incompatible"];
                    };
                    readonly message: {
                        readonly description: "Xpub not compatible with account currency.";
                        readonly type: "string";
                        readonly examples: readonly ["Xpub not compatible with account currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.present";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.present"];
                    };
                    readonly message: {
                        readonly description: "Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead.";
                        readonly type: "string";
                        readonly examples: readonly ["Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                    readonly required: {
                        readonly "0": "errorCode";
                        readonly "1": "message";
                        readonly "2": "statusCode";
                    };
                    readonly type: "object";
                };
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "vc.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["vc.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such virtual currency.";
                        readonly type: "string";
                        readonly examples: readonly ["No such virtual currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "Address.used";
                        readonly type: "string";
                        readonly examples: readonly ["address.used"];
                    };
                    readonly message: {
                        readonly description: "Address and currency already in use.";
                        readonly type: "string";
                        readonly examples: readonly ["Address and currency already in use."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.present";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.present"];
                    };
                    readonly message: {
                        readonly description: "Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead.";
                        readonly type: "string";
                        readonly examples: readonly ["Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                    readonly required: {
                        readonly "0": "errorCode";
                        readonly "1": "message";
                        readonly "2": "statusCode";
                    };
                    readonly type: "object";
                };
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.erc20.unsupported";
                        readonly type: "string";
                        readonly examples: readonly ["eth.erc20.unsupported"];
                    };
                    readonly message: {
                        readonly description: "Unsupported ETH ERC20 blockchain.";
                        readonly type: "string";
                        readonly examples: readonly ["Unsupported ETH ERC20 blockchain."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "ethereum.broadcast.failed";
                        readonly type: "string";
                        readonly examples: readonly ["ethereum.broadcast.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to broadcast transaction due to ${error}.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to broadcast transaction due to ${error}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "gas.price.failed";
                        readonly type: "string";
                        readonly examples: readonly ["gas.price.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to obtain current GAS price.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to obtain current GAS price."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "ethereum.transaction.body";
                        readonly type: "string";
                        readonly examples: readonly ["ethereum.transaction.body"];
                    };
                    readonly message: {
                        readonly description: "Either currency, or tokenAddress must be defined.";
                        readonly type: "string";
                        readonly examples: readonly ["Either currency, or tokenAddress must be defined."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.transaction.gas";
                        readonly type: "string";
                        readonly examples: readonly ["eth.transaction.gas"];
                    };
                    readonly message: {
                        readonly description: "Unable to calculate gas limit for transaction. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to calculate gas limit for transaction. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.transaction.hash";
                        readonly type: "string";
                        readonly examples: readonly ["eth.transaction.hash"];
                    };
                    readonly message: {
                        readonly description: "Unable to calculate transaction hash. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to calculate transaction hash. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.transaction.sign";
                        readonly type: "string";
                        readonly examples: readonly ["eth.transaction.sign"];
                    };
                    readonly message: {
                        readonly description: "Unable to sign transaction. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to sign transaction. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const AlgoTransfer: {
    readonly body: {
        readonly oneOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly senderAccountId: {
                    readonly maxLength: 24;
                    readonly minLength: 24;
                    readonly description: "The ID of the virtual account to send Algos from";
                    readonly type: "string";
                    readonly examples: readonly ["61b3bffddfb389cde19c73be"];
                };
                readonly address: {
                    readonly description: "The blockchain address to send Algos to";
                    readonly maxLength: 58;
                    readonly minLength: 58;
                    readonly type: "string";
                    readonly examples: readonly ["5YVZBUH3STSQ5ABCTLEIEIJ7QOZFILM2DLAEEA4ZL6CU55ODZIQXO5EMYM"];
                };
                readonly amount: {
                    readonly description: "The amount to send in Algos";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["10000"];
                };
                readonly fee: {
                    readonly description: "The transaction fee in Algos";
                    readonly type: "string";
                    readonly default: "0.001";
                    readonly examples: readonly ["0.001"];
                };
                readonly privateKey: {
                    readonly maxLength: 103;
                    readonly minLength: 103;
                    readonly description: "The secret of the Algorand wallet (account). Secret, or signature Id must be present.";
                    readonly type: "string";
                    readonly examples: readonly ["NBYMCVEEDFYV3TPWVRE6APE7PKHUJD4XAKXCKNCLKGUXOC3LFNJGZQCJCRA53HB7ZAHF6NFJH2QIVQ5USQNWG35QCJLD4KZ5IWMB24Q"];
                };
                readonly compliant: {
                    readonly description: "Compliance check; if the withdrawal is not compliant, it will not be processed";
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                };
                readonly paymentId: {
                    readonly description: "The identifier of the Algo transfer that is shown on the virtual account for the created transaction";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["1234"];
                };
                readonly senderNote: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "The note for the recipient; must not contain spaces";
                    readonly type: "string";
                    readonly examples: readonly ["Helloworld"];
                };
            };
            readonly required: readonly ["senderAccountId", "address", "privateKey", "amount"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly senderAccountId: {
                    readonly maxLength: 24;
                    readonly minLength: 24;
                    readonly description: "The ID of the virtual account to send the ERC-20-equivalent Algorand tokens from";
                    readonly type: "string";
                    readonly examples: readonly ["61b3bffddfb389cde19c73be"];
                };
                readonly address: {
                    readonly description: "The blockchain address to send the ERC-20-equivalent Algorand tokens to";
                    readonly maxLength: 58;
                    readonly minLength: 58;
                    readonly type: "string";
                    readonly examples: readonly ["5YVZBUH3STSQ5ABCTLEIEIJ7QOZFILM2DLAEEA4ZL6CU55ODZIQXO5EMYM"];
                };
                readonly amount: {
                    readonly description: "The amount of the ERC-20-equivalent Algorand tokens to send";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["10000"];
                };
                readonly privateKey: {
                    readonly maxLength: 103;
                    readonly minLength: 103;
                    readonly description: "The secret of the Algorand wallet (account). Secret, or signature Id must be present.";
                    readonly type: "string";
                    readonly examples: readonly ["NBYMCVEEDFYV3TPWVRE6APE7PKHUJD4XAKXCKNCLKGUXOC3LFNJGZQCJCRA53HB7ZAHF6NFJH2QIVQ5USQNWG35QCJLD4KZ5IWMB24Q"];
                };
                readonly compliant: {
                    readonly description: "Compliance check; if the withdrawal is not compliant, it will not be processed";
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                };
                readonly paymentId: {
                    readonly description: "The identifier of the token transfer that is shown on the virtual account for the created transaction";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["1234"];
                };
                readonly senderNote: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "The note for the recipient; must not contain spaces";
                    readonly type: "string";
                    readonly examples: readonly ["Helloworld"];
                };
            };
            readonly required: readonly ["senderAccountId", "address", "privateKey", "amount", "fee"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly senderAccountId: {
                    readonly maxLength: 24;
                    readonly minLength: 24;
                    readonly description: "The ID of the virtual account to send Algos from";
                    readonly type: "string";
                    readonly examples: readonly ["61b3bffddfb389cde19c73be"];
                };
                readonly address: {
                    readonly description: "The blockchain address to send Algos to";
                    readonly maxLength: 58;
                    readonly minLength: 58;
                    readonly type: "string";
                    readonly examples: readonly ["5YVZBUH3STSQ5ABCTLEIEIJ7QOZFILM2DLAEEA4ZL6CU55ODZIQXO5EMYM"];
                };
                readonly amount: {
                    readonly description: "The amount to send in Algos";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["10000"];
                };
                readonly fee: {
                    readonly description: "The transaction fee in Algos";
                    readonly type: "string";
                    readonly default: "0.001";
                    readonly examples: readonly ["0.001"];
                };
                readonly signatureId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly description: "The identifier of the secret of the Algorand wallet (account) in the signing application. Secret, or signature Id must be present.";
                    readonly examples: readonly ["26d3883e-4e17-48b3-a0ee-09a3e484ac83"];
                };
                readonly index: {
                    readonly type: "number";
                    readonly minimum: 0;
                    readonly description: "If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.";
                };
                readonly from: {
                    readonly description: "The blockchain address of the sender";
                    readonly type: "string";
                    readonly examples: readonly ["TMETT6BXL3QUH7AH5TS6IONU7LVTLKIGG54CFCNPMQXWGRIZFIESZBYWP4"];
                };
                readonly compliant: {
                    readonly description: "Compliance check; if the withdrawal is not compliant, it will not be processed";
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                };
                readonly paymentId: {
                    readonly description: "The identifier of the Algo transfer that is shown on the virtual account for the created transaction";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["1234"];
                };
                readonly senderNote: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "The note for the recipient; must not contain spaces";
                    readonly type: "string";
                    readonly examples: readonly ["Helloworld"];
                };
            };
            readonly required: readonly ["senderAccountId", "address", "amount", "signatureId", "from"];
        }];
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly oneOf: readonly [{
                readonly type: "object";
                readonly properties: {
                    readonly id: {
                        readonly description: "ID of withdrawal. If transaction is not valid in blockchain, use this id to cancel withdrawal.";
                        readonly type: "string";
                        readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    };
                    readonly txId: {
                        readonly description: "TX hash of successful transaction.";
                        readonly type: "string";
                        readonly examples: readonly ["c83f8818db43d9ba4accfe454aa44fc33123d47a4f89d47b314d6748eb0e9bc9"];
                    };
                    readonly completed: {
                        readonly description: "If set to \"true\", the withdrawal has been completed in the virtual account; if set to \"false\", the withdrawal has not been completed and you have to <a href=\"https://apidoc.tatum.io/tag/Withdrawal#operation/completeWithdrawal\" target=\"_blank\">complete it manually</a>";
                        readonly type: "boolean";
                        readonly examples: readonly [true];
                    };
                };
                readonly required: readonly ["txId", "id", "completed"];
            }, {
                readonly type: "object";
                readonly properties: {
                    readonly signatureId: {
                        readonly description: "ID of prepared payment template to sign. This is should be stored on a client side to retrieve ID of the blockchain transaction, when signing application signs the transaction and broadcasts it to the blockchain.";
                        readonly format: "uuid";
                        readonly type: "string";
                        readonly examples: readonly ["1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6"];
                    };
                };
                readonly required: readonly ["id", "signatureId"];
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.missing";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.missing"];
                    };
                    readonly message: {
                        readonly description: "No such withdrawal.";
                        readonly type: "string";
                        readonly examples: readonly ["No such withdrawal."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "rate.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["rate.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such currency rate.";
                        readonly type: "string";
                        readonly examples: readonly ["No such currency rate."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "vc.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["vc.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such virtual currency.";
                        readonly type: "string";
                        readonly examples: readonly ["No such virtual currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.recipient.format";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.recipient.format"];
                    };
                    readonly message: {
                        readonly description: "Recipient blockchain address has incorrect format.";
                        readonly type: "string";
                        readonly examples: readonly ["Recipient blockchain address has incorrect format."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.failed.transaction.failed";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.failed.transaction.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to store withdrawal, it is impossible to create transaction.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to store withdrawal, it is impossible to create transaction."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.account.virtual";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.account.virtual"];
                    };
                    readonly message: {
                        readonly description: "Sender account cannot be virtual.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender account cannot be virtual."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "offchain.not.supported";
                        readonly type: "string";
                        readonly examples: readonly ["offchain.not.supported"];
                    };
                    readonly message: {
                        readonly description: "Offchain not supported for account with ${account.currency} currency.";
                        readonly type: "string";
                        readonly examples: readonly ["Offchain not supported for account with ${account.currency} currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "amount.format";
                        readonly type: "string";
                        readonly examples: readonly ["amount.format"];
                    };
                    readonly message: {
                        readonly description: "Amount has incorrect format.";
                        readonly type: "string";
                        readonly examples: readonly ["Amount has incorrect format."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "fee.format";
                        readonly type: "string";
                        readonly examples: readonly ["fee.format"];
                    };
                    readonly message: {
                        readonly description: "Fee has incorrect format.";
                        readonly type: "string";
                        readonly examples: readonly ["Fee has incorrect format."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.not.cancelled.transaction.failed";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.not.cancelled.transaction.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to broadcast transaction, and impossible to cancel withdrawal. ID is attached, \"${withdrawalId}\", cancel it manually.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to broadcast transaction, and impossible to cancel withdrawal. ID is attached, \"${withdrawalId}\", cancel it manually."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.prepare.failed";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.prepare.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to prepare transaction, withdrawal cancelled.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to prepare transaction, withdrawal cancelled."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.not.exists"];
                    };
                    readonly message: {
                        readonly description: "Unable to find sender account ${transaction.senderAccountId}.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find sender account ${transaction.senderAccountId}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.customer.disabled";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.customer.disabled"];
                    };
                    readonly message: {
                        readonly description: "Sender accounts customer ${senderAccount.customerId} is disabled, unable to perform payment.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender accounts customer ${senderAccount.customerId} is disabled, unable to perform payment."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "balance.insufficient";
                        readonly type: "string";
                        readonly examples: readonly ["balance.insufficient"];
                    };
                    readonly message: {
                        readonly description: "Insufficient balance for account ${transaction.senderAccountId} and payment amount ${transaction.amount}. Sender balance is ${senderAccount.balance.availableBalance as string}, amount is ${amount}";
                        readonly type: "string";
                        readonly examples: readonly ["Insufficient balance for account ${transaction.senderAccountId} and payment amount ${transaction.amount}. Sender balance is ${senderAccount.balance.availableBalance as string}, amount is ${amount}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "amount.btc";
                        readonly type: "string";
                        readonly examples: readonly ["amount.btc"];
                    };
                    readonly message: {
                        readonly description: "BTC|LTC|BCH|DOGE payment amount must be at least 0.00000001, not ${transaction.amount}.";
                        readonly type: "string";
                        readonly examples: readonly ["BTC|LTC|BCH|DOGE payment amount must be at least 0.00000001, not ${transaction.amount}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "amount.eth";
                        readonly type: "string";
                        readonly examples: readonly ["amount.eth"];
                    };
                    readonly message: {
                        readonly description: "ETH payment amount must be at least 0.000000000001, not ${transaction.amount}.";
                        readonly type: "string";
                        readonly examples: readonly ["ETH payment amount must be at least 0.000000000001, not ${transaction.amount}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.frozen";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.frozen"];
                    };
                    readonly message: {
                        readonly description: "Sender account ${transaction.senderAccountId} is frozen, unable to perform payment.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender account ${transaction.senderAccountId} is frozen, unable to perform payment."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.pending";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.pending"];
                    };
                    readonly message: {
                        readonly description: "Unable to prepare withdrawal, last withdrawal with id ${id} is not yet processed by blockchain.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to prepare withdrawal, last withdrawal with id ${id} is not yet processed by blockchain."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "private.mnemonic.missing";
                        readonly type: "string";
                        readonly examples: readonly ["private.mnemonic.missing"];
                    };
                    readonly message: {
                        readonly description: "Either mnemonic and index or private key must be present.";
                        readonly type: "string";
                        readonly examples: readonly ["Either mnemonic and index or private key must be present."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.erc20.unsupported";
                        readonly type: "string";
                        readonly examples: readonly ["eth.erc20.unsupported"];
                    };
                    readonly message: {
                        readonly description: "Unsupported ETH ERC20 blockchain.";
                        readonly type: "string";
                        readonly examples: readonly ["Unsupported ETH ERC20 blockchain."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "ethereum.broadcast.failed";
                        readonly type: "string";
                        readonly examples: readonly ["ethereum.broadcast.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to broadcast transaction due to ${error}.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to broadcast transaction due to ${error}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "gas.price.failed";
                        readonly type: "string";
                        readonly examples: readonly ["gas.price.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to obtain current GAS price.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to obtain current GAS price."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "ethereum.transaction.body";
                        readonly type: "string";
                        readonly examples: readonly ["ethereum.transaction.body"];
                    };
                    readonly message: {
                        readonly description: "Either currency, or tokenAddress must be defined.";
                        readonly type: "string";
                        readonly examples: readonly ["Either currency, or tokenAddress must be defined."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.transaction.gas";
                        readonly type: "string";
                        readonly examples: readonly ["eth.transaction.gas"];
                    };
                    readonly message: {
                        readonly description: "Unable to calculate gas limit for transaction. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to calculate gas limit for transaction. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.transaction.hash";
                        readonly type: "string";
                        readonly examples: readonly ["eth.transaction.hash"];
                    };
                    readonly message: {
                        readonly description: "Unable to calculate transaction hash. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to calculate transaction hash. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.transaction.sign";
                        readonly type: "string";
                        readonly examples: readonly ["eth.transaction.sign"];
                    };
                    readonly message: {
                        readonly description: "Unable to sign transaction. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to sign transaction. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const AssignAddress: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "The ID of the virtual account to assign a blockchain address to";
                };
                readonly address: {
                    readonly type: "string";
                    readonly examples: readonly ["2MsM67NLa71fHvTUBqNENW15P68nHB2vVXb"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "The blockchain address to assign to the virtual account";
                };
            };
            readonly required: readonly ["id", "address"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly index: {
                    readonly type: "number";
                    readonly minimum: 1;
                    readonly examples: readonly [1];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Destination tag or memo attribute for XRP or XLM addresses";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly required: readonly ["address", "currency"];
            readonly properties: {
                readonly address: {
                    readonly description: "Blockchain address.";
                    readonly type: "string";
                    readonly examples: readonly ["7c21ed165e294db78b95f0f181086d6f"];
                };
                readonly currency: {
                    readonly description: "Currency of generated address. BTC, LTC, DOGE, BCH, ETH, XRP, XLM, BNB, TRX, ERC20, TRC20.";
                    readonly type: "string";
                    readonly examples: readonly ["BTC"];
                };
                readonly derivationKey: {
                    readonly description: "Derivation key index for given address.";
                    readonly format: "int32";
                    readonly type: "integer";
                    readonly maximum: 2147483647;
                    readonly minimum: -2147483648;
                };
                readonly xpub: {
                    readonly description: "Extended public key to derive address from. In case of XRP, this is account address, since address is defined as DestinationTag, which is address field. In case of XLM, this is account address, since address is defined as message, which is address field.";
                    readonly type: "string";
                    readonly examples: readonly ["xpub6FB4LJzdKNkkpsjggFAGS2p34G48pqjtmSktmK2Ke3k1LKqm9ULsg8bGfDakYUrdhe2EHw5uGKX9DrMbrgYnVfDwrksT4ZVQ3vmgEruo3Ka"];
                };
                readonly destinationTag: {
                    readonly description: "In case of XRP, destinationTag is the distinguisher of the account.";
                    readonly type: "number";
                    readonly examples: readonly [5];
                };
                readonly memo: {
                    readonly description: "In case of BNB, message is the distinguisher of the account.";
                    readonly type: "string";
                    readonly examples: readonly ["5"];
                };
                readonly message: {
                    readonly description: "In case of XLM, message is the distinguisher of the account.";
                    readonly type: "string";
                    readonly examples: readonly ["5"];
                };
            };
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["account.not.exists"];
                    };
                    readonly message: {
                        readonly description: "No such account.";
                        readonly type: "string";
                        readonly examples: readonly ["No such account."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.present";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.present"];
                    };
                    readonly message: {
                        readonly description: "Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead.";
                        readonly type: "string";
                        readonly examples: readonly ["Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                    readonly required: {
                        readonly "0": "errorCode";
                        readonly "1": "message";
                        readonly "2": "statusCode";
                    };
                    readonly type: "object";
                };
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "offchain.not.supported";
                        readonly type: "string";
                        readonly examples: readonly ["offchain.not.supported"];
                    };
                    readonly message: {
                        readonly description: "Offchain not supported for account with ${account.currency} currency.";
                        readonly type: "string";
                        readonly examples: readonly ["Offchain not supported for account with ${account.currency} currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const BchTransfer: {
    readonly body: {
        readonly oneOf: readonly [{
            readonly properties: {
                readonly senderAccountId: {
                    readonly description: "Sender account ID";
                    readonly maxLength: 24;
                    readonly minLength: 24;
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly address: {
                    readonly description: "Blockchain address to send assets to. For BTC, LTC, DOGE and BCH, it is possible to enter list of multiple recipient blockchain addresses as a comma separated string.";
                    readonly maxLength: 10000;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["bitcoincash:qrd9khmeg4nqag3h5gzu8vjt537pm7le85lcauzez"];
                };
                readonly amount: {
                    readonly description: "Amount to be withdrawn to blockchain.";
                    readonly maxLength: 38;
                    readonly type: "string";
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly examples: readonly ["0.001"];
                };
                readonly compliant: {
                    readonly description: "Compliance check, if withdrawal is not compliant, it will not be processed.";
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                };
                readonly multipleAmounts: {
                    readonly description: "For BTC, LTC, DOGE and BCH, it is possible to enter list of multiple recipient blockchain amounts. List of recipient addresses must be present in the address field and total sum of amounts must be equal to the amount field.";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                        readonly examples: readonly ["0.1"];
                    };
                };
                readonly fee: {
                    readonly description: "Fee to be submitted as a transaction fee to blockchain. If none is set, default value of 0.00005 BCH is used.";
                    readonly type: "string";
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly examples: readonly ["0.00005"];
                };
                readonly mnemonic: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "Mnemonic seed - usually 12-24 words with access to whole wallet.\nEither mnemonic, keyPair or signature Id must be present - depends on the type of account and xpub.\nTatum KMS does not support keyPair type of off-chain transaction, only mnemonic based.\n";
                    readonly type: "string";
                    readonly examples: readonly ["urge pulp usage sister evidence arrest palm math please chief egg abuse"];
                };
                readonly xpub: {
                    readonly description: "Extended public key (xpub) of the wallet associated with the accounts. Should be present, when mnemonic is used.";
                    readonly maxLength: 150;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["xpub6EsCk1uU6cJzqvP9CdsTiJwT2rF748YkPnhv5Qo8q44DG7nn2vbyt48YRsNSUYS44jFCW9gwvD9kLQu9AuqXpTpM1c5hgg9PsuBLdeNncid"];
                };
                readonly paymentId: {
                    readonly description: "Identifier of the payment, shown for created Transaction within Tatum sender account.";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["1234"];
                };
                readonly senderNote: {
                    readonly description: "Note visible to owner of withdrawing account";
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["Sender note"];
                };
            };
            readonly required: readonly ["amount", "senderAccountId", "address", "mnemonic", "xpub"];
            readonly type: "object";
        }, {
            readonly properties: {
                readonly senderAccountId: {
                    readonly description: "Sender account ID";
                    readonly maxLength: 24;
                    readonly minLength: 24;
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly address: {
                    readonly description: "Blockchain address to send assets to. For BTC, LTC, DOGE and BCH, it is possible to enter list of multiple recipient blockchain addresses as a comma separated string.";
                    readonly maxLength: 10000;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["bitcoincash:qrd9khmeg4nqag3h5gzu8vjt537pm7le85lcauzez"];
                };
                readonly amount: {
                    readonly description: "Amount to be withdrawn to blockchain.";
                    readonly maxLength: 38;
                    readonly type: "string";
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly examples: readonly ["0.001"];
                };
                readonly compliant: {
                    readonly description: "Compliance check, if withdrawal is not compliant, it will not be processed.";
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                };
                readonly multipleAmounts: {
                    readonly description: "For BTC, LTC, DOGE and BCH, it is possible to enter list of multiple recipient blockchain amounts. List of recipient addresses must be present in the address field and total sum of amounts must be equal to the amount field.";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                        readonly examples: readonly ["0.1"];
                    };
                };
                readonly fee: {
                    readonly description: "Fee to be submitted as a transaction fee to blockchain. If none is set, default value of 0.00005 BCH is used.";
                    readonly type: "string";
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly examples: readonly ["0.00005"];
                };
                readonly keyPair: {
                    readonly description: "Array of assigned blockchain addresses with their private keys.\nEither mnemonic, keyPair or signature Id must be present - depends on the type of account and xpub.\nTatum KMS does not support keyPair type of off-chain transaction, only mnemonic based.\n";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly address: {
                                readonly type: "string";
                                readonly description: "Blockchain address assigned to account withdrawal is made from.";
                                readonly maxLength: 50;
                                readonly minLength: 30;
                                readonly examples: readonly ["bitcoincash:qrd9khmeg4nqag3h5gzu8vjt537pm7le85lcauzez"];
                            };
                            readonly privateKey: {
                                readonly type: "string";
                                readonly description: "Private key of blockchain address.";
                                readonly maxLength: 52;
                                readonly minLength: 52;
                                readonly examples: readonly ["cTmS2jBWXgFaXZ2xG9jhn67TiyTshnMp3UedamzEhGm6BZV1vLgQ"];
                            };
                        };
                    };
                };
                readonly attr: {
                    readonly description: "Used to parametrize withdrawal as a change address for left coins from transaction.";
                    readonly maxLength: 256;
                    readonly minLength: 1;
                    readonly type: "string";
                };
                readonly paymentId: {
                    readonly description: "Identifier of the payment, shown for created Transaction within Tatum sender account.";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["1234"];
                };
                readonly senderNote: {
                    readonly description: "Note visible to owner of withdrawing account";
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["Sender note"];
                };
            };
            readonly required: readonly ["amount", "senderAccountId", "address", "keyPair", "attr"];
            readonly type: "object";
        }, {
            readonly properties: {
                readonly senderAccountId: {
                    readonly description: "Sender account ID";
                    readonly maxLength: 24;
                    readonly minLength: 24;
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly address: {
                    readonly description: "Blockchain address to send assets to. For BTC, LTC, DOGE and BCH, it is possible to enter list of multiple recipient blockchain addresses as a comma separated string.";
                    readonly maxLength: 10000;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["bitcoincash:qrd9khmeg4nqag3h5gzu8vjt537pm7le85lcauzez"];
                };
                readonly amount: {
                    readonly description: "Amount to be withdrawn to blockchain.";
                    readonly maxLength: 38;
                    readonly type: "string";
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly examples: readonly ["0.001"];
                };
                readonly compliant: {
                    readonly description: "Compliance check, if withdrawal is not compliant, it will not be processed.";
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                };
                readonly multipleAmounts: {
                    readonly description: "For BTC, LTC, DOGE and BCH, it is possible to enter list of multiple recipient blockchain amounts. List of recipient addresses must be present in the address field and total sum of amounts must be equal to the amount field.";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                        readonly examples: readonly ["0.1"];
                    };
                };
                readonly fee: {
                    readonly description: "Fee to be submitted as a transaction fee to blockchain. If none is set, default value of 0.00005 BCH is used.";
                    readonly type: "string";
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly examples: readonly ["0.00005"];
                };
                readonly signatureId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly description: "Signature hash of the mnemonic, which will be used to sign transactions locally.\nAll signature Ids should be present, which might be used to sign transaction.\nTatum KMS does not support keyPair type of off-chain transaction, only mnemonic based.\n";
                    readonly examples: readonly ["26d3883e-4e17-48b3-a0ee-09a3e484ac83"];
                };
                readonly xpub: {
                    readonly description: "Extended public key (xpub) of the wallet associated with the accounts. Should be present, when mnemonic is used.";
                    readonly maxLength: 150;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["xpub6EsCk1uU6cJzqvP9CdsTiJwT2rF748YkPnhv5Qo8q44DG7nn2vbyt48YRsNSUYS44jFCW9gwvD9kLQu9AuqXpTpM1c5hgg9PsuBLdeNncid"];
                };
                readonly paymentId: {
                    readonly description: "Identifier of the payment, shown for created Transaction within Tatum sender account.";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["1234"];
                };
                readonly senderNote: {
                    readonly description: "Note visible to owner of withdrawing account";
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["Sender note"];
                };
            };
            readonly required: readonly ["amount", "senderAccountId", "address", "signatureId", "xpub"];
            readonly type: "object";
        }];
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly oneOf: readonly [{
                readonly type: "object";
                readonly properties: {
                    readonly id: {
                        readonly description: "ID of withdrawal. If transaction is not valid in blockchain, use this id to cancel withdrawal.";
                        readonly type: "string";
                        readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    };
                    readonly txId: {
                        readonly description: "TX hash of successful transaction.";
                        readonly type: "string";
                        readonly examples: readonly ["c83f8818db43d9ba4accfe454aa44fc33123d47a4f89d47b314d6748eb0e9bc9"];
                    };
                    readonly completed: {
                        readonly description: "If set to \"true\", the withdrawal has been completed in the virtual account; if set to \"false\", the withdrawal has not been completed and you have to <a href=\"https://apidoc.tatum.io/tag/Withdrawal#operation/completeWithdrawal\" target=\"_blank\">complete it manually</a>";
                        readonly type: "boolean";
                        readonly examples: readonly [true];
                    };
                };
                readonly required: readonly ["txId", "id", "completed"];
            }, {
                readonly type: "object";
                readonly properties: {
                    readonly signatureId: {
                        readonly description: "ID of prepared payment template to sign. This is should be stored on a client side to retrieve ID of the blockchain transaction, when signing application signs the transaction and broadcasts it to the blockchain.";
                        readonly format: "uuid";
                        readonly type: "string";
                        readonly examples: readonly ["1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6"];
                    };
                };
                readonly required: readonly ["id", "signatureId"];
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "transaction.invalid.body";
                        readonly type: "string";
                        readonly examples: readonly ["transaction.invalid.body"];
                    };
                    readonly message: {
                        readonly description: "Either UTXO, or addresses must be present.";
                        readonly type: "string";
                        readonly examples: readonly ["Either UTXO, or addresses must be present."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.missing";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.missing"];
                    };
                    readonly message: {
                        readonly description: "No such withdrawal.";
                        readonly type: "string";
                        readonly examples: readonly ["No such withdrawal."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "rate.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["rate.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such currency rate.";
                        readonly type: "string";
                        readonly examples: readonly ["No such currency rate."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "vc.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["vc.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such virtual currency.";
                        readonly type: "string";
                        readonly examples: readonly ["No such virtual currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.failed.transaction.failed";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.failed.transaction.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to store withdrawal, it is impossible to create transaction.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to store withdrawal, it is impossible to create transaction."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "blockchain.error.code";
                        readonly type: "string";
                        readonly examples: readonly ["blockchain.error.code"];
                    };
                    readonly message: {
                        readonly description: "${error.message} Code: ${error.code}";
                        readonly type: "string";
                        readonly examples: readonly ["${error.message} Code: ${error.code}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "blockchain.broadcast.error";
                        readonly type: "string";
                        readonly examples: readonly ["blockchain.broadcast.error"];
                    };
                    readonly message: {
                        readonly description: "Unable to broadcast transaction, wrong input data.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to broadcast transaction, wrong input data."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "transaction.preparation.failed";
                        readonly type: "string";
                        readonly examples: readonly ["transaction.preparation.failed"];
                    };
                    readonly message: {
                        readonly description: "Impossible to prepare transaction. Either mnemonic or keyPair and attr must be present.";
                        readonly type: "string";
                        readonly examples: readonly ["Impossible to prepare transaction. Either mnemonic or keyPair and attr must be present."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.account.virtual";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.account.virtual"];
                    };
                    readonly message: {
                        readonly description: "Sender account cannot be virtual.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender account cannot be virtual."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "offchain.not.supported";
                        readonly type: "string";
                        readonly examples: readonly ["offchain.not.supported"];
                    };
                    readonly message: {
                        readonly description: "Offchain not supported for account with ${account.currency} currency.";
                        readonly type: "string";
                        readonly examples: readonly ["Offchain not supported for account with ${account.currency} currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "amount.format";
                        readonly type: "string";
                        readonly examples: readonly ["amount.format"];
                    };
                    readonly message: {
                        readonly description: "Amount has incorrect format.";
                        readonly type: "string";
                        readonly examples: readonly ["Amount has incorrect format."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "fee.format";
                        readonly type: "string";
                        readonly examples: readonly ["fee.format"];
                    };
                    readonly message: {
                        readonly description: "Fee has incorrect format.";
                        readonly type: "string";
                        readonly examples: readonly ["Fee has incorrect format."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "transaction.failed";
                        readonly type: "string";
                        readonly examples: readonly ["transaction.failed"];
                    };
                    readonly message: {
                        readonly description: "No spendable inputs.";
                        readonly type: "string";
                        readonly examples: readonly ["No spendable inputs."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "key.generation.failed.wrong.mnemonic";
                        readonly type: "string";
                        readonly examples: readonly ["key.generation.failed.wrong.mnemonic"];
                    };
                    readonly message: {
                        readonly description: "Unable to generate address, wrong mnemonic and index.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to generate address, wrong mnemonic and index."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.not.cancelled.transaction.failed";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.not.cancelled.transaction.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to broadcast transaction, and impossible to cancel withdrawal. ID is attached, \"${withdrawalId}\", cancel it manually.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to broadcast transaction, and impossible to cancel withdrawal. ID is attached, \"${withdrawalId}\", cancel it manually."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.prepare.failed";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.prepare.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to prepare transaction, withdrawal cancelled.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to prepare transaction, withdrawal cancelled."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.not.exists"];
                    };
                    readonly message: {
                        readonly description: "Unable to find sender account ${transaction.senderAccountId}.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find sender account ${transaction.senderAccountId}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.customer.disabled";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.customer.disabled"];
                    };
                    readonly message: {
                        readonly description: "Sender accounts customer ${senderAccount.customerId} is disabled, unable to perform payment.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender accounts customer ${senderAccount.customerId} is disabled, unable to perform payment."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "balance.insufficient";
                        readonly type: "string";
                        readonly examples: readonly ["balance.insufficient"];
                    };
                    readonly message: {
                        readonly description: "Insufficient balance for account ${transaction.senderAccountId} and payment amount ${transaction.amount}. Sender balance is ${senderAccount.balance.availableBalance as string}, amount is ${amount}";
                        readonly type: "string";
                        readonly examples: readonly ["Insufficient balance for account ${transaction.senderAccountId} and payment amount ${transaction.amount}. Sender balance is ${senderAccount.balance.availableBalance as string}, amount is ${amount}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "amount.btc";
                        readonly type: "string";
                        readonly examples: readonly ["amount.btc"];
                    };
                    readonly message: {
                        readonly description: "BTC|LTC|BCH|DOGE payment amount must be at least 0.00000001, not ${transaction.amount}.";
                        readonly type: "string";
                        readonly examples: readonly ["BTC|LTC|BCH|DOGE payment amount must be at least 0.00000001, not ${transaction.amount}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "amount.eth";
                        readonly type: "string";
                        readonly examples: readonly ["amount.eth"];
                    };
                    readonly message: {
                        readonly description: "ETH payment amount must be at least 0.000000000001, not ${transaction.amount}.";
                        readonly type: "string";
                        readonly examples: readonly ["ETH payment amount must be at least 0.000000000001, not ${transaction.amount}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.frozen";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.frozen"];
                    };
                    readonly message: {
                        readonly description: "Sender account ${transaction.senderAccountId} is frozen, unable to perform payment.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender account ${transaction.senderAccountId} is frozen, unable to perform payment."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.pending";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.pending"];
                    };
                    readonly message: {
                        readonly description: "Unable to prepare withdrawal, last withdrawal with id ${id} is not yet processed by blockchain.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to prepare withdrawal, last withdrawal with id ${id} is not yet processed by blockchain."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const BlockAmount: {
    readonly body: {
        readonly properties: {
            readonly amount: {
                readonly description: "The amount to be blocked on the account";
                readonly maxLength: 38;
                readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                readonly type: "string";
                readonly examples: readonly ["5"];
            };
            readonly type: {
                readonly description: "The type of the blockage that you are applying; can be a code or an identifier from an external system or a short description of the blockage";
                readonly type: "string";
                readonly minLength: 1;
                readonly maxLength: 100;
                readonly examples: readonly ["DEBIT_CARD_OP"];
            };
            readonly description: {
                readonly description: "The description of the blockage that you are applying";
                readonly type: "string";
                readonly minLength: 1;
                readonly maxLength: 300;
                readonly examples: readonly ["Card payment in the shop."];
            };
        };
        readonly required: readonly ["amount", "type"];
        readonly type: "object";
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["5e6be89ee6aa436299950c3f"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Account ID";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "ID of the entity.";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["account.not.exists"];
                    };
                    readonly message: {
                        readonly description: "No such account.";
                        readonly type: "string";
                        readonly examples: readonly ["No such account."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "customer.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["customer.not.exists"];
                    };
                    readonly message: {
                        readonly description: "No customer with given external ID ${externalId} exists.";
                        readonly type: "string";
                        readonly examples: readonly ["No customer with given external ID ${externalId} exists."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const BnbAssetOffchain: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly token: {
                readonly description: "Asset name.";
                readonly type: "string";
                readonly pattern: "^[a-zA-Z0-9\\-]{1,12}$";
                readonly maxLength: 12;
                readonly minLength: 1;
                readonly examples: readonly ["NNB-B90"];
            };
            readonly basePair: {
                readonly description: "Base pair for Asset. Transaction value will be calculated according to this base pair. e.g. 1 TOKEN123 is equal to 1 EUR, if basePair is set to EUR.";
                readonly type: "string";
                readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                readonly examples: readonly ["EUR"];
            };
        };
        readonly required: readonly ["basePair", "token"];
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "virtual.creation.error";
                    readonly type: "string";
                    readonly examples: readonly ["virtual.creation.error"];
                };
                readonly message: {
                    readonly description: "It is not possible to create virtual currency.";
                    readonly type: "string";
                    readonly examples: readonly ["It is not possible to create virtual currency."];
                };
                readonly statusCode: {
                    readonly description: "403";
                    readonly type: "number";
                    readonly examples: readonly [403];
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const BnbTransfer: {
    readonly body: {
        readonly oneOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly senderAccountId: {
                    readonly maxLength: 24;
                    readonly minLength: 24;
                    readonly description: "Sender account ID";
                    readonly type: "string";
                    readonly examples: readonly ["61b3bffddfb389cde19c73be"];
                };
                readonly address: {
                    readonly description: "Blockchain address to send assets";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["tbnb1q82g2h9q0kfe7sysnj5w7nlak92csfjztymp39"];
                };
                readonly amount: {
                    readonly description: "Amount to be sent, in BNB.";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["10000"];
                };
                readonly compliant: {
                    readonly description: "Compliance check, if withdrawal is not compliant, it will not be processed.";
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                };
                readonly attr: {
                    readonly description: "Memo of the recipient account, if any.";
                    readonly type: "string";
                    readonly examples: readonly ["12355"];
                };
                readonly paymentId: {
                    readonly description: "Identifier of the payment, shown for created Transaction within Tatum sender account.";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["1234"];
                };
                readonly fromPrivateKey: {
                    readonly type: "string";
                    readonly maxLength: 64;
                    readonly minLength: 64;
                    readonly description: "Private key of sender address.";
                    readonly examples: readonly ["8ac4b14b38d8a5af58019088ce5a24b764536bccd1981cf79d3e09e9d1f2ad31"];
                };
                readonly senderNote: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "Note visible to owner of withdrawing account.";
                    readonly type: "string";
                    readonly examples: readonly ["Sender note"];
                };
            };
            readonly required: readonly ["senderAccountId", "address", "amount", "fromPrivateKey"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly senderAccountId: {
                    readonly maxLength: 24;
                    readonly minLength: 24;
                    readonly description: "Sender account ID";
                    readonly type: "string";
                    readonly examples: readonly ["61b3bffddfb389cde19c73be"];
                };
                readonly address: {
                    readonly description: "Blockchain address to send assets";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["tbnb1q82g2h9q0kfe7sysnj5w7nlak92csfjztymp39"];
                };
                readonly amount: {
                    readonly description: "Amount to be sent, in BNB.";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["10000"];
                };
                readonly compliant: {
                    readonly description: "Compliance check, if withdrawal is not compliant, it will not be processed.";
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                };
                readonly attr: {
                    readonly description: "Memo of the recipient account, if any.";
                    readonly type: "string";
                    readonly examples: readonly ["12355"];
                };
                readonly paymentId: {
                    readonly description: "Identifier of the payment, shown for created Transaction within Tatum sender account.";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["1234"];
                };
                readonly signatureId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly description: "Identifier of the secret associated in signing application. Secret, or signature Id must be present.";
                    readonly examples: readonly ["26d3883e-4e17-48b3-a0ee-09a3e484ac83"];
                };
                readonly fromAddress: {
                    readonly description: "Blockchain address to send from.";
                    readonly maxLength: 50;
                    readonly minLength: 42;
                    readonly type: "string";
                    readonly examples: readonly ["tbnb1q82g2h9q0kfe7sysnj5w7nlak92csfjztymp39"];
                };
                readonly senderNote: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "Note visible to owner of withdrawing account.";
                    readonly type: "string";
                    readonly examples: readonly ["Sender note"];
                };
            };
            readonly required: readonly ["senderAccountId", "fromAddress", "address", "amount", "signatureId"];
        }];
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly oneOf: readonly [{
                readonly type: "object";
                readonly properties: {
                    readonly id: {
                        readonly description: "ID of withdrawal. If transaction is not valid in blockchain, use this id to cancel withdrawal.";
                        readonly type: "string";
                        readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    };
                    readonly txId: {
                        readonly description: "TX hash of successful transaction.";
                        readonly type: "string";
                        readonly examples: readonly ["c83f8818db43d9ba4accfe454aa44fc33123d47a4f89d47b314d6748eb0e9bc9"];
                    };
                    readonly completed: {
                        readonly description: "If set to \"true\", the withdrawal has been completed in the virtual account; if set to \"false\", the withdrawal has not been completed and you have to <a href=\"https://apidoc.tatum.io/tag/Withdrawal#operation/completeWithdrawal\" target=\"_blank\">complete it manually</a>";
                        readonly type: "boolean";
                        readonly examples: readonly [true];
                    };
                };
                readonly required: readonly ["txId", "id", "completed"];
            }, {
                readonly type: "object";
                readonly properties: {
                    readonly signatureId: {
                        readonly description: "ID of prepared payment template to sign. This is should be stored on a client side to retrieve ID of the blockchain transaction, when signing application signs the transaction and broadcasts it to the blockchain.";
                        readonly format: "uuid";
                        readonly type: "string";
                        readonly examples: readonly ["1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6"];
                    };
                };
                readonly required: readonly ["id", "signatureId"];
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "bnb.failed";
                        readonly type: "string";
                        readonly examples: readonly ["bnb.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to communicate with blockchain. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to communicate with blockchain. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "Address.bnb.generation.failed.wrong.xpub";
                        readonly type: "string";
                        readonly examples: readonly ["address.bnb.generation.failed.wrong.xpub"];
                    };
                    readonly message: {
                        readonly description: "Unable to generate BNB address, wrong xpub and account type.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to generate BNB address, wrong xpub and account type."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "bnb.broadcast.bad.signature";
                        readonly type: "string";
                        readonly examples: readonly ["bnb.broadcast.bad.signature"];
                    };
                    readonly message: {
                        readonly description: "Unable to broadcast BNB transaction, bad signature.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to broadcast BNB transaction, bad signature."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "bnb.broadcast.failed.tx.state";
                        readonly type: "string";
                        readonly examples: readonly ["bnb.broadcast.failed.tx.state"];
                    };
                    readonly message: {
                        readonly description: "Unable to broadcast BNB transaction, tx ${hash} state not OK.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to broadcast BNB transaction, tx ${hash} state not OK."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "bnb.transfer.failed";
                        readonly type: "string";
                        readonly examples: readonly ["bnb.transfer.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to transfer funds. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to transfer funds. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "rate.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["rate.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such currency rate.";
                        readonly type: "string";
                        readonly examples: readonly ["No such currency rate."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "vc.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["vc.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such virtual currency.";
                        readonly type: "string";
                        readonly examples: readonly ["No such virtual currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.failed.transaction.failed";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.failed.transaction.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to store withdrawal, it is impossible to create transaction.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to store withdrawal, it is impossible to create transaction."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.account.virtual";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.account.virtual"];
                    };
                    readonly message: {
                        readonly description: "Sender account cannot be virtual.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender account cannot be virtual."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "offchain.not.supported";
                        readonly type: "string";
                        readonly examples: readonly ["offchain.not.supported"];
                    };
                    readonly message: {
                        readonly description: "Offchain not supported for account with ${account.currency} currency.";
                        readonly type: "string";
                        readonly examples: readonly ["Offchain not supported for account with ${account.currency} currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "amount.format";
                        readonly type: "string";
                        readonly examples: readonly ["amount.format"];
                    };
                    readonly message: {
                        readonly description: "Amount has incorrect format.";
                        readonly type: "string";
                        readonly examples: readonly ["Amount has incorrect format."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.not.exists"];
                    };
                    readonly message: {
                        readonly description: "Unable to find sender account ${transaction.senderAccountId}.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find sender account ${transaction.senderAccountId}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.customer.disabled";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.customer.disabled"];
                    };
                    readonly message: {
                        readonly description: "Sender accounts customer ${senderAccount.customerId} is disabled, unable to perform payment.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender accounts customer ${senderAccount.customerId} is disabled, unable to perform payment."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "balance.insufficient";
                        readonly type: "string";
                        readonly examples: readonly ["balance.insufficient"];
                    };
                    readonly message: {
                        readonly description: "Insufficient balance for account ${transaction.senderAccountId} and payment amount ${transaction.amount}. Sender balance is ${senderAccount.balance.availableBalance as string}, amount is ${amount}";
                        readonly type: "string";
                        readonly examples: readonly ["Insufficient balance for account ${transaction.senderAccountId} and payment amount ${transaction.amount}. Sender balance is ${senderAccount.balance.availableBalance as string}, amount is ${amount}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.frozen";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.frozen"];
                    };
                    readonly message: {
                        readonly description: "Sender account ${transaction.senderAccountId} is frozen, unable to perform payment.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender account ${transaction.senderAccountId} is frozen, unable to perform payment."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.pending";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.pending"];
                    };
                    readonly message: {
                        readonly description: "Unable to prepare withdrawal, last withdrawal with id ${id} is not yet processed by blockchain.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to prepare withdrawal, last withdrawal with id ${id} is not yet processed by blockchain."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const BroadcastBlockchainTransaction: {
    readonly body: {
        readonly properties: {
            readonly currency: {
                readonly description: "Currency of signed transaction to be broadcast, BTC, LTC, DOGE, BNB, XLM, TRX, BCH, ETH, XRP, ERC20, TRC20";
                readonly maxLength: 40;
                readonly minLength: 2;
                readonly type: "string";
                readonly examples: readonly ["BTC"];
            };
            readonly txData: {
                readonly description: "Raw signed transaction to be published to network.";
                readonly maxLength: 500000;
                readonly minLength: 1;
                readonly type: "string";
                readonly examples: readonly ["62BD544D1B9031EFC330A3E855CC3A0D51CA5131455C1AB3BCAC6D243F65460D"];
            };
            readonly withdrawalId: {
                readonly description: "Withdrawal ID to be completed by transaction broadcast";
                readonly maxLength: 24;
                readonly minLength: 24;
                readonly type: "string";
                readonly examples: readonly ["5e68c66581f2ee32bc354087"];
            };
            readonly signatureId: {
                readonly description: "ID of prepared payment template to sign. This is should be stored on a client side to retrieve ID of the blockchain transaction, when signing application signs the transaction and broadcasts it to the blockchain.";
                readonly format: "uuid";
                readonly type: "string";
                readonly examples: readonly ["1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6"];
            };
        };
        readonly required: readonly ["txData", "currency"];
        readonly type: "object";
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly properties: {
                readonly completed: {
                    readonly description: "Flag, if withdrawal is successfully completed within Tatum systems.";
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                };
                readonly txId: {
                    readonly description: "Transaction ID of broadcast transaction and status";
                    readonly type: "string";
                    readonly examples: readonly ["62BD544D1B9031EFC330A3E855CC3A0D51CA5131455C1AB3BCAC6D243F65460D"];
                };
            };
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.missing";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.missing"];
                    };
                    readonly message: {
                        readonly description: "No such withdrawal.";
                        readonly type: "string";
                        readonly examples: readonly ["No such withdrawal."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "broadcast.failed.withdrawalId";
                        readonly type: "string";
                        readonly examples: readonly ["broadcast.failed.withdrawalId"];
                    };
                    readonly message: {
                        readonly description: "WithdrawalId must be present.";
                        readonly type: "string";
                        readonly examples: readonly ["WithdrawalId must be present."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "ethereum.broadcast.failed";
                        readonly type: "string";
                        readonly examples: readonly ["ethereum.broadcast.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to broadcast transaction due to ${error}.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to broadcast transaction due to ${error}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "blockchain.error.code";
                        readonly type: "string";
                        readonly examples: readonly ["blockchain.error.code"];
                    };
                    readonly message: {
                        readonly description: "${error.message} Code: ${error.code}";
                        readonly type: "string";
                        readonly examples: readonly ["${error.message} Code: ${error.code}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "blockchain.broadcast.error";
                        readonly type: "string";
                        readonly examples: readonly ["blockchain.broadcast.error"];
                    };
                    readonly message: {
                        readonly description: "Unable to broadcast transaction, wrong input data.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to broadcast transaction, wrong input data."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.unexpected.state";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.unexpected.state"];
                    };
                    readonly message: {
                        readonly description: "Unable to complete withdrawal, which is not in InProgress state.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to complete withdrawal, which is not in InProgress state."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const BscDeployBep20: {
    readonly body: {
        readonly oneOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly symbol: {
                    readonly description: "The name of the token; used as an identifier within the Tatum platform and as a currency symbol on the blockchain";
                    readonly maxLength: 30;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                };
                readonly supply: {
                    readonly description: "The supply of the token";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["10000000"];
                };
                readonly description: {
                    readonly description: "The description of the token; used as a description within the Tatum platform and as a currency name on the blockchain";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["My Public Token"];
                };
                readonly address: {
                    readonly description: "The blockchain address to be assigned to the virtual account as a deposit address";
                    readonly maxLength: 42;
                    readonly minLength: 42;
                    readonly type: "string";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly mnemonic: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "The mnemonic to generate the private key for the blockchain address from which the fee for deploying the smart contract will be deducted; is used together with the derivation index of this address";
                    readonly type: "string";
                    readonly examples: readonly ["urge pulp usage sister evidence arrest palm math please chief egg abuse"];
                };
                readonly index: {
                    readonly description: "The derivation index of the blockchain address from which the fee for deploying the smart contract will be deducted; is used together with the mnemonic to generate the private key for this address";
                    readonly type: "integer";
                    readonly maximum: 2147483647;
                    readonly examples: readonly [0];
                };
                readonly basePair: {
                    readonly description: "The base pair for the virtual currency that represents the token; used to calculate the value of a transaction";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["EUR"];
                };
                readonly baseRate: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly minimum: 0;
                    readonly description: "The exchange rate for the base pair; one unit of the created virtual currency equals 1 unit of <code>basePair</code>*<code>baseRate</code>";
                    readonly examples: readonly [1];
                };
                readonly nonce: {
                    readonly type: "number";
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                    readonly minimum: 0;
                };
                readonly customer: {
                    readonly properties: {
                        readonly externalId: {
                            readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123654"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                            readonly default: "EUR";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly customerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                        readonly providerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                    };
                    readonly required: readonly ["externalId"];
                    readonly type: "object";
                    readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                };
            };
            readonly required: readonly ["description", "supply", "symbol", "basePair", "address", "mnemonic", "index"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly symbol: {
                    readonly description: "The name of the token; used as an identifier within the Tatum platform and as a currency symbol on the blockchain";
                    readonly maxLength: 30;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                };
                readonly supply: {
                    readonly description: "The supply of the token";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["10000000"];
                };
                readonly description: {
                    readonly description: "The description of the token; used as a description within the Tatum platform and as a currency name on the blockchain";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["My Public Token"];
                };
                readonly xpub: {
                    readonly description: "The extended public key from which a deposit address for the virtual account will be generated";
                    readonly maxLength: 150;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["xpub6EsCk1uU6cJzqvP9CdsTiJwT2rF748YkPnhv5Qo8q44DG7nn2vbyt48YRsNSUYS44jFCW9gwvD9kLQu9AuqXpTpM1c5hgg9PsuBLdeNncid"];
                };
                readonly derivationIndex: {
                    readonly description: "The derivation index to use together with the extended public key to generate the deposit address";
                    readonly format: "int32";
                    readonly type: "integer";
                    readonly maximum: 2147483647;
                    readonly examples: readonly [0];
                    readonly minimum: -2147483648;
                };
                readonly mnemonic: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "The mnemonic to generate the private key for the blockchain address from which the fee for deploying the smart contract will be deducted; is used together with the derivation index of this address";
                    readonly type: "string";
                    readonly examples: readonly ["urge pulp usage sister evidence arrest palm math please chief egg abuse"];
                };
                readonly index: {
                    readonly description: "The derivation index of the blockchain address from which the fee for deploying the smart contract will be deducted; is used together with the mnemonic to generate the private key for this address";
                    readonly type: "integer";
                    readonly maximum: 2147483647;
                    readonly examples: readonly [0];
                };
                readonly basePair: {
                    readonly description: "The base pair for the virtual currency that represents the token; used to calculate the value of a transaction";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["EUR"];
                };
                readonly baseRate: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly minimum: 0;
                    readonly description: "The exchange rate for the base pair; one unit of the created virtual currency equals 1 unit of <code>basePair</code>*<code>baseRate</code>";
                    readonly examples: readonly [1];
                };
                readonly nonce: {
                    readonly type: "number";
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                    readonly minimum: 0;
                };
                readonly customer: {
                    readonly properties: {
                        readonly externalId: {
                            readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123654"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                            readonly default: "EUR";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly customerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                        readonly providerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                    };
                    readonly required: readonly ["externalId"];
                    readonly type: "object";
                    readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                };
            };
            readonly required: readonly ["description", "supply", "symbol", "basePair", "xpub", "derivationIndex", "mnemonic", "index"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly symbol: {
                    readonly description: "The name of the token; used as an identifier within the Tatum platform and as a currency symbol on the blockchain";
                    readonly maxLength: 30;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                };
                readonly supply: {
                    readonly description: "The supply of the token";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["10000000"];
                };
                readonly description: {
                    readonly description: "The description of the token; used as a description within the Tatum platform and as a currency name on the blockchain";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["My Public Token"];
                };
                readonly address: {
                    readonly description: "The blockchain address to be assigned to the virtual account as a deposit address";
                    readonly maxLength: 42;
                    readonly minLength: 42;
                    readonly type: "string";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly privateKey: {
                    readonly description: "The private key of the blockchain address from which the fee for deploying the smart contract will be deducted";
                    readonly type: "string";
                    readonly maxLength: 66;
                    readonly minLength: 66;
                    readonly examples: readonly ["0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2"];
                };
                readonly basePair: {
                    readonly description: "The base pair for the virtual currency that represents the token; used to calculate the value of a transaction";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["EUR"];
                };
                readonly baseRate: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly minimum: 0;
                    readonly description: "The exchange rate for the base pair; one unit of the created virtual currency equals 1 unit of <code>basePair</code>*<code>baseRate</code>";
                    readonly examples: readonly [1];
                };
                readonly nonce: {
                    readonly type: "number";
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                    readonly minimum: 0;
                };
                readonly customer: {
                    readonly properties: {
                        readonly externalId: {
                            readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123654"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                            readonly default: "EUR";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly customerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                        readonly providerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                    };
                    readonly required: readonly ["externalId"];
                    readonly type: "object";
                    readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                };
            };
            readonly required: readonly ["description", "supply", "symbol", "basePair", "privateKey", "address"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly symbol: {
                    readonly description: "The name of the token; used as an identifier within the Tatum platform and as a currency symbol on the blockchain";
                    readonly maxLength: 30;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                };
                readonly supply: {
                    readonly description: "The supply of the token";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["10000000"];
                };
                readonly description: {
                    readonly description: "The description of the token; used as a description within the Tatum platform and as a currency name on the blockchain";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["My Public Token"];
                };
                readonly xpub: {
                    readonly description: "The extended public key from which a deposit address for the virtual account will be generated";
                    readonly maxLength: 150;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["xpub6EsCk1uU6cJzqvP9CdsTiJwT2rF748YkPnhv5Qo8q44DG7nn2vbyt48YRsNSUYS44jFCW9gwvD9kLQu9AuqXpTpM1c5hgg9PsuBLdeNncid"];
                };
                readonly derivationIndex: {
                    readonly description: "The derivation index to use together with the extended public key to generate the deposit address";
                    readonly format: "int32";
                    readonly type: "integer";
                    readonly maximum: 2147483647;
                    readonly examples: readonly [0];
                    readonly minimum: -2147483648;
                };
                readonly privateKey: {
                    readonly description: "The private key of the blockchain address from which the fee for deploying the smart contract will be deducted";
                    readonly type: "string";
                    readonly maxLength: 66;
                    readonly minLength: 66;
                    readonly examples: readonly ["0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2"];
                };
                readonly basePair: {
                    readonly description: "The base pair for the virtual currency that represents the token; used to calculate the value of a transaction";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["EUR"];
                };
                readonly baseRate: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly minimum: 0;
                    readonly description: "The exchange rate for the base pair; one unit of the created virtual currency equals 1 unit of <code>basePair</code>*<code>baseRate</code>";
                    readonly examples: readonly [1];
                };
                readonly nonce: {
                    readonly type: "number";
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                    readonly minimum: 0;
                };
                readonly customer: {
                    readonly properties: {
                        readonly externalId: {
                            readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123654"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                            readonly default: "EUR";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly customerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                        readonly providerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                    };
                    readonly required: readonly ["externalId"];
                    readonly type: "object";
                    readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                };
            };
            readonly required: readonly ["description", "supply", "symbol", "basePair", "xpub", "derivationIndex", "privateKey"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly symbol: {
                    readonly description: "The name of the token; used as an identifier within the Tatum platform and as a currency symbol on the blockchain";
                    readonly maxLength: 30;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                };
                readonly supply: {
                    readonly description: "The supply of the token";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["10000000"];
                };
                readonly description: {
                    readonly description: "The description of the token; used as a description within the Tatum platform and as a currency name on the blockchain";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["My Public Token"];
                };
                readonly address: {
                    readonly description: "The blockchain address to be assigned to the virtual account as a deposit address";
                    readonly maxLength: 42;
                    readonly minLength: 42;
                    readonly type: "string";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly signatureId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly description: "The KMS identifier of either the <b>private key</b> of the blockchain address from which the fee for deploying the smart contract will be deducted, or the <b>mnemonic</b> to generate the private key for the blockchain address from which the fee will be deducted";
                    readonly examples: readonly ["26d3883e-4e17-48b3-a0ee-09a3e484ac83"];
                };
                readonly index: {
                    readonly type: "number";
                    readonly minimum: 0;
                    readonly description: "(Only if the signature ID is mnemonic-based) The index of the address from which the fee will be deducted that was generated from the mnemonic";
                };
                readonly basePair: {
                    readonly description: "The base pair for the virtual currency that represents the token; used to calculate the value of a transaction";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["EUR"];
                };
                readonly baseRate: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly minimum: 0;
                    readonly description: "The exchange rate for the base pair; one unit of the created virtual currency equals 1 unit of <code>basePair</code>*<code>baseRate</code>";
                    readonly examples: readonly [1];
                };
                readonly nonce: {
                    readonly type: "number";
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                    readonly minimum: 0;
                };
                readonly customer: {
                    readonly properties: {
                        readonly externalId: {
                            readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123654"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                            readonly default: "EUR";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly customerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                        readonly providerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                    };
                    readonly required: readonly ["externalId"];
                    readonly type: "object";
                    readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                };
            };
            readonly required: readonly ["description", "supply", "symbol", "basePair", "address", "signatureId"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly symbol: {
                    readonly description: "The name of the token; used as an identifier within the Tatum platform and as a currency symbol on the blockchain";
                    readonly maxLength: 30;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                };
                readonly supply: {
                    readonly description: "The supply of the token";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["10000000"];
                };
                readonly description: {
                    readonly description: "The description of the token; used as a description within the Tatum platform and as a currency name on the blockchain";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["My Public Token"];
                };
                readonly xpub: {
                    readonly description: "The extended public key from which a deposit address for the virtual account will be generated";
                    readonly maxLength: 150;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["xpub6EsCk1uU6cJzqvP9CdsTiJwT2rF748YkPnhv5Qo8q44DG7nn2vbyt48YRsNSUYS44jFCW9gwvD9kLQu9AuqXpTpM1c5hgg9PsuBLdeNncid"];
                };
                readonly derivationIndex: {
                    readonly description: "The derivation index to use together with the extended public key to generate the deposit address";
                    readonly format: "int32";
                    readonly type: "integer";
                    readonly maximum: 2147483647;
                    readonly examples: readonly [0];
                    readonly minimum: -2147483648;
                };
                readonly signatureId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly description: "The KMS identifier of either the <b>private key</b> of the blockchain address from which the fee for deploying the smart contract will be deducted, or the <b>mnemonic</b> to generate the private key for the blockchain address from which the fee will be deducted";
                    readonly examples: readonly ["26d3883e-4e17-48b3-a0ee-09a3e484ac83"];
                };
                readonly index: {
                    readonly type: "number";
                    readonly minimum: 0;
                    readonly description: "(Only if the signature ID is mnemonic-based) The index of the address from which the fee will be deducted that was generated from the mnemonic";
                };
                readonly basePair: {
                    readonly description: "The base pair for the virtual currency that represents the token; used to calculate the value of a transaction";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["EUR"];
                };
                readonly baseRate: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly minimum: 0;
                    readonly description: "The exchange rate for the base pair; one unit of the created virtual currency equals 1 unit of <code>basePair</code>*<code>baseRate</code>";
                    readonly examples: readonly [1];
                };
                readonly nonce: {
                    readonly type: "number";
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                    readonly minimum: 0;
                };
                readonly customer: {
                    readonly properties: {
                        readonly externalId: {
                            readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123654"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                            readonly default: "EUR";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly customerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                        readonly providerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                    };
                    readonly required: readonly ["externalId"];
                    readonly type: "object";
                    readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                };
            };
            readonly required: readonly ["description", "supply", "symbol", "basePair", "xpub", "derivationIndex", "signatureId"];
        }];
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly accountId: {
                        readonly description: "Account ID with the type of currency as created ERC20/BEP20 token symbol. Account will be unfrozen when ERC20/BEP20 contract address will be set.";
                        readonly type: "string";
                        readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    };
                    readonly txId: {
                        readonly description: "TX hash of successful transaction. From this transaction receipt contract address can be obtained.";
                        readonly type: "string";
                        readonly examples: readonly ["c83f8818db43d9ba4accfe454aa44fc33123d47a4f89d47b314d6748eb0e9bc9"];
                    };
                };
                readonly type: "object";
                readonly required: readonly ["accountId", "txId"];
            }, {
                readonly properties: {
                    readonly accountId: {
                        readonly description: "Account ID with the type of currency as created ERC20/BEP20 token symbol. Account will be unfrozen when ERC20/BEP20 contract address will be set.";
                        readonly type: "string";
                        readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    };
                    readonly signatureId: {
                        readonly description: "ID of prepared payment template to sign. This is should be stored on a client side to retrieve ID of the blockchain transaction, when signing application signs the transaction and broadcasts it to the blockchain.";
                        readonly format: "uuid";
                        readonly type: "string";
                        readonly examples: readonly ["1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6"];
                    };
                };
                readonly type: "object";
                readonly required: readonly ["accountId", "signatureId"];
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.symbol.prefix";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.symbol.prefix"];
                    };
                    readonly message: {
                        readonly description: "ERC20 token cannot start with VC_.";
                        readonly type: "string";
                        readonly examples: readonly ["ERC20 token cannot start with VC_."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.address.xpub.both";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.address.xpub.both"];
                    };
                    readonly message: {
                        readonly description: "Either xpub or address must be present, not both.";
                        readonly type: "string";
                        readonly examples: readonly ["Either xpub or address must be present, not both."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.address.xpub.missing";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.address.xpub.missing"];
                    };
                    readonly message: {
                        readonly description: "Either xpub or address must be present.";
                        readonly type: "string";
                        readonly examples: readonly ["Either xpub or address must be present."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.duplicate.name";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.duplicate.name"];
                    };
                    readonly message: {
                        readonly description: "ERC20 token with given name already exists.";
                        readonly type: "string";
                        readonly examples: readonly ["ERC20 token with given name already exists."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "customer.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["customer.not.active"];
                    };
                    readonly message: {
                        readonly description: "Customer not active.";
                        readonly type: "string";
                        readonly examples: readonly ["Customer not active."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "virtual.creation.error";
                        readonly type: "string";
                        readonly examples: readonly ["virtual.creation.error"];
                    };
                    readonly message: {
                        readonly description: "It is not possible to create virtual currency.";
                        readonly type: "string";
                        readonly examples: readonly ["It is not possible to create virtual currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["account.not.exists"];
                    };
                    readonly message: {
                        readonly description: "No such account.";
                        readonly type: "string";
                        readonly examples: readonly ["No such account."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.missing";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.missing"];
                    };
                    readonly message: {
                        readonly description: "No xpub assigned to account, it is not possible to generate address. Use assignAddress method instead.";
                        readonly type: "string";
                        readonly examples: readonly ["No xpub assigned to account, it is not possible to generate address. Use assignAddress method instead."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "xpub.used";
                        readonly type: "string";
                        readonly examples: readonly ["xpub.used"];
                    };
                    readonly message: {
                        readonly description: "XPub already used registered within Tatum";
                        readonly type: "string";
                        readonly examples: readonly ["XPub already used registered within Tatum"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "Address.index.used";
                        readonly type: "string";
                        readonly examples: readonly ["address.index.used"];
                    };
                    readonly message: {
                        readonly description: "Unable to create address, derivation index is already used.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to create address, derivation index is already used."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "offchain.not.supported";
                        readonly type: "string";
                        readonly examples: readonly ["offchain.not.supported"];
                    };
                    readonly message: {
                        readonly description: "Offchain not supported for account with ${account.currency} currency.";
                        readonly type: "string";
                        readonly examples: readonly ["Offchain not supported for account with ${account.currency} currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.incompatible";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.incompatible"];
                    };
                    readonly message: {
                        readonly description: "Xpub not compatible with account currency.";
                        readonly type: "string";
                        readonly examples: readonly ["Xpub not compatible with account currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.present";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.present"];
                    };
                    readonly message: {
                        readonly description: "Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead.";
                        readonly type: "string";
                        readonly examples: readonly ["Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                    readonly required: {
                        readonly "0": "errorCode";
                        readonly "1": "message";
                        readonly "2": "statusCode";
                    };
                    readonly type: "object";
                };
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "vc.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["vc.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such virtual currency.";
                        readonly type: "string";
                        readonly examples: readonly ["No such virtual currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "Address.used";
                        readonly type: "string";
                        readonly examples: readonly ["address.used"];
                    };
                    readonly message: {
                        readonly description: "Address and currency already in use.";
                        readonly type: "string";
                        readonly examples: readonly ["Address and currency already in use."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.present";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.present"];
                    };
                    readonly message: {
                        readonly description: "Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead.";
                        readonly type: "string";
                        readonly examples: readonly ["Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                    readonly required: {
                        readonly "0": "errorCode";
                        readonly "1": "message";
                        readonly "2": "statusCode";
                    };
                    readonly type: "object";
                };
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.erc20.unsupported";
                        readonly type: "string";
                        readonly examples: readonly ["eth.erc20.unsupported"];
                    };
                    readonly message: {
                        readonly description: "Unsupported ETH ERC20 blockchain.";
                        readonly type: "string";
                        readonly examples: readonly ["Unsupported ETH ERC20 blockchain."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "ethereum.broadcast.failed";
                        readonly type: "string";
                        readonly examples: readonly ["ethereum.broadcast.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to broadcast transaction due to ${error}.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to broadcast transaction due to ${error}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "gas.price.failed";
                        readonly type: "string";
                        readonly examples: readonly ["gas.price.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to obtain current GAS price.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to obtain current GAS price."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "ethereum.transaction.body";
                        readonly type: "string";
                        readonly examples: readonly ["ethereum.transaction.body"];
                    };
                    readonly message: {
                        readonly description: "Either currency, or tokenAddress must be defined.";
                        readonly type: "string";
                        readonly examples: readonly ["Either currency, or tokenAddress must be defined."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.transaction.gas";
                        readonly type: "string";
                        readonly examples: readonly ["eth.transaction.gas"];
                    };
                    readonly message: {
                        readonly description: "Unable to calculate gas limit for transaction. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to calculate gas limit for transaction. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.transaction.hash";
                        readonly type: "string";
                        readonly examples: readonly ["eth.transaction.hash"];
                    };
                    readonly message: {
                        readonly description: "Unable to calculate transaction hash. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to calculate transaction hash. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.transaction.sign";
                        readonly type: "string";
                        readonly examples: readonly ["eth.transaction.sign"];
                    };
                    readonly message: {
                        readonly description: "Unable to sign transaction. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to sign transaction. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const BscOrBepTransfer: {
    readonly body: {
        readonly oneOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly nonce: {
                    readonly type: "number";
                    readonly minimum: 0;
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                };
                readonly address: {
                    readonly description: "Blockchain address to send assets";
                    readonly maxLength: 42;
                    readonly minLength: 42;
                    readonly type: "string";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly amount: {
                    readonly description: "Amount to be sent.";
                    readonly maxLength: 38;
                    readonly type: "string";
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly examples: readonly ["100000"];
                };
                readonly compliant: {
                    readonly description: "Compliance check, if withdrawal is not compliant, it will not be processed.";
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                };
                readonly privateKey: {
                    readonly type: "string";
                    readonly maxLength: 66;
                    readonly minLength: 66;
                    readonly description: "Private key of sender address. Either mnemonic and index, privateKey or signature Id must be present - depends on the type of account and xpub.";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly paymentId: {
                    readonly description: "Identifier of the payment, shown for created Transaction within Tatum sender account.";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["1234"];
                };
                readonly senderAccountId: {
                    readonly maxLength: 24;
                    readonly minLength: 24;
                    readonly description: "Sender account ID";
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly senderNote: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "Note visible to owner of withdrawing account";
                    readonly type: "string";
                    readonly examples: readonly ["Sender note"];
                };
                readonly gasLimit: {
                    readonly type: "string";
                    readonly description: "Gas limit for transaction in gas price. If not set, automatic calculation will be used.";
                    readonly pattern: "^[+]?\\d+$";
                    readonly examples: readonly ["40000"];
                };
                readonly gasPrice: {
                    readonly type: "string";
                    readonly description: "Gas price in Gwei. If not set, automatic calculation will be used.";
                    readonly pattern: "^[+]?\\d+$";
                    readonly examples: readonly ["20"];
                };
            };
            readonly required: readonly ["senderAccountId", "address", "amount", "privateKey"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly nonce: {
                    readonly type: "number";
                    readonly minimum: 0;
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                };
                readonly address: {
                    readonly description: "Blockchain address to send assets";
                    readonly maxLength: 42;
                    readonly minLength: 42;
                    readonly type: "string";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly amount: {
                    readonly description: "Amount to be sent.";
                    readonly maxLength: 38;
                    readonly type: "string";
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly examples: readonly ["100000"];
                };
                readonly compliant: {
                    readonly description: "Compliance check, if withdrawal is not compliant, it will not be processed.";
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                };
                readonly index: {
                    readonly description: "Derivation index of sender address.";
                    readonly maximum: 2147483647;
                    readonly type: "integer";
                    readonly examples: readonly [0];
                };
                readonly gasLimit: {
                    readonly type: "string";
                    readonly description: "Gas limit for transaction in gas price. If not set, automatic calculation will be used.";
                    readonly pattern: "^[+]?\\d+$";
                    readonly examples: readonly ["40000"];
                };
                readonly gasPrice: {
                    readonly type: "string";
                    readonly description: "Gas price in Gwei. If not set, automatic calculation will be used.";
                    readonly pattern: "^[+]?\\d+$";
                    readonly examples: readonly ["20"];
                };
                readonly mnemonic: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "Mnemonic to generate private key for sender address. Either mnemonic and index, privateKey or signature Id must be present - depends on the type of account and xpub.";
                    readonly type: "string";
                    readonly examples: readonly ["urge pulp usage sister evidence arrest palm math please chief egg abuse"];
                };
                readonly paymentId: {
                    readonly description: "Identifier of the payment, shown for created Transaction within Tatum sender account.";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["1234"];
                };
                readonly senderAccountId: {
                    readonly maxLength: 24;
                    readonly minLength: 24;
                    readonly description: "Sender account ID";
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly senderNote: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "Note visible to owner of withdrawing account";
                    readonly type: "string";
                    readonly examples: readonly ["Sender note"];
                };
            };
            readonly required: readonly ["senderAccountId", "address", "amount", "mnemonic", "index"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly nonce: {
                    readonly type: "number";
                    readonly minimum: 0;
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                };
                readonly address: {
                    readonly description: "Blockchain address to send assets";
                    readonly maxLength: 42;
                    readonly minLength: 42;
                    readonly type: "string";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly amount: {
                    readonly description: "Amount to be sent.";
                    readonly maxLength: 38;
                    readonly type: "string";
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly examples: readonly ["100000"];
                };
                readonly compliant: {
                    readonly description: "Compliance check, if withdrawal is not compliant, it will not be processed.";
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                };
                readonly signatureId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly description: "Identifier of the mnemonic / private key associated in signing application.\nWhen hash identifies mnemonic, index must be present to represent specific account to pay from.\nPrivate key, mnemonic or signature Id must be present.\n";
                    readonly examples: readonly ["26d3883e-4e17-48b3-a0ee-09a3e484ac83"];
                };
                readonly index: {
                    readonly description: "Derivation index of sender address.";
                    readonly maximum: 2147483647;
                    readonly type: "integer";
                    readonly examples: readonly [0];
                };
                readonly paymentId: {
                    readonly description: "Identifier of the payment, shown for created Transaction within Tatum sender account.";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["1234"];
                };
                readonly senderAccountId: {
                    readonly maxLength: 24;
                    readonly minLength: 24;
                    readonly description: "Sender account ID";
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly senderNote: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "Note visible to owner of withdrawing account";
                    readonly type: "string";
                    readonly examples: readonly ["Sender note"];
                };
                readonly gasLimit: {
                    readonly type: "string";
                    readonly description: "Gas limit for transaction in gas price. If not set, automatic calculation will be used.";
                    readonly pattern: "^[+]?\\d+$";
                    readonly examples: readonly ["40000"];
                };
                readonly gasPrice: {
                    readonly type: "string";
                    readonly description: "Gas price in Gwei. If not set, automatic calculation will be used.";
                    readonly pattern: "^[+]?\\d+$";
                    readonly examples: readonly ["20"];
                };
            };
            readonly required: readonly ["senderAccountId", "address", "signatureId", "amount"];
        }];
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly oneOf: readonly [{
                readonly type: "object";
                readonly properties: {
                    readonly id: {
                        readonly description: "ID of withdrawal. If transaction is not valid in blockchain, use this id to cancel withdrawal.";
                        readonly type: "string";
                        readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    };
                    readonly txId: {
                        readonly description: "TX hash of successful transaction.";
                        readonly type: "string";
                        readonly examples: readonly ["c83f8818db43d9ba4accfe454aa44fc33123d47a4f89d47b314d6748eb0e9bc9"];
                    };
                    readonly completed: {
                        readonly description: "If set to \"true\", the withdrawal has been completed in the virtual account; if set to \"false\", the withdrawal has not been completed and you have to <a href=\"https://apidoc.tatum.io/tag/Withdrawal#operation/completeWithdrawal\" target=\"_blank\">complete it manually</a>";
                        readonly type: "boolean";
                        readonly examples: readonly [true];
                    };
                };
                readonly required: readonly ["txId", "id", "completed"];
            }, {
                readonly type: "object";
                readonly properties: {
                    readonly signatureId: {
                        readonly description: "ID of prepared payment template to sign. This is should be stored on a client side to retrieve ID of the blockchain transaction, when signing application signs the transaction and broadcasts it to the blockchain.";
                        readonly format: "uuid";
                        readonly type: "string";
                        readonly examples: readonly ["1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6"];
                    };
                };
                readonly required: readonly ["id", "signatureId"];
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.missing";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.missing"];
                    };
                    readonly message: {
                        readonly description: "No such withdrawal.";
                        readonly type: "string";
                        readonly examples: readonly ["No such withdrawal."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "rate.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["rate.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such currency rate.";
                        readonly type: "string";
                        readonly examples: readonly ["No such currency rate."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "vc.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["vc.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such virtual currency.";
                        readonly type: "string";
                        readonly examples: readonly ["No such virtual currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.recipient.format";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.recipient.format"];
                    };
                    readonly message: {
                        readonly description: "Recipient blockchain address has incorrect format.";
                        readonly type: "string";
                        readonly examples: readonly ["Recipient blockchain address has incorrect format."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.failed.transaction.failed";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.failed.transaction.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to store withdrawal, it is impossible to create transaction.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to store withdrawal, it is impossible to create transaction."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.account.virtual";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.account.virtual"];
                    };
                    readonly message: {
                        readonly description: "Sender account cannot be virtual.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender account cannot be virtual."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "offchain.not.supported";
                        readonly type: "string";
                        readonly examples: readonly ["offchain.not.supported"];
                    };
                    readonly message: {
                        readonly description: "Offchain not supported for account with ${account.currency} currency.";
                        readonly type: "string";
                        readonly examples: readonly ["Offchain not supported for account with ${account.currency} currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "amount.format";
                        readonly type: "string";
                        readonly examples: readonly ["amount.format"];
                    };
                    readonly message: {
                        readonly description: "Amount has incorrect format.";
                        readonly type: "string";
                        readonly examples: readonly ["Amount has incorrect format."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "fee.format";
                        readonly type: "string";
                        readonly examples: readonly ["fee.format"];
                    };
                    readonly message: {
                        readonly description: "Fee has incorrect format.";
                        readonly type: "string";
                        readonly examples: readonly ["Fee has incorrect format."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.not.cancelled.transaction.failed";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.not.cancelled.transaction.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to broadcast transaction, and impossible to cancel withdrawal. ID is attached, \"${withdrawalId}\", cancel it manually.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to broadcast transaction, and impossible to cancel withdrawal. ID is attached, \"${withdrawalId}\", cancel it manually."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.prepare.failed";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.prepare.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to prepare transaction, withdrawal cancelled.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to prepare transaction, withdrawal cancelled."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.not.exists"];
                    };
                    readonly message: {
                        readonly description: "Unable to find sender account ${transaction.senderAccountId}.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find sender account ${transaction.senderAccountId}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.customer.disabled";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.customer.disabled"];
                    };
                    readonly message: {
                        readonly description: "Sender accounts customer ${senderAccount.customerId} is disabled, unable to perform payment.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender accounts customer ${senderAccount.customerId} is disabled, unable to perform payment."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "balance.insufficient";
                        readonly type: "string";
                        readonly examples: readonly ["balance.insufficient"];
                    };
                    readonly message: {
                        readonly description: "Insufficient balance for account ${transaction.senderAccountId} and payment amount ${transaction.amount}. Sender balance is ${senderAccount.balance.availableBalance as string}, amount is ${amount}";
                        readonly type: "string";
                        readonly examples: readonly ["Insufficient balance for account ${transaction.senderAccountId} and payment amount ${transaction.amount}. Sender balance is ${senderAccount.balance.availableBalance as string}, amount is ${amount}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "amount.btc";
                        readonly type: "string";
                        readonly examples: readonly ["amount.btc"];
                    };
                    readonly message: {
                        readonly description: "BTC|LTC|BCH|DOGE payment amount must be at least 0.00000001, not ${transaction.amount}.";
                        readonly type: "string";
                        readonly examples: readonly ["BTC|LTC|BCH|DOGE payment amount must be at least 0.00000001, not ${transaction.amount}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "amount.eth";
                        readonly type: "string";
                        readonly examples: readonly ["amount.eth"];
                    };
                    readonly message: {
                        readonly description: "ETH payment amount must be at least 0.000000000001, not ${transaction.amount}.";
                        readonly type: "string";
                        readonly examples: readonly ["ETH payment amount must be at least 0.000000000001, not ${transaction.amount}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.frozen";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.frozen"];
                    };
                    readonly message: {
                        readonly description: "Sender account ${transaction.senderAccountId} is frozen, unable to perform payment.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender account ${transaction.senderAccountId} is frozen, unable to perform payment."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.pending";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.pending"];
                    };
                    readonly message: {
                        readonly description: "Unable to prepare withdrawal, last withdrawal with id ${id} is not yet processed by blockchain.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to prepare withdrawal, last withdrawal with id ${id} is not yet processed by blockchain."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "private.mnemonic.missing";
                        readonly type: "string";
                        readonly examples: readonly ["private.mnemonic.missing"];
                    };
                    readonly message: {
                        readonly description: "Either mnemonic and index or private key must be present.";
                        readonly type: "string";
                        readonly examples: readonly ["Either mnemonic and index or private key must be present."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.erc20.unsupported";
                        readonly type: "string";
                        readonly examples: readonly ["eth.erc20.unsupported"];
                    };
                    readonly message: {
                        readonly description: "Unsupported ETH ERC20 blockchain.";
                        readonly type: "string";
                        readonly examples: readonly ["Unsupported ETH ERC20 blockchain."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "ethereum.broadcast.failed";
                        readonly type: "string";
                        readonly examples: readonly ["ethereum.broadcast.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to broadcast transaction due to ${error}.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to broadcast transaction due to ${error}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "gas.price.failed";
                        readonly type: "string";
                        readonly examples: readonly ["gas.price.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to obtain current GAS price.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to obtain current GAS price."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "ethereum.transaction.body";
                        readonly type: "string";
                        readonly examples: readonly ["ethereum.transaction.body"];
                    };
                    readonly message: {
                        readonly description: "Either currency, or tokenAddress must be defined.";
                        readonly type: "string";
                        readonly examples: readonly ["Either currency, or tokenAddress must be defined."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.transaction.gas";
                        readonly type: "string";
                        readonly examples: readonly ["eth.transaction.gas"];
                    };
                    readonly message: {
                        readonly description: "Unable to calculate gas limit for transaction. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to calculate gas limit for transaction. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.transaction.hash";
                        readonly type: "string";
                        readonly examples: readonly ["eth.transaction.hash"];
                    };
                    readonly message: {
                        readonly description: "Unable to calculate transaction hash. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to calculate transaction hash. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.transaction.sign";
                        readonly type: "string";
                        readonly examples: readonly ["eth.transaction.sign"];
                    };
                    readonly message: {
                        readonly description: "Unable to sign transaction. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to sign transaction. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const BtcTransfer: {
    readonly body: {
        readonly oneOf: readonly [{
            readonly properties: {
                readonly senderAccountId: {
                    readonly description: "Sender account ID";
                    readonly maxLength: 24;
                    readonly minLength: 24;
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly address: {
                    readonly description: "Blockchain address to send assets to. For BTC, LTC, DOGE and BCH, it is possible to enter list of multiple recipient blockchain addresses as a comma separated string.";
                    readonly maxLength: 10000;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["mpTwPdF8up9kidgcAStriUPwRdnE9MRAg7"];
                };
                readonly amount: {
                    readonly description: "Amount to be withdrawn to blockchain.";
                    readonly maxLength: 38;
                    readonly type: "string";
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly examples: readonly ["0.001"];
                };
                readonly compliant: {
                    readonly description: "Compliance check, if withdrawal is not compliant, it will not be processed.";
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                };
                readonly fee: {
                    readonly description: "Fee to be submitted as a transaction fee to blockchain. If none is set, default value of 0.0005 BTC is used. Minimum fee is 0.00001 BTC.";
                    readonly type: "string";
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly examples: readonly ["0.0005"];
                };
                readonly multipleAmounts: {
                    readonly description: "For BTC, LTC, DOGE and BCH, it is possible to enter list of multiple recipient blockchain amounts. List of recipient addresses must be present in the address field and total sum of amounts must be equal to the amount field.";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                        readonly examples: readonly ["0.1"];
                    };
                };
                readonly mnemonic: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "Mnemonic seed - usually 12-24 words with access to whole wallet.\nEither mnemonic, keyPair or signature Id must be present - depends on the type of account and xpub.\nTatum KMS does not support keyPair type of off-chain transaction, only mnemonic based.\n";
                    readonly type: "string";
                    readonly examples: readonly ["urge pulp usage sister evidence arrest palm math please chief egg abuse"];
                };
                readonly xpub: {
                    readonly description: "Extended public key (xpub) of the wallet associated with the accounts and used mnemonic. Should be present, when mnemonic is used.";
                    readonly maxLength: 150;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["xpub6EsCk1uU6cJzqvP9CdsTiJwT2rF748YkPnhv5Qo8q44DG7nn2vbyt48YRsNSUYS44jFCW9gwvD9kLQu9AuqXpTpM1c5hgg9PsuBLdeNncid"];
                };
                readonly paymentId: {
                    readonly description: "Identifier of the payment, shown for created Transaction within Tatum sender account.";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["1234"];
                };
                readonly senderNote: {
                    readonly description: "Note visible to owner of withdrawing account";
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["Sender note"];
                };
            };
            readonly required: readonly ["amount", "senderAccountId", "address", "mnemonic", "xpub"];
            readonly type: "object";
        }, {
            readonly properties: {
                readonly senderAccountId: {
                    readonly description: "Sender account ID";
                    readonly maxLength: 24;
                    readonly minLength: 24;
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly address: {
                    readonly description: "Blockchain address to send assets to. For BTC, LTC, DOGE and BCH, it is possible to enter list of multiple recipient blockchain addresses as a comma separated string.";
                    readonly maxLength: 10000;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["mpTwPdF8up9kidgcAStriUPwRdnE9MRAg7"];
                };
                readonly amount: {
                    readonly description: "Amount to be withdrawn to blockchain.";
                    readonly maxLength: 38;
                    readonly type: "string";
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly examples: readonly ["0.001"];
                };
                readonly compliant: {
                    readonly description: "Compliance check, if withdrawal is not compliant, it will not be processed.";
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                };
                readonly fee: {
                    readonly description: "Fee to be submitted as a transaction fee to blockchain. If none is set, default value of 0.0005 BTC is used. Minimum fee is 0.00001 BTC.";
                    readonly type: "string";
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly examples: readonly ["0.0005"];
                };
                readonly multipleAmounts: {
                    readonly description: "For BTC, LTC, DOGE and BCH, it is possible to enter list of multiple recipient blockchain amounts. List of recipient addresses must be present in the address field and total sum of amounts must be equal to the amount field.";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                        readonly examples: readonly ["0.1"];
                    };
                };
                readonly keyPair: {
                    readonly description: "Array of assigned blockchain addresses with their private keys.\nEither mnemonic, keyPair or signature Id must be present - depends on the type of account and xpub.\nTatum KMS does not support keyPair type of off-chain transaction, only mnemonic based.\n";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly address: {
                                readonly type: "string";
                                readonly description: "Blockchain address assigned to account withdrawal is made from.";
                                readonly maxLength: 50;
                                readonly minLength: 30;
                            };
                            readonly privateKey: {
                                readonly type: "string";
                                readonly description: "Private key of blockchain address.";
                                readonly maxLength: 52;
                                readonly minLength: 52;
                                readonly examples: readonly ["cTmS2jBWXgFaXZ2xG9jhn67TiyTshnMp3UedamzEhGm6BZV1vLgQ"];
                            };
                        };
                    };
                };
                readonly attr: {
                    readonly description: "Used to parametrize withdrawal as a change address for left coins from transaction.";
                    readonly maxLength: 256;
                    readonly minLength: 1;
                    readonly type: "string";
                };
                readonly paymentId: {
                    readonly description: "Identifier of the payment, shown for created Transaction within Tatum sender account.";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["1234"];
                };
                readonly senderNote: {
                    readonly description: "Note visible to owner of withdrawing account";
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["Sender note"];
                };
            };
            readonly required: readonly ["amount", "senderAccountId", "address", "keyPair", "attr"];
            readonly type: "object";
        }, {
            readonly properties: {
                readonly senderAccountId: {
                    readonly description: "Sender account ID";
                    readonly maxLength: 24;
                    readonly minLength: 24;
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly address: {
                    readonly description: "Blockchain address to send assets to. For BTC, LTC, DOGE and BCH, it is possible to enter list of multiple recipient blockchain addresses as a comma separated string.";
                    readonly maxLength: 10000;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["mpTwPdF8up9kidgcAStriUPwRdnE9MRAg7"];
                };
                readonly amount: {
                    readonly description: "Amount to be withdrawn to blockchain.";
                    readonly maxLength: 38;
                    readonly type: "string";
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly examples: readonly ["0.001"];
                };
                readonly compliant: {
                    readonly description: "Compliance check, if withdrawal is not compliant, it will not be processed.";
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                };
                readonly fee: {
                    readonly description: "Fee to be submitted as a transaction fee to blockchain. If none is set, default value of 0.0005 BTC is used. Minimum fee is 0.00001 BTC.";
                    readonly type: "string";
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly examples: readonly ["0.0005"];
                };
                readonly multipleAmounts: {
                    readonly description: "For BTC, LTC, DOGE and BCH, it is possible to enter list of multiple recipient blockchain amounts. List of recipient addresses must be present in the address field and total sum of amounts must be equal to the amount field.";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                        readonly examples: readonly ["0.1"];
                    };
                };
                readonly signatureId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly description: "Signature hash of the mnemonic, which will be used to sign transactions locally.\nAll signature Ids should be present, which might be used to sign transaction.\nTatum KMS does not support keyPair type of off-chain transaction, only mnemonic based.\n";
                    readonly examples: readonly ["26d3883e-4e17-48b3-a0ee-09a3e484ac83"];
                };
                readonly xpub: {
                    readonly description: "Extended public key (xpub) of the wallet associated with the accounts. Should be present, when mnemonic is used.";
                    readonly maxLength: 150;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["xpub6EsCk1uU6cJzqvP9CdsTiJwT2rF748YkPnhv5Qo8q44DG7nn2vbyt48YRsNSUYS44jFCW9gwvD9kLQu9AuqXpTpM1c5hgg9PsuBLdeNncid"];
                };
                readonly paymentId: {
                    readonly description: "Identifier of the payment, shown for created Transaction within Tatum sender account.";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["1234"];
                };
                readonly senderNote: {
                    readonly description: "Note visible to owner of withdrawing account";
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["Sender note"];
                };
            };
            readonly required: readonly ["amount", "senderAccountId", "address", "signatureId", "xpub"];
            readonly type: "object";
        }];
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly oneOf: readonly [{
                readonly type: "object";
                readonly properties: {
                    readonly id: {
                        readonly description: "ID of withdrawal. If transaction is not valid in blockchain, use this id to cancel withdrawal.";
                        readonly type: "string";
                        readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    };
                    readonly txId: {
                        readonly description: "TX hash of successful transaction.";
                        readonly type: "string";
                        readonly examples: readonly ["c83f8818db43d9ba4accfe454aa44fc33123d47a4f89d47b314d6748eb0e9bc9"];
                    };
                    readonly completed: {
                        readonly description: "If set to \"true\", the withdrawal has been completed in the virtual account; if set to \"false\", the withdrawal has not been completed and you have to <a href=\"https://apidoc.tatum.io/tag/Withdrawal#operation/completeWithdrawal\" target=\"_blank\">complete it manually</a>";
                        readonly type: "boolean";
                        readonly examples: readonly [true];
                    };
                };
                readonly required: readonly ["txId", "id", "completed"];
            }, {
                readonly type: "object";
                readonly properties: {
                    readonly signatureId: {
                        readonly description: "ID of prepared payment template to sign. This is should be stored on a client side to retrieve ID of the blockchain transaction, when signing application signs the transaction and broadcasts it to the blockchain.";
                        readonly format: "uuid";
                        readonly type: "string";
                        readonly examples: readonly ["1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6"];
                    };
                };
                readonly required: readonly ["id", "signatureId"];
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "transaction.invalid.body";
                        readonly type: "string";
                        readonly examples: readonly ["transaction.invalid.body"];
                    };
                    readonly message: {
                        readonly description: "Either UTXO, or addresses must be present.";
                        readonly type: "string";
                        readonly examples: readonly ["Either UTXO, or addresses must be present."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.missing";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.missing"];
                    };
                    readonly message: {
                        readonly description: "No such withdrawal.";
                        readonly type: "string";
                        readonly examples: readonly ["No such withdrawal."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "rate.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["rate.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such currency rate.";
                        readonly type: "string";
                        readonly examples: readonly ["No such currency rate."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "vc.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["vc.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such virtual currency.";
                        readonly type: "string";
                        readonly examples: readonly ["No such virtual currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.failed.transaction.failed";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.failed.transaction.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to store withdrawal, it is impossible to create transaction.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to store withdrawal, it is impossible to create transaction."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "blockchain.error.code";
                        readonly type: "string";
                        readonly examples: readonly ["blockchain.error.code"];
                    };
                    readonly message: {
                        readonly description: "${error.message} Code: ${error.code}";
                        readonly type: "string";
                        readonly examples: readonly ["${error.message} Code: ${error.code}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "tx.hash.index.spent";
                        readonly type: "string";
                        readonly examples: readonly ["tx.hash.index.spent"];
                    };
                    readonly message: {
                        readonly description: "No such UTXO for transaction and index.";
                        readonly type: "string";
                        readonly examples: readonly ["No such UTXO for transaction and index."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "blockchain.broadcast.error";
                        readonly type: "string";
                        readonly examples: readonly ["blockchain.broadcast.error"];
                    };
                    readonly message: {
                        readonly description: "Unable to broadcast transaction, wrong input data.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to broadcast transaction, wrong input data."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "transaction.preparation.failed";
                        readonly type: "string";
                        readonly examples: readonly ["transaction.preparation.failed"];
                    };
                    readonly message: {
                        readonly description: "Impossible to prepare transaction. Either mnemonic or keyPair and attr must be present.";
                        readonly type: "string";
                        readonly examples: readonly ["Impossible to prepare transaction. Either mnemonic or keyPair and attr must be present."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.account.virtual";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.account.virtual"];
                    };
                    readonly message: {
                        readonly description: "Sender account cannot be virtual.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender account cannot be virtual."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "offchain.not.supported";
                        readonly type: "string";
                        readonly examples: readonly ["offchain.not.supported"];
                    };
                    readonly message: {
                        readonly description: "Offchain not supported for account with ${account.currency} currency.";
                        readonly type: "string";
                        readonly examples: readonly ["Offchain not supported for account with ${account.currency} currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "amount.format";
                        readonly type: "string";
                        readonly examples: readonly ["amount.format"];
                    };
                    readonly message: {
                        readonly description: "Amount has incorrect format.";
                        readonly type: "string";
                        readonly examples: readonly ["Amount has incorrect format."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "fee.format";
                        readonly type: "string";
                        readonly examples: readonly ["fee.format"];
                    };
                    readonly message: {
                        readonly description: "Fee has incorrect format.";
                        readonly type: "string";
                        readonly examples: readonly ["Fee has incorrect format."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "transaction.preparation.failed.utxo";
                        readonly type: "string";
                        readonly examples: readonly ["transaction.preparation.failed.utxo"];
                    };
                    readonly message: {
                        readonly description: "Impossible to find last UTXO.";
                        readonly type: "string";
                        readonly examples: readonly ["Impossible to find last UTXO."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "transaction.failed";
                        readonly type: "string";
                        readonly examples: readonly ["transaction.failed"];
                    };
                    readonly message: {
                        readonly description: "No spendable inputs.";
                        readonly type: "string";
                        readonly examples: readonly ["No spendable inputs."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "key.generation.failed.wrong.mnemonic";
                        readonly type: "string";
                        readonly examples: readonly ["key.generation.failed.wrong.mnemonic"];
                    };
                    readonly message: {
                        readonly description: "Unable to generate address, wrong mnemonic and index.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to generate address, wrong mnemonic and index."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.not.cancelled.transaction.failed";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.not.cancelled.transaction.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to broadcast transaction, and impossible to cancel withdrawal. ID is attached, \"${withdrawalId}\", cancel it manually.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to broadcast transaction, and impossible to cancel withdrawal. ID is attached, \"${withdrawalId}\", cancel it manually."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.prepare.failed";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.prepare.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to prepare transaction, withdrawal cancelled.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to prepare transaction, withdrawal cancelled."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.not.exists"];
                    };
                    readonly message: {
                        readonly description: "Unable to find sender account ${transaction.senderAccountId}.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find sender account ${transaction.senderAccountId}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.customer.disabled";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.customer.disabled"];
                    };
                    readonly message: {
                        readonly description: "Sender accounts customer ${senderAccount.customerId} is disabled, unable to perform payment.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender accounts customer ${senderAccount.customerId} is disabled, unable to perform payment."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "balance.insufficient";
                        readonly type: "string";
                        readonly examples: readonly ["balance.insufficient"];
                    };
                    readonly message: {
                        readonly description: "Insufficient balance for account ${transaction.senderAccountId} and payment amount ${transaction.amount}. Sender balance is ${senderAccount.balance.availableBalance as string}, amount is ${amount}";
                        readonly type: "string";
                        readonly examples: readonly ["Insufficient balance for account ${transaction.senderAccountId} and payment amount ${transaction.amount}. Sender balance is ${senderAccount.balance.availableBalance as string}, amount is ${amount}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "transaction.amount.btc";
                        readonly type: "string";
                        readonly examples: readonly ["transaction.amount.btc"];
                    };
                    readonly message: {
                        readonly description: "BTC|LTC|BCH|DOGE payment amount must be at least 0.00000001, not ${transaction.amount}.";
                        readonly type: "string";
                        readonly examples: readonly ["BTC|LTC|BCH|DOGE payment amount must be at least 0.00000001, not ${transaction.amount}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "transaction.amount.eth";
                        readonly type: "string";
                        readonly examples: readonly ["transaction.amount.eth"];
                    };
                    readonly message: {
                        readonly description: "ETH payment amount must be at least 0.000000000000000001, not ${transaction.amount}.";
                        readonly type: "string";
                        readonly examples: readonly ["ETH payment amount must be at least 0.000000000000000001, not ${transaction.amount}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.frozen";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.frozen"];
                    };
                    readonly message: {
                        readonly description: "Sender account ${transaction.senderAccountId} is frozen, unable to perform payment.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender account ${transaction.senderAccountId} is frozen, unable to perform payment."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.pending";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.pending"];
                    };
                    readonly message: {
                        readonly description: "Unable to prepare withdrawal, last withdrawal with id ${id} is not yet processed by blockchain.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to prepare withdrawal, last withdrawal with id ${id} is not yet processed by blockchain."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const CancelInProgressWithdrawal: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly maxLength: 24;
                    readonly minLength: 24;
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "ID of created withdrawal";
                };
            };
            readonly required: readonly ["id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly revert: {
                    readonly default: true;
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Defines whether fee should be reverted to account balance as well as amount. Defaults to true. Revert true would be typically used when withdrawal was not broadcast to blockchain. False is used usually for Ethereum based currencies when gas was consumed but transaction was reverted.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "rate.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["rate.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such currency rate.";
                        readonly type: "string";
                        readonly examples: readonly ["No such currency rate."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "vc.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["vc.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such virtual currency.";
                        readonly type: "string";
                        readonly examples: readonly ["No such virtual currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["account.not.exists"];
                    };
                    readonly message: {
                        readonly description: "No such account.";
                        readonly type: "string";
                        readonly examples: readonly ["No such account."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.not.cancelled.transaction.failed";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.not.cancelled.transaction.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to cancel withdrawal ${id}, it is impossible to create refund transaction.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to cancel withdrawal ${id}, it is impossible to create refund transaction."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const CeloDeployErc20Ledger: {
    readonly body: {
        readonly oneOf: readonly [{
            readonly type: "object";
            readonly required: readonly ["address", "basePair", "description", "feeCurrency", "index", "mnemonic", "supply", "symbol"];
            readonly properties: {
                readonly feeCurrency: {
                    readonly type: "string";
                    readonly description: "The currency in which the transaction fee will be paid";
                    readonly enum: readonly ["CELO", "CUSD", "CEUR"];
                };
                readonly symbol: {
                    readonly description: "The name of the token; used as an identifier within the Tatum platform and as a currency symbol on the blockchain";
                    readonly maxLength: 30;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                };
                readonly supply: {
                    readonly description: "The supply of the token";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["10000000"];
                };
                readonly description: {
                    readonly description: "The description of the token; used as a description within the Tatum platform and as a currency name on the blockchain";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["My Public Token"];
                };
                readonly address: {
                    readonly description: "The blockchain address to be assigned to the virtual account as a deposit address";
                    readonly maxLength: 42;
                    readonly minLength: 42;
                    readonly type: "string";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly mnemonic: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "The mnemonic to generate the private key for the blockchain address from which the fee for deploying the smart contract will be deducted; is used together with the derivation index of this address";
                    readonly type: "string";
                    readonly examples: readonly ["urge pulp usage sister evidence arrest palm math please chief egg abuse"];
                };
                readonly index: {
                    readonly description: "The derivation index of the blockchain address from which the fee for deploying the smart contract will be deducted; is used together with the mnemonic to generate the private key for this address";
                    readonly type: "integer";
                    readonly maximum: 2147483647;
                    readonly examples: readonly [0];
                };
                readonly basePair: {
                    readonly description: "The base pair for the virtual currency that represents the token; used to calculate the value of a transaction";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["EUR"];
                };
                readonly baseRate: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly minimum: 0;
                    readonly description: "The exchange rate for the base pair; one unit of the created virtual currency equals 1 unit of <code>basePair</code>*<code>baseRate</code>";
                    readonly examples: readonly [1];
                };
                readonly nonce: {
                    readonly type: "number";
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                    readonly minimum: 0;
                };
                readonly customer: {
                    readonly required: readonly ["externalId"];
                    readonly type: "object";
                    readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                    readonly properties: {
                        readonly externalId: {
                            readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123654"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                            readonly default: "EUR";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly customerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                        readonly providerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                    };
                };
            };
        }, {
            readonly type: "object";
            readonly required: readonly ["basePair", "derivationIndex", "description", "feeCurrency", "index", "mnemonic", "supply", "symbol", "xpub"];
            readonly properties: {
                readonly feeCurrency: {
                    readonly type: "string";
                    readonly description: "The currency in which the transaction fee will be paid";
                    readonly enum: readonly ["CELO", "CUSD", "CEUR"];
                };
                readonly symbol: {
                    readonly description: "The name of the token; used as an identifier within the Tatum platform and as a currency symbol on the blockchain";
                    readonly maxLength: 30;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                };
                readonly supply: {
                    readonly description: "The supply of the token";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["10000000"];
                };
                readonly description: {
                    readonly description: "The description of the token; used as a description within the Tatum platform and as a currency name on the blockchain";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["My Public Token"];
                };
                readonly xpub: {
                    readonly description: "The extended public key from which a deposit address for the virtual account will be generated";
                    readonly maxLength: 150;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["xpub6EsCk1uU6cJzqvP9CdsTiJwT2rF748YkPnhv5Qo8q44DG7nn2vbyt48YRsNSUYS44jFCW9gwvD9kLQu9AuqXpTpM1c5hgg9PsuBLdeNncid"];
                };
                readonly derivationIndex: {
                    readonly description: "The derivation index to use together with the extended public key to generate the deposit address";
                    readonly format: "int32";
                    readonly type: "integer";
                    readonly maximum: 2147483647;
                    readonly examples: readonly [0];
                    readonly minimum: -2147483648;
                };
                readonly mnemonic: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "The mnemonic to generate the private key for the blockchain address from which the fee for deploying the smart contract will be deducted; is used together with the derivation index of this address";
                    readonly type: "string";
                    readonly examples: readonly ["urge pulp usage sister evidence arrest palm math please chief egg abuse"];
                };
                readonly index: {
                    readonly description: "The derivation index of the blockchain address from which the fee for deploying the smart contract will be deducted; is used together with the mnemonic to generate the private key for this address";
                    readonly type: "integer";
                    readonly maximum: 2147483647;
                    readonly examples: readonly [0];
                };
                readonly basePair: {
                    readonly description: "The base pair for the virtual currency that represents the token; used to calculate the value of a transaction";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["EUR"];
                };
                readonly baseRate: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly minimum: 0;
                    readonly description: "The exchange rate for the base pair; one unit of the created virtual currency equals 1 unit of <code>basePair</code>*<code>baseRate</code>";
                    readonly examples: readonly [1];
                };
                readonly nonce: {
                    readonly type: "number";
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                    readonly minimum: 0;
                };
                readonly customer: {
                    readonly required: readonly ["externalId"];
                    readonly type: "object";
                    readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                    readonly properties: {
                        readonly externalId: {
                            readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123654"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                            readonly default: "EUR";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly customerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                        readonly providerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                    };
                };
            };
        }, {
            readonly type: "object";
            readonly required: readonly ["address", "basePair", "description", "feeCurrency", "privateKey", "supply", "symbol"];
            readonly properties: {
                readonly feeCurrency: {
                    readonly type: "string";
                    readonly description: "The currency in which the transaction fee will be paid";
                    readonly enum: readonly ["CELO", "CUSD", "CEUR"];
                };
                readonly symbol: {
                    readonly description: "The name of the token; used as an identifier within the Tatum platform and as a currency symbol on the blockchain";
                    readonly maxLength: 30;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                };
                readonly supply: {
                    readonly description: "The supply of the token";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["10000000"];
                };
                readonly description: {
                    readonly description: "The description of the token; used as a description within the Tatum platform and as a currency name on the blockchain";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["My Public Token"];
                };
                readonly address: {
                    readonly description: "The blockchain address to be assigned to the virtual account as a deposit address";
                    readonly maxLength: 42;
                    readonly minLength: 42;
                    readonly type: "string";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly privateKey: {
                    readonly description: "The private key of the blockchain address from which the fee for deploying the smart contract will be deducted";
                    readonly type: "string";
                    readonly maxLength: 66;
                    readonly minLength: 66;
                    readonly examples: readonly ["0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2"];
                };
                readonly basePair: {
                    readonly description: "The base pair for the virtual currency that represents the token; used to calculate the value of a transaction";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["EUR"];
                };
                readonly baseRate: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly minimum: 0;
                    readonly description: "The exchange rate for the base pair; one unit of the created virtual currency equals 1 unit of <code>basePair</code>*<code>baseRate</code>";
                    readonly examples: readonly [1];
                };
                readonly nonce: {
                    readonly type: "number";
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                    readonly minimum: 0;
                };
                readonly customer: {
                    readonly required: readonly ["externalId"];
                    readonly type: "object";
                    readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                    readonly properties: {
                        readonly externalId: {
                            readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123654"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                            readonly default: "EUR";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly customerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                        readonly providerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                    };
                };
            };
        }, {
            readonly type: "object";
            readonly required: readonly ["basePair", "derivationIndex", "description", "feeCurrency", "privateKey", "supply", "symbol", "xpub"];
            readonly properties: {
                readonly feeCurrency: {
                    readonly type: "string";
                    readonly description: "The currency in which the transaction fee will be paid";
                    readonly enum: readonly ["CELO", "CUSD", "CEUR"];
                };
                readonly symbol: {
                    readonly description: "The name of the token; used as an identifier within the Tatum platform and as a currency symbol on the blockchain";
                    readonly maxLength: 30;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                };
                readonly supply: {
                    readonly description: "The supply of the token";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["10000000"];
                };
                readonly description: {
                    readonly description: "The description of the token; used as a description within the Tatum platform and as a currency name on the blockchain";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["My Public Token"];
                };
                readonly xpub: {
                    readonly description: "The extended public key from which a deposit address for the virtual account will be generated";
                    readonly maxLength: 150;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["xpub6EsCk1uU6cJzqvP9CdsTiJwT2rF748YkPnhv5Qo8q44DG7nn2vbyt48YRsNSUYS44jFCW9gwvD9kLQu9AuqXpTpM1c5hgg9PsuBLdeNncid"];
                };
                readonly derivationIndex: {
                    readonly description: "The derivation index to use together with the extended public key to generate the deposit address";
                    readonly format: "int32";
                    readonly type: "integer";
                    readonly maximum: 2147483647;
                    readonly examples: readonly [0];
                    readonly minimum: -2147483648;
                };
                readonly privateKey: {
                    readonly description: "The private key of the blockchain address from which the fee for deploying the smart contract will be deducted";
                    readonly type: "string";
                    readonly maxLength: 66;
                    readonly minLength: 66;
                    readonly examples: readonly ["0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2"];
                };
                readonly basePair: {
                    readonly description: "The base pair for the virtual currency that represents the token; used to calculate the value of a transaction";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["EUR"];
                };
                readonly baseRate: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly minimum: 0;
                    readonly description: "The exchange rate for the base pair; one unit of the created virtual currency equals 1 unit of <code>basePair</code>*<code>baseRate</code>";
                    readonly examples: readonly [1];
                };
                readonly nonce: {
                    readonly type: "number";
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                    readonly minimum: 0;
                };
                readonly customer: {
                    readonly required: readonly ["externalId"];
                    readonly type: "object";
                    readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                    readonly properties: {
                        readonly externalId: {
                            readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123654"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                            readonly default: "EUR";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly customerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                        readonly providerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                    };
                };
            };
        }, {
            readonly type: "object";
            readonly required: readonly ["address", "basePair", "description", "feeCurrency", "signatureId", "supply", "symbol"];
            readonly properties: {
                readonly feeCurrency: {
                    readonly type: "string";
                    readonly description: "The currency in which the transaction fee will be paid";
                    readonly enum: readonly ["CELO", "CUSD", "CEUR"];
                };
                readonly symbol: {
                    readonly description: "The name of the token; used as an identifier within the Tatum platform and as a currency symbol on the blockchain";
                    readonly maxLength: 30;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                };
                readonly supply: {
                    readonly description: "The supply of the token";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["10000000"];
                };
                readonly description: {
                    readonly description: "The description of the token; used as a description within the Tatum platform and as a currency name on the blockchain";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["My Public Token"];
                };
                readonly address: {
                    readonly description: "The blockchain address to be assigned to the virtual account as a deposit address";
                    readonly maxLength: 42;
                    readonly minLength: 42;
                    readonly type: "string";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly signatureId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly description: "The KMS identifier of either the <b>private key</b> of the blockchain address from which the fee for deploying the smart contract will be deducted, or the <b>mnemonic</b> to generate the private key for the blockchain address from which the fee will be deducted";
                    readonly examples: readonly ["26d3883e-4e17-48b3-a0ee-09a3e484ac83"];
                };
                readonly index: {
                    readonly type: "number";
                    readonly minimum: 0;
                    readonly description: "(Only if the signature ID is mnemonic-based) The index of the address from which the fee will be deducted that was generated from the mnemonic";
                };
                readonly basePair: {
                    readonly description: "The base pair for the virtual currency that represents the token; used to calculate the value of a transaction";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["EUR"];
                };
                readonly baseRate: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly minimum: 0;
                    readonly description: "The exchange rate for the base pair; one unit of the created virtual currency equals 1 unit of <code>basePair</code>*<code>baseRate</code>";
                    readonly examples: readonly [1];
                };
                readonly nonce: {
                    readonly type: "number";
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                    readonly minimum: 0;
                };
                readonly customer: {
                    readonly required: readonly ["externalId"];
                    readonly type: "object";
                    readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                    readonly properties: {
                        readonly externalId: {
                            readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123654"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                            readonly default: "EUR";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly customerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                        readonly providerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                    };
                };
            };
        }, {
            readonly type: "object";
            readonly required: readonly ["basePair", "derivationIndex", "description", "feeCurrency", "signatureId", "supply", "symbol", "xpub"];
            readonly properties: {
                readonly feeCurrency: {
                    readonly type: "string";
                    readonly description: "The currency in which the transaction fee will be paid";
                    readonly enum: readonly ["CELO", "CUSD", "CEUR"];
                };
                readonly symbol: {
                    readonly description: "The name of the token; used as an identifier within the Tatum platform and as a currency symbol on the blockchain";
                    readonly maxLength: 30;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                };
                readonly supply: {
                    readonly description: "The supply of the token";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["10000000"];
                };
                readonly description: {
                    readonly description: "The description of the token; used as a description within the Tatum platform and as a currency name on the blockchain";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["My Public Token"];
                };
                readonly xpub: {
                    readonly description: "The extended public key from which a deposit address for the virtual account will be generated";
                    readonly maxLength: 150;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["xpub6EsCk1uU6cJzqvP9CdsTiJwT2rF748YkPnhv5Qo8q44DG7nn2vbyt48YRsNSUYS44jFCW9gwvD9kLQu9AuqXpTpM1c5hgg9PsuBLdeNncid"];
                };
                readonly derivationIndex: {
                    readonly description: "The derivation index to use together with the extended public key to generate the deposit address";
                    readonly format: "int32";
                    readonly type: "integer";
                    readonly maximum: 2147483647;
                    readonly examples: readonly [0];
                    readonly minimum: -2147483648;
                };
                readonly signatureId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly description: "The KMS identifier of either the <b>private key</b> of the blockchain address from which the fee for deploying the smart contract will be deducted, or the <b>mnemonic</b> to generate the private key for the blockchain address from which the fee will be deducted";
                    readonly examples: readonly ["26d3883e-4e17-48b3-a0ee-09a3e484ac83"];
                };
                readonly index: {
                    readonly type: "number";
                    readonly minimum: 0;
                    readonly description: "(Only if the signature ID is mnemonic-based) The index of the address from which the fee will be deducted that was generated from the mnemonic";
                };
                readonly basePair: {
                    readonly description: "The base pair for the virtual currency that represents the token; used to calculate the value of a transaction";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["EUR"];
                };
                readonly baseRate: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly minimum: 0;
                    readonly description: "The exchange rate for the base pair; one unit of the created virtual currency equals 1 unit of <code>basePair</code>*<code>baseRate</code>";
                    readonly examples: readonly [1];
                };
                readonly nonce: {
                    readonly type: "number";
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                    readonly minimum: 0;
                };
                readonly customer: {
                    readonly required: readonly ["externalId"];
                    readonly type: "object";
                    readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                    readonly properties: {
                        readonly externalId: {
                            readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123654"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                            readonly default: "EUR";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly customerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                        readonly providerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                    };
                };
            };
        }];
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly accountId: {
                        readonly description: "Account ID with the type of currency as created ERC20/BEP20 token symbol. Account will be unfrozen when ERC20/BEP20 contract address will be set.";
                        readonly type: "string";
                        readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    };
                    readonly txId: {
                        readonly description: "TX hash of successful transaction. From this transaction receipt contract address can be obtained.";
                        readonly type: "string";
                        readonly examples: readonly ["c83f8818db43d9ba4accfe454aa44fc33123d47a4f89d47b314d6748eb0e9bc9"];
                    };
                };
                readonly type: "object";
                readonly required: readonly ["accountId", "txId"];
            }, {
                readonly properties: {
                    readonly accountId: {
                        readonly description: "Account ID with the type of currency as created ERC20/BEP20 token symbol. Account will be unfrozen when ERC20/BEP20 contract address will be set.";
                        readonly type: "string";
                        readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    };
                    readonly signatureId: {
                        readonly description: "ID of prepared payment template to sign. This is should be stored on a client side to retrieve ID of the blockchain transaction, when signing application signs the transaction and broadcasts it to the blockchain.";
                        readonly format: "uuid";
                        readonly type: "string";
                        readonly examples: readonly ["1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6"];
                    };
                };
                readonly type: "object";
                readonly required: readonly ["accountId", "signatureId"];
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.symbol.prefix";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.symbol.prefix"];
                    };
                    readonly message: {
                        readonly description: "ERC20 token cannot start with VC_.";
                        readonly type: "string";
                        readonly examples: readonly ["ERC20 token cannot start with VC_."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.address.xpub.both";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.address.xpub.both"];
                    };
                    readonly message: {
                        readonly description: "Either xpub or address must be present, not both.";
                        readonly type: "string";
                        readonly examples: readonly ["Either xpub or address must be present, not both."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.address.xpub.missing";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.address.xpub.missing"];
                    };
                    readonly message: {
                        readonly description: "Either xpub or address must be present.";
                        readonly type: "string";
                        readonly examples: readonly ["Either xpub or address must be present."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.duplicate.name";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.duplicate.name"];
                    };
                    readonly message: {
                        readonly description: "ERC20 token with given name already exists.";
                        readonly type: "string";
                        readonly examples: readonly ["ERC20 token with given name already exists."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "customer.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["customer.not.active"];
                    };
                    readonly message: {
                        readonly description: "Customer not active.";
                        readonly type: "string";
                        readonly examples: readonly ["Customer not active."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "virtual.creation.error";
                        readonly type: "string";
                        readonly examples: readonly ["virtual.creation.error"];
                    };
                    readonly message: {
                        readonly description: "It is not possible to create virtual currency.";
                        readonly type: "string";
                        readonly examples: readonly ["It is not possible to create virtual currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["account.not.exists"];
                    };
                    readonly message: {
                        readonly description: "No such account.";
                        readonly type: "string";
                        readonly examples: readonly ["No such account."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.missing";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.missing"];
                    };
                    readonly message: {
                        readonly description: "No xpub assigned to account, it is not possible to generate address. Use assignAddress method instead.";
                        readonly type: "string";
                        readonly examples: readonly ["No xpub assigned to account, it is not possible to generate address. Use assignAddress method instead."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "xpub.used";
                        readonly type: "string";
                        readonly examples: readonly ["xpub.used"];
                    };
                    readonly message: {
                        readonly description: "XPub already used registered within Tatum";
                        readonly type: "string";
                        readonly examples: readonly ["XPub already used registered within Tatum"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "Address.index.used";
                        readonly type: "string";
                        readonly examples: readonly ["address.index.used"];
                    };
                    readonly message: {
                        readonly description: "Unable to create address, derivation index is already used.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to create address, derivation index is already used."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "offchain.not.supported";
                        readonly type: "string";
                        readonly examples: readonly ["offchain.not.supported"];
                    };
                    readonly message: {
                        readonly description: "Offchain not supported for account with ${account.currency} currency.";
                        readonly type: "string";
                        readonly examples: readonly ["Offchain not supported for account with ${account.currency} currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.incompatible";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.incompatible"];
                    };
                    readonly message: {
                        readonly description: "Xpub not compatible with account currency.";
                        readonly type: "string";
                        readonly examples: readonly ["Xpub not compatible with account currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.present";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.present"];
                    };
                    readonly message: {
                        readonly description: "Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead.";
                        readonly type: "string";
                        readonly examples: readonly ["Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                    readonly required: {
                        readonly "0": "errorCode";
                        readonly "1": "message";
                        readonly "2": "statusCode";
                    };
                    readonly type: "object";
                };
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "vc.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["vc.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such virtual currency.";
                        readonly type: "string";
                        readonly examples: readonly ["No such virtual currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "Address.used";
                        readonly type: "string";
                        readonly examples: readonly ["address.used"];
                    };
                    readonly message: {
                        readonly description: "Address and currency already in use.";
                        readonly type: "string";
                        readonly examples: readonly ["Address and currency already in use."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.present";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.present"];
                    };
                    readonly message: {
                        readonly description: "Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead.";
                        readonly type: "string";
                        readonly examples: readonly ["Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                    readonly required: {
                        readonly "0": "errorCode";
                        readonly "1": "message";
                        readonly "2": "statusCode";
                    };
                    readonly type: "object";
                };
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.erc20.unsupported";
                        readonly type: "string";
                        readonly examples: readonly ["eth.erc20.unsupported"];
                    };
                    readonly message: {
                        readonly description: "Unsupported ETH ERC20 blockchain.";
                        readonly type: "string";
                        readonly examples: readonly ["Unsupported ETH ERC20 blockchain."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "ethereum.broadcast.failed";
                        readonly type: "string";
                        readonly examples: readonly ["ethereum.broadcast.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to broadcast transaction due to ${error}.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to broadcast transaction due to ${error}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "gas.price.failed";
                        readonly type: "string";
                        readonly examples: readonly ["gas.price.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to obtain current GAS price.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to obtain current GAS price."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "ethereum.transaction.body";
                        readonly type: "string";
                        readonly examples: readonly ["ethereum.transaction.body"];
                    };
                    readonly message: {
                        readonly description: "Either currency, or tokenAddress must be defined.";
                        readonly type: "string";
                        readonly examples: readonly ["Either currency, or tokenAddress must be defined."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.transaction.gas";
                        readonly type: "string";
                        readonly examples: readonly ["eth.transaction.gas"];
                    };
                    readonly message: {
                        readonly description: "Unable to calculate gas limit for transaction. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to calculate gas limit for transaction. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.transaction.hash";
                        readonly type: "string";
                        readonly examples: readonly ["eth.transaction.hash"];
                    };
                    readonly message: {
                        readonly description: "Unable to calculate transaction hash. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to calculate transaction hash. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.transaction.sign";
                        readonly type: "string";
                        readonly examples: readonly ["eth.transaction.sign"];
                    };
                    readonly message: {
                        readonly description: "Unable to sign transaction. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to sign transaction. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const CeloOrErc20Transfer: {
    readonly body: {
        readonly oneOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly nonce: {
                    readonly type: "number";
                    readonly minimum: 0;
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                };
                readonly address: {
                    readonly description: "Blockchain address to send assets";
                    readonly maxLength: 42;
                    readonly minLength: 42;
                    readonly type: "string";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly amount: {
                    readonly description: "Amount to be sent.";
                    readonly maxLength: 38;
                    readonly type: "string";
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly examples: readonly ["100000"];
                };
                readonly compliant: {
                    readonly description: "Compliance check, if withdrawal is not compliant, it will not be processed.";
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                };
                readonly privateKey: {
                    readonly type: "string";
                    readonly maxLength: 66;
                    readonly minLength: 66;
                    readonly description: "Private key of sender address. Either mnemonic and index, privateKey or signature Id must be present - depends on the type of account and xpub.";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly paymentId: {
                    readonly description: "Identifier of the payment, shown for created Transaction within Tatum sender account.";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["1234"];
                };
                readonly senderAccountId: {
                    readonly maxLength: 24;
                    readonly minLength: 24;
                    readonly description: "Sender account ID";
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly feeCurrency: {
                    readonly type: "string";
                    readonly description: "The currency in which the transaction fee will be paid";
                    readonly enum: readonly ["CELO", "CUSD", "CEUR"];
                };
                readonly senderNote: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "Note visible to owner of withdrawing account";
                    readonly type: "string";
                    readonly examples: readonly ["Sender note"];
                };
                readonly gasLimit: {
                    readonly type: "string";
                    readonly description: "Gas limit for transaction in gas price. If not set, automatic calculation will be used.";
                    readonly pattern: "^[+]?\\d+$";
                    readonly examples: readonly ["40000"];
                };
                readonly gasPrice: {
                    readonly type: "string";
                    readonly description: "Gas price in Gwei. If not set, automatic calculation will be used.";
                    readonly pattern: "^[+]?\\d+$";
                    readonly examples: readonly ["20"];
                };
            };
            readonly required: readonly ["senderAccountId", "address", "amount", "feeCurrency", "privateKey"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly nonce: {
                    readonly type: "number";
                    readonly minimum: 0;
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                };
                readonly address: {
                    readonly description: "Blockchain address to send assets";
                    readonly maxLength: 42;
                    readonly minLength: 42;
                    readonly type: "string";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly amount: {
                    readonly description: "Amount to be sent.";
                    readonly maxLength: 38;
                    readonly type: "string";
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly examples: readonly ["100000"];
                };
                readonly compliant: {
                    readonly description: "Compliance check, if withdrawal is not compliant, it will not be processed.";
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                };
                readonly index: {
                    readonly description: "Derivation index of sender address.";
                    readonly maximum: 2147483647;
                    readonly type: "integer";
                    readonly examples: readonly [0];
                };
                readonly feeCurrency: {
                    readonly type: "string";
                    readonly description: "The currency in which the transaction fee will be paid";
                    readonly enum: readonly ["CELO", "CUSD", "CEUR"];
                };
                readonly gasLimit: {
                    readonly type: "string";
                    readonly description: "Gas limit for transaction in gas price. If not set, automatic calculation will be used.";
                    readonly pattern: "^[+]?\\d+$";
                    readonly examples: readonly ["40000"];
                };
                readonly gasPrice: {
                    readonly type: "string";
                    readonly description: "Gas price in Gwei. If not set, automatic calculation will be used.";
                    readonly pattern: "^[+]?\\d+$";
                    readonly examples: readonly ["20"];
                };
                readonly mnemonic: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "Mnemonic to generate private key for sender address. Either mnemonic and index, privateKey or signature Id must be present - depends on the type of account and xpub.";
                    readonly type: "string";
                    readonly examples: readonly ["urge pulp usage sister evidence arrest palm math please chief egg abuse"];
                };
                readonly paymentId: {
                    readonly description: "Identifier of the payment, shown for created Transaction within Tatum sender account.";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["1234"];
                };
                readonly senderAccountId: {
                    readonly maxLength: 24;
                    readonly minLength: 24;
                    readonly description: "Sender account ID";
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly senderNote: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "Note visible to owner of withdrawing account";
                    readonly type: "string";
                    readonly examples: readonly ["Sender note"];
                };
            };
            readonly required: readonly ["senderAccountId", "address", "amount", "mnemonic", "feeCurrency", "index"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly nonce: {
                    readonly type: "number";
                    readonly minimum: 0;
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                };
                readonly address: {
                    readonly description: "Blockchain address to send assets";
                    readonly maxLength: 42;
                    readonly minLength: 42;
                    readonly type: "string";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly amount: {
                    readonly description: "Amount to be sent.";
                    readonly maxLength: 38;
                    readonly type: "string";
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly examples: readonly ["100000"];
                };
                readonly compliant: {
                    readonly description: "Compliance check, if withdrawal is not compliant, it will not be processed.";
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                };
                readonly signatureId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly description: "Identifier of the mnemonic / private key associated in signing application.\nWhen hash identifies mnemonic, index must be present to represent specific account to pay from.\nPrivate key, mnemonic or signature Id must be present.\n";
                    readonly examples: readonly ["26d3883e-4e17-48b3-a0ee-09a3e484ac83"];
                };
                readonly index: {
                    readonly description: "Derivation index of sender address.";
                    readonly maximum: 2147483647;
                    readonly type: "integer";
                    readonly examples: readonly [0];
                };
                readonly feeCurrency: {
                    readonly type: "string";
                    readonly description: "The currency in which the transaction fee will be paid";
                    readonly enum: readonly ["CELO", "CUSD", "CEUR"];
                };
                readonly paymentId: {
                    readonly description: "Identifier of the payment, shown for created Transaction within Tatum sender account.";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["1234"];
                };
                readonly senderAccountId: {
                    readonly maxLength: 24;
                    readonly minLength: 24;
                    readonly description: "Sender account ID";
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly senderNote: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "Note visible to owner of withdrawing account";
                    readonly type: "string";
                    readonly examples: readonly ["Sender note"];
                };
                readonly gasLimit: {
                    readonly type: "string";
                    readonly description: "Gas limit for transaction in gas price. If not set, automatic calculation will be used.";
                    readonly pattern: "^[+]?\\d+$";
                    readonly examples: readonly ["40000"];
                };
                readonly gasPrice: {
                    readonly type: "string";
                    readonly description: "Gas price in Gwei. If not set, automatic calculation will be used.";
                    readonly pattern: "^[+]?\\d+$";
                    readonly examples: readonly ["20"];
                };
            };
            readonly required: readonly ["senderAccountId", "address", "signatureId", "feeCurrency", "amount"];
        }];
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly oneOf: readonly [{
                readonly type: "object";
                readonly properties: {
                    readonly id: {
                        readonly description: "ID of withdrawal. If transaction is not valid in blockchain, use this id to cancel withdrawal.";
                        readonly type: "string";
                        readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    };
                    readonly txId: {
                        readonly description: "TX hash of successful transaction.";
                        readonly type: "string";
                        readonly examples: readonly ["c83f8818db43d9ba4accfe454aa44fc33123d47a4f89d47b314d6748eb0e9bc9"];
                    };
                    readonly completed: {
                        readonly description: "If set to \"true\", the withdrawal has been completed in the virtual account; if set to \"false\", the withdrawal has not been completed and you have to <a href=\"https://apidoc.tatum.io/tag/Withdrawal#operation/completeWithdrawal\" target=\"_blank\">complete it manually</a>";
                        readonly type: "boolean";
                        readonly examples: readonly [true];
                    };
                };
                readonly required: readonly ["txId", "id", "completed"];
            }, {
                readonly type: "object";
                readonly properties: {
                    readonly signatureId: {
                        readonly description: "ID of prepared payment template to sign. This is should be stored on a client side to retrieve ID of the blockchain transaction, when signing application signs the transaction and broadcasts it to the blockchain.";
                        readonly format: "uuid";
                        readonly type: "string";
                        readonly examples: readonly ["1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6"];
                    };
                };
                readonly required: readonly ["id", "signatureId"];
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.missing";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.missing"];
                    };
                    readonly message: {
                        readonly description: "No such withdrawal.";
                        readonly type: "string";
                        readonly examples: readonly ["No such withdrawal."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "rate.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["rate.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such currency rate.";
                        readonly type: "string";
                        readonly examples: readonly ["No such currency rate."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "vc.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["vc.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such virtual currency.";
                        readonly type: "string";
                        readonly examples: readonly ["No such virtual currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.recipient.format";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.recipient.format"];
                    };
                    readonly message: {
                        readonly description: "Recipient blockchain address has incorrect format.";
                        readonly type: "string";
                        readonly examples: readonly ["Recipient blockchain address has incorrect format."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.failed.transaction.failed";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.failed.transaction.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to store withdrawal, it is impossible to create transaction.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to store withdrawal, it is impossible to create transaction."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.account.virtual";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.account.virtual"];
                    };
                    readonly message: {
                        readonly description: "Sender account cannot be virtual.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender account cannot be virtual."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "offchain.not.supported";
                        readonly type: "string";
                        readonly examples: readonly ["offchain.not.supported"];
                    };
                    readonly message: {
                        readonly description: "Offchain not supported for account with ${account.currency} currency.";
                        readonly type: "string";
                        readonly examples: readonly ["Offchain not supported for account with ${account.currency} currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "amount.format";
                        readonly type: "string";
                        readonly examples: readonly ["amount.format"];
                    };
                    readonly message: {
                        readonly description: "Amount has incorrect format.";
                        readonly type: "string";
                        readonly examples: readonly ["Amount has incorrect format."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "fee.format";
                        readonly type: "string";
                        readonly examples: readonly ["fee.format"];
                    };
                    readonly message: {
                        readonly description: "Fee has incorrect format.";
                        readonly type: "string";
                        readonly examples: readonly ["Fee has incorrect format."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.not.cancelled.transaction.failed";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.not.cancelled.transaction.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to broadcast transaction, and impossible to cancel withdrawal. ID is attached, \"${withdrawalId}\", cancel it manually.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to broadcast transaction, and impossible to cancel withdrawal. ID is attached, \"${withdrawalId}\", cancel it manually."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.prepare.failed";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.prepare.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to prepare transaction, withdrawal cancelled.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to prepare transaction, withdrawal cancelled."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.not.exists"];
                    };
                    readonly message: {
                        readonly description: "Unable to find sender account ${transaction.senderAccountId}.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find sender account ${transaction.senderAccountId}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.customer.disabled";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.customer.disabled"];
                    };
                    readonly message: {
                        readonly description: "Sender accounts customer ${senderAccount.customerId} is disabled, unable to perform payment.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender accounts customer ${senderAccount.customerId} is disabled, unable to perform payment."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "balance.insufficient";
                        readonly type: "string";
                        readonly examples: readonly ["balance.insufficient"];
                    };
                    readonly message: {
                        readonly description: "Insufficient balance for account ${transaction.senderAccountId} and payment amount ${transaction.amount}. Sender balance is ${senderAccount.balance.availableBalance as string}, amount is ${amount}";
                        readonly type: "string";
                        readonly examples: readonly ["Insufficient balance for account ${transaction.senderAccountId} and payment amount ${transaction.amount}. Sender balance is ${senderAccount.balance.availableBalance as string}, amount is ${amount}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "amount.btc";
                        readonly type: "string";
                        readonly examples: readonly ["amount.btc"];
                    };
                    readonly message: {
                        readonly description: "BTC|LTC|BCH|DOGE payment amount must be at least 0.00000001, not ${transaction.amount}.";
                        readonly type: "string";
                        readonly examples: readonly ["BTC|LTC|BCH|DOGE payment amount must be at least 0.00000001, not ${transaction.amount}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "amount.eth";
                        readonly type: "string";
                        readonly examples: readonly ["amount.eth"];
                    };
                    readonly message: {
                        readonly description: "ETH payment amount must be at least 0.000000000001, not ${transaction.amount}.";
                        readonly type: "string";
                        readonly examples: readonly ["ETH payment amount must be at least 0.000000000001, not ${transaction.amount}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.frozen";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.frozen"];
                    };
                    readonly message: {
                        readonly description: "Sender account ${transaction.senderAccountId} is frozen, unable to perform payment.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender account ${transaction.senderAccountId} is frozen, unable to perform payment."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.pending";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.pending"];
                    };
                    readonly message: {
                        readonly description: "Unable to prepare withdrawal, last withdrawal with id ${id} is not yet processed by blockchain.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to prepare withdrawal, last withdrawal with id ${id} is not yet processed by blockchain."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "private.mnemonic.missing";
                        readonly type: "string";
                        readonly examples: readonly ["private.mnemonic.missing"];
                    };
                    readonly message: {
                        readonly description: "Either mnemonic and index or private key must be present.";
                        readonly type: "string";
                        readonly examples: readonly ["Either mnemonic and index or private key must be present."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.erc20.unsupported";
                        readonly type: "string";
                        readonly examples: readonly ["eth.erc20.unsupported"];
                    };
                    readonly message: {
                        readonly description: "Unsupported ETH ERC20 blockchain.";
                        readonly type: "string";
                        readonly examples: readonly ["Unsupported ETH ERC20 blockchain."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "ethereum.broadcast.failed";
                        readonly type: "string";
                        readonly examples: readonly ["ethereum.broadcast.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to broadcast transaction due to ${error}.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to broadcast transaction due to ${error}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "gas.price.failed";
                        readonly type: "string";
                        readonly examples: readonly ["gas.price.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to obtain current GAS price.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to obtain current GAS price."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "ethereum.transaction.body";
                        readonly type: "string";
                        readonly examples: readonly ["ethereum.transaction.body"];
                    };
                    readonly message: {
                        readonly description: "Either currency, or tokenAddress must be defined.";
                        readonly type: "string";
                        readonly examples: readonly ["Either currency, or tokenAddress must be defined."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.transaction.gas";
                        readonly type: "string";
                        readonly examples: readonly ["eth.transaction.gas"];
                    };
                    readonly message: {
                        readonly description: "Unable to calculate gas limit for transaction. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to calculate gas limit for transaction. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.transaction.hash";
                        readonly type: "string";
                        readonly examples: readonly ["eth.transaction.hash"];
                    };
                    readonly message: {
                        readonly description: "Unable to calculate transaction hash. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to calculate transaction hash. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.transaction.sign";
                        readonly type: "string";
                        readonly examples: readonly ["eth.transaction.sign"];
                    };
                    readonly message: {
                        readonly description: "Unable to sign transaction. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to sign transaction. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const ChartRequest: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["pair", "from", "to", "timeFrame"];
        readonly properties: {
            readonly pair: {
                readonly type: "string";
                readonly description: "Trading pair";
                readonly minLength: 3;
                readonly maxLength: 30;
                readonly pattern: "^[A-a-zZ0-9_\\-]+\\/[A-Za-z0-9_\\-]+$";
                readonly examples: readonly ["BTC/EUR"];
            };
            readonly from: {
                readonly type: "number";
                readonly minimum: 0;
                readonly description: "Start interval in UTC millis.";
                readonly examples: readonly [1613654998398];
            };
            readonly to: {
                readonly type: "number";
                readonly minimum: 0;
                readonly description: "End interval in UTC millis.";
                readonly examples: readonly [1613654998398];
            };
            readonly timeFrame: {
                readonly type: "string";
                readonly description: "Time frame of the chart.";
                readonly enum: readonly ["MIN_1", "MIN_3", "MIN_5", "MIN_15", "MIN_30", "HOUR_1", "HOUR_4", "HOUR_12", "DAY", "WEEK", "MONTH", "YEAR"];
                readonly examples: readonly ["MIN_5"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly direction: {
                    readonly type: "string";
                    readonly enum: readonly ["asc", "desc"];
                    readonly examples: readonly ["asc"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Direction of sorting";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly description: "1 point in the chart. This point represents the tick in the grapch based on the specified time frame.";
                readonly required: readonly ["timestamp", "high", "low", "open", "close", "volume"];
                readonly properties: {
                    readonly timestamp: {
                        readonly type: "number";
                        readonly description: "Milliseconds in UTC of the time interval.";
                        readonly examples: readonly [1613654117167];
                    };
                    readonly high: {
                        readonly type: "string";
                        readonly description: "Highest trade value in the current interval.";
                        readonly examples: readonly ["54213.21"];
                    };
                    readonly low: {
                        readonly type: "string";
                        readonly description: "Lowest trade value in the current interval.";
                        readonly examples: readonly ["53213.54"];
                    };
                    readonly open: {
                        readonly type: "string";
                        readonly description: "Open trade value in the current interval.";
                        readonly examples: readonly ["53513"];
                    };
                    readonly close: {
                        readonly type: "string";
                        readonly description: "Close trade value in the current interval.";
                        readonly examples: readonly ["54113"];
                    };
                    readonly volume: {
                        readonly type: "string";
                        readonly description: "Total volume of assets traded in the current interval. Volume is in currency1 asset.";
                        readonly examples: readonly ["2.423"];
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const CompleteWithdrawal: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly maxLength: 50;
                    readonly minLength: 10;
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "ID of created withdrawal";
                };
                readonly txId: {
                    readonly type: "string";
                    readonly maxLength: 88;
                    readonly minLength: 10;
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Blockchain transaction ID of created withdrawal";
                };
            };
            readonly required: readonly ["id", "txId"];
        }];
    };
    readonly response: {
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.missing";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.missing"];
                    };
                    readonly message: {
                        readonly description: "No such withdrawal.";
                        readonly type: "string";
                        readonly examples: readonly ["No such withdrawal."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.unexpected.state";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.unexpected.state"];
                    };
                    readonly message: {
                        readonly description: "Unable to complete withdrawal, which is not in InProgress state.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to complete withdrawal, which is not in InProgress state."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const CreateAccount: {
    readonly body: {
        readonly oneOf: readonly [{
            readonly properties: {
                readonly currency: {
                    readonly description: "<p>The currency for the virtual account</p>\n<ul>\n<li><b>Native blockchain assets:</b> ALGO, BCH, BNB, BSC, BTC, CELO, DOGE, EGLD, ETH, FLOW, KCS, KLAY, LTC, MATIC, ONE, SOL, TRON, VET, XDC, XLM, XRP</li>\n<li><b>Digital assets:</b> BADA, BAT, BBCH, BBTC, BDOT, BETH, BLTC, BUSD, BUSD_BSC, BXRP, CAKE, FREE, GMC, LEO, LINK, MKR, MMY, PAX, PAXG, TUSD, UNI, USD_BSC, USDC, USDC_MATIC, USDC_MATIC_NATIVE, USDT, USDT_TRON, WBNB, WBTC, XCON</li>\n<li><b><a href=\"https://apidoc.tatum.io/tag/Virtual-Currency\" target=\"_blank\">Virtual currency</a></b> registered on the Tatum platform and starting with the \"VC_\" prefix</li>\n<li><b><a href=\"https://apidoc.tatum.io/tag/Blockchain-operations#operation/BnbAssetOffchain\" target=\"_blank\">BNB assets</a>, <a href=\"https://apidoc.tatum.io/tag/Blockchain-operations#operation/XlmAssetOffchain\" target=\"_blank\">XLM assets</a>, and <a href=\"https://apidoc.tatum.io/tag/Blockchain-operations#operation/XrpAssetOffchain\" target=\"_blank\">XRP assets</a></b> created via the Tatum platform</li>\n<li><b>Custom fungible tokens</b> (ERC-20 or equivalent, such as BEP-20 or TRC-10/20) registered on the Tatum platform; for more information, see <a href=\"https://docs.tatum.io/guides/ledger-and-off-chain/how-to-connect-custom-erc-20-token-to-the-ledger\" target=\"_blank\">our user documentation</a>\n<br/>The fungible tokens do not have direct faucets on the testnet. To use them in a testnet environment, you have to register a new fungible token in a virtual account (use <a href=\"https://apidoc.tatum.io/tag/Blockchain-operations/#operation/createTrc\" target=\"_blank\">this API</a> for TRON TRC-10/20 tokens and <a href=\"https://apidoc.tatum.io/tag/Blockchain-operations/#operation/registerErc20Token\" target=\"_blank\">this API</a> for any other tokens) and make sure that your tokens minted on the testnet are <a href=\"https://apidoc.tatum.io/tag/Blockchain-operations/#operation/storeTokenAddress\" target=\"_blank\">linked to the token smart contract</a>.</li>\n</ul>\n";
                    readonly maxLength: 40;
                    readonly minLength: 2;
                    readonly type: "string";
                    readonly examples: readonly ["BTC"];
                };
                readonly xpub: {
                    readonly description: "Extended public key to generate addresses from.";
                    readonly maxLength: 192;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["xpub6EsCk1uU6cJzqvP9CdsTiJwT2rF748YkPnhv5Qo8q44DG7nn2vbyt48YRsNSUYS44jFCW9gwvD9kLQu9AuqXpTpM1c5hgg9PsuBLdeNncid"];
                };
                readonly customer: {
                    readonly properties: {
                        readonly externalId: {
                            readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123654"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                            readonly default: "EUR";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly customerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                        readonly providerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                    };
                    readonly required: readonly ["externalId"];
                    readonly type: "object";
                    readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                };
                readonly compliant: {
                    readonly description: "Enable compliant checks. If this is enabled, it is impossible to create account if compliant check fails.";
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                };
                readonly accountCode: {
                    readonly description: "For bookkeeping to distinct account purpose.";
                    readonly maxLength: 50;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["AC_1011_B"];
                };
                readonly accountingCurrency: {
                    readonly description: "All transaction will be accounted in this currency for all accounts. Currency can be overridden per account level. If not set, customer accountingCurrency is used or EUR by default. ISO-4217";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["USD"];
                };
                readonly accountNumber: {
                    readonly description: "Account number from external system.";
                    readonly maxLength: 50;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["123456"];
                };
            };
            readonly required: readonly ["currency", "xpub"];
            readonly type: "object";
        }, {
            readonly properties: {
                readonly currency: {
                    readonly description: "<p>The currency for the virtual account</p>\n<ul>\n<li><b>Native blockchain assets:</b> ALGO, BCH, BNB, BSC, BTC, CELO, DOGE, EGLD, ETH, FLOW, KCS, KLAY, LTC, MATIC, ONE, SOL, TRON, VET, XDC, XLM, XRP</li>\n<li><b>Digital assets:</b> BADA, BAT, BBCH, BBTC, BDOT, BETH, BLTC, BUSD, BUSD_BSC, BXRP, CAKE, FREE, GMC, LEO, LINK, MKR, MMY, PAX, PAXG, TUSD, UNI, USD_BSC, USDC, USDC_MATIC, USDC_MATIC_NATIVE, USDT, USDT_TRON, WBNB, WBTC, XCON</li>\n<li><b><a href=\"https://apidoc.tatum.io/tag/Virtual-Currency\" target=\"_blank\">Virtual currency</a></b> registered on the Tatum platform and starting with the \"VC_\" prefix</li>\n<li><b><a href=\"https://apidoc.tatum.io/tag/Blockchain-operations#operation/BnbAssetOffchain\" target=\"_blank\">BNB assets</a>, <a href=\"https://apidoc.tatum.io/tag/Blockchain-operations#operation/XlmAssetOffchain\" target=\"_blank\">XLM assets</a>, and <a href=\"https://apidoc.tatum.io/tag/Blockchain-operations#operation/XrpAssetOffchain\" target=\"_blank\">XRP assets</a></b> created via the Tatum platform</li>\n<li><b>Custom fungible tokens</b> (ERC-20 or equivalent, such as BEP-20 or TRC-10/20) registered on the Tatum platform; for more information, see <a href=\"https://docs.tatum.io/guides/ledger-and-off-chain/how-to-connect-custom-erc-20-token-to-the-ledger\" target=\"_blank\">our user documentation</a>\n<br/>The fungible tokens do not have direct faucets on the testnet. To use them in a testnet environment, you have to register a new fungible token in a virtual account (use <a href=\"https://apidoc.tatum.io/tag/Blockchain-operations/#operation/createTrc\" target=\"_blank\">this API</a> for TRON TRC-10/20 tokens and <a href=\"https://apidoc.tatum.io/tag/Blockchain-operations/#operation/registerErc20Token\" target=\"_blank\">this API</a> for any other tokens) and make sure that your tokens minted on the testnet are <a href=\"https://apidoc.tatum.io/tag/Blockchain-operations/#operation/storeTokenAddress\" target=\"_blank\">linked to the token smart contract</a>.</li>\n</ul>\n";
                    readonly maxLength: 40;
                    readonly minLength: 2;
                    readonly type: "string";
                    readonly examples: readonly ["BTC"];
                };
                readonly customer: {
                    readonly properties: {
                        readonly externalId: {
                            readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123654"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                            readonly default: "EUR";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly customerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                        readonly providerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                    };
                    readonly required: readonly ["externalId"];
                    readonly type: "object";
                    readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                };
                readonly compliant: {
                    readonly description: "Enable compliant checks. If this is enabled, it is impossible to create account if compliant check fails.";
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                };
                readonly accountCode: {
                    readonly description: "For bookkeeping to distinct account purpose.";
                    readonly maxLength: 50;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["AC_1011_B"];
                };
                readonly accountingCurrency: {
                    readonly description: "All transaction will be accounted in this currency for all accounts. Currency can be overridden per account level. If not set, customer accountingCurrency is used or EUR by default. ISO-4217";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["USD"];
                };
                readonly accountNumber: {
                    readonly description: "Account number from external system.";
                    readonly maxLength: 50;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["123456"];
                };
            };
            readonly required: readonly ["currency"];
            readonly type: "object";
        }];
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly properties: {
                readonly id: {
                    readonly description: "The ID of the virtual account";
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly balance: {
                    readonly properties: {
                        readonly accountBalance: {
                            readonly description: "All assets on the account, both available and blocked";
                            readonly type: "string";
                            readonly examples: readonly ["1000000"];
                        };
                        readonly availableBalance: {
                            readonly description: "The account balance minus the blocked assets; use the available balance to determine how much a customer can send or withdraw from their virtual account";
                            readonly type: "string";
                            readonly examples: readonly ["1000000"];
                        };
                    };
                    readonly type: "object";
                    readonly required: readonly ["accountBalance", "availableBalance"];
                };
                readonly currency: {
                    readonly description: "The currency of the virtual account";
                    readonly type: "string";
                    readonly examples: readonly ["BTC"];
                };
                readonly frozen: {
                    readonly description: "If set to \"true\", the virtual account is frozen";
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                };
                readonly active: {
                    readonly description: "If set to \"true\", the virtual account is active";
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                };
                readonly customerId: {
                    readonly description: "The ID of the customer (newly created or existing one) associated with the virtual account";
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly accountNumber: {
                    readonly description: "The number associated with the virtual account in an external system";
                    readonly maxLength: 50;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["123456"];
                };
                readonly accountCode: {
                    readonly description: "The code associated with the virtual account in an external system to designate the purpose of the account in bookkeeping";
                    readonly type: "string";
                    readonly examples: readonly ["03_ACC_01"];
                };
                readonly accountingCurrency: {
                    readonly description: "The currency in which all the transactions for all accounts will be accounted";
                    readonly type: "string";
                    readonly examples: readonly ["EUR"];
                };
                readonly xpub: {
                    readonly description: "The extended public key of the blockchain wallet associated with the virtual account; used to generate deposit addresses for the virtual account";
                    readonly type: "string";
                    readonly examples: readonly ["xpub6FB4LJzdKNkkpsjggFAGS2p34G48pqjtmSktmK2Ke3k1LKqm9ULsg8bGfDakYUrdhe2EHw5uGKX9DrMbrgYnVfDwrksT4ZVQ3vmgEruo3Ka"];
                };
            };
            readonly required: readonly ["id", "active", "frozen", "currency", "balance"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "compliance.country.btc.not.supported";
                        readonly type: "string";
                        readonly examples: readonly ["compliance.country.btc.not.supported"];
                    };
                    readonly message: {
                        readonly description: "Customer country not supported for BTC.";
                        readonly type: "string";
                        readonly examples: readonly ["Customer country not supported for BTC."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "compliance.country.eth.not.supported";
                        readonly type: "string";
                        readonly examples: readonly ["compliance.country.eth.not.supported"];
                    };
                    readonly message: {
                        readonly description: "Customer country not supported for ETH.";
                        readonly type: "string";
                        readonly examples: readonly ["Customer country not supported for ETH."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.blockchain.testnet";
                        readonly type: "string";
                        readonly examples: readonly ["account.blockchain.testnet"];
                    };
                    readonly message: {
                        readonly description: "Unable to create account, unsupported testnet blockchain.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to create account, unsupported testnet blockchain."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.present";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.present"];
                    };
                    readonly message: {
                        readonly description: "Unable to create ${account.currency} account with xpub.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to create ${account.currency} account with xpub."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "ledger.currency.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["ledger.currency.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to create an account, unsupported currency.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to create an account, unsupported currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.incompatible";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.incompatible"];
                    };
                    readonly message: {
                        readonly description: "Xpub not compatible with account currency.";
                        readonly type: "string";
                        readonly examples: readonly ["Xpub not compatible with account currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.incompatible";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.incompatible"];
                    };
                    readonly message: {
                        readonly description: "Xpub not compatible with account currency.";
                        readonly type: "string";
                        readonly examples: readonly ["Xpub not compatible with account currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.present";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.present"];
                    };
                    readonly message: {
                        readonly description: "Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead.";
                        readonly type: "string";
                        readonly examples: readonly ["Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                    readonly required: {
                        readonly "0": "errorCode";
                        readonly "1": "message";
                        readonly "2": "statusCode";
                    };
                    readonly type: "object";
                };
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "customer.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["customer.not.exists"];
                    };
                    readonly message: {
                        readonly description: "No customer with given external ID ${externalId} exists.";
                        readonly type: "string";
                        readonly examples: readonly ["No customer with given external ID ${externalId} exists."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "customer.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["customer.not.active"];
                    };
                    readonly message: {
                        readonly description: "Customer not active.";
                        readonly type: "string";
                        readonly examples: readonly ["Customer not active."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const CreateAccountBatch: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly accounts: {
                readonly type: "array";
                readonly items: {
                    readonly properties: {
                        readonly currency: {
                            readonly description: "<p>The currency for the virtual account</p>\n<ul>\n<li><b>Native blockchain assets:</b> ALGO, BCH, BNB, BSC, BTC, CELO, DOGE, EGLD, ETH, FLOW, KCS, KLAY, LTC, MATIC, ONE, SOL, TRON, VET, XDC, XLM, XRP</li>\n<li><b>Digital assets:</b> BADA, BAT, BBCH, BBTC, BDOT, BETH, BLTC, BUSD, BUSD_BSC, BXRP, CAKE, FREE, GMC, LEO, LINK, MKR, MMY, PAX, PAXG, TUSD, UNI, USD_BSC, USDC, USDC_MATIC, USDC_MATIC_NATIVE, USDT, USDT_TRON, WBNB, WBTC, XCON</li>\n<li><b><a href=\"https://apidoc.tatum.io/tag/Virtual-Currency\" target=\"_blank\">Virtual currency</a></b> registered on the Tatum platform and starting with the \"VC_\" prefix</li>\n<li><b><a href=\"https://apidoc.tatum.io/tag/Blockchain-operations#operation/BnbAssetOffchain\" target=\"_blank\">BNB assets</a>, <a href=\"https://apidoc.tatum.io/tag/Blockchain-operations#operation/XlmAssetOffchain\" target=\"_blank\">XLM assets</a>, and <a href=\"https://apidoc.tatum.io/tag/Blockchain-operations#operation/XrpAssetOffchain\" target=\"_blank\">XRP assets</a></b> created via the Tatum platform</li>\n<li><b>Custom fungible tokens</b> (ERC-20 or equivalent, such as BEP-20 or TRC-10/20) registered on the Tatum platform; for more information, see <a href=\"https://docs.tatum.io/guides/ledger-and-off-chain/how-to-connect-custom-erc-20-token-to-the-ledger\" target=\"_blank\">our user documentation</a>\n<br/>The fungible tokens do not have direct faucets on the testnet. To use them in a testnet environment, you have to register a new fungible token in a virtual account (use <a href=\"https://apidoc.tatum.io/tag/Blockchain-operations/#operation/createTrc\" target=\"_blank\">this API</a> for TRON TRC-10/20 tokens and <a href=\"https://apidoc.tatum.io/tag/Blockchain-operations/#operation/registerErc20Token\" target=\"_blank\">this API</a> for any other tokens) and make sure that your tokens minted on the testnet are <a href=\"https://apidoc.tatum.io/tag/Blockchain-operations/#operation/storeTokenAddress\" target=\"_blank\">linked to the token smart contract</a>.</li>\n</ul>\n";
                            readonly maxLength: 40;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["BTC"];
                        };
                        readonly customer: {
                            readonly properties: {
                                readonly externalId: {
                                    readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                                    readonly maxLength: 100;
                                    readonly minLength: 1;
                                    readonly type: "string";
                                    readonly examples: readonly ["123654"];
                                };
                                readonly accountingCurrency: {
                                    readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                                    readonly default: "EUR";
                                    readonly type: "string";
                                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                                    readonly examples: readonly ["USD"];
                                };
                                readonly customerCountry: {
                                    readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                                    readonly maxLength: 2;
                                    readonly minLength: 2;
                                    readonly type: "string";
                                    readonly examples: readonly ["US"];
                                };
                                readonly providerCountry: {
                                    readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                                    readonly maxLength: 2;
                                    readonly minLength: 2;
                                    readonly type: "string";
                                    readonly examples: readonly ["US"];
                                };
                            };
                            readonly required: readonly ["externalId"];
                            readonly type: "object";
                            readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                        };
                        readonly compliant: {
                            readonly description: "Enable compliant checks. If this is enabled, it is impossible to create account if compliant check fails.";
                            readonly type: "boolean";
                            readonly examples: readonly [false];
                        };
                        readonly accountCode: {
                            readonly description: "For bookkeeping to distinct account purpose.";
                            readonly maxLength: 50;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["AC_1011_B"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "All transaction will be accounted in this currency for all accounts. Currency can be overridden per account level. If not set, customer accountingCurrency is used or EUR by default. ISO-4217";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly accountNumber: {
                            readonly description: "Account number from external system.";
                            readonly maxLength: 50;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123456"];
                        };
                    };
                    readonly required: readonly ["currency"];
                    readonly type: "object";
                };
            };
        };
        readonly required: readonly ["accounts"];
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly properties: {
                    readonly id: {
                        readonly description: "The ID of the virtual account";
                        readonly type: "string";
                        readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    };
                    readonly balance: {
                        readonly properties: {
                            readonly accountBalance: {
                                readonly description: "All assets on the account, both available and blocked";
                                readonly type: "string";
                                readonly examples: readonly ["1000000"];
                            };
                            readonly availableBalance: {
                                readonly description: "The account balance minus the blocked assets; use the available balance to determine how much a customer can send or withdraw from their virtual account";
                                readonly type: "string";
                                readonly examples: readonly ["1000000"];
                            };
                        };
                        readonly type: "object";
                        readonly required: readonly ["accountBalance", "availableBalance"];
                    };
                    readonly currency: {
                        readonly description: "The currency of the virtual account";
                        readonly type: "string";
                        readonly examples: readonly ["BTC"];
                    };
                    readonly frozen: {
                        readonly description: "If set to \"true\", the virtual account is frozen";
                        readonly type: "boolean";
                        readonly examples: readonly [false];
                    };
                    readonly active: {
                        readonly description: "If set to \"true\", the virtual account is active";
                        readonly type: "boolean";
                        readonly examples: readonly [true];
                    };
                    readonly customerId: {
                        readonly description: "The ID of the customer (newly created or existing one) associated with the virtual account";
                        readonly type: "string";
                        readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    };
                    readonly accountNumber: {
                        readonly description: "The number associated with the virtual account in an external system";
                        readonly maxLength: 50;
                        readonly minLength: 1;
                        readonly type: "string";
                        readonly examples: readonly ["123456"];
                    };
                    readonly accountCode: {
                        readonly description: "The code associated with the virtual account in an external system to designate the purpose of the account in bookkeeping";
                        readonly type: "string";
                        readonly examples: readonly ["03_ACC_01"];
                    };
                    readonly accountingCurrency: {
                        readonly description: "The currency in which all the transactions for all accounts will be accounted";
                        readonly type: "string";
                        readonly examples: readonly ["EUR"];
                    };
                    readonly xpub: {
                        readonly description: "The extended public key of the blockchain wallet associated with the virtual account; used to generate deposit addresses for the virtual account";
                        readonly type: "string";
                        readonly examples: readonly ["xpub6FB4LJzdKNkkpsjggFAGS2p34G48pqjtmSktmK2Ke3k1LKqm9ULsg8bGfDakYUrdhe2EHw5uGKX9DrMbrgYnVfDwrksT4ZVQ3vmgEruo3Ka"];
                    };
                };
                readonly required: readonly ["id", "active", "frozen", "currency", "balance"];
                readonly type: "object";
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "compliance.country.btc.not.supported";
                        readonly type: "string";
                        readonly examples: readonly ["compliance.country.btc.not.supported"];
                    };
                    readonly message: {
                        readonly description: "Customer country not supported for BTC.";
                        readonly type: "string";
                        readonly examples: readonly ["Customer country not supported for BTC."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "compliance.country.eth.not.supported";
                        readonly type: "string";
                        readonly examples: readonly ["compliance.country.eth.not.supported"];
                    };
                    readonly message: {
                        readonly description: "Customer country not supported for ETH.";
                        readonly type: "string";
                        readonly examples: readonly ["Customer country not supported for ETH."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.blockchain.testnet";
                        readonly type: "string";
                        readonly examples: readonly ["account.blockchain.testnet"];
                    };
                    readonly message: {
                        readonly description: "Unable to create account, unsupported testnet blockchain.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to create account, unsupported testnet blockchain."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.present";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.present"];
                    };
                    readonly message: {
                        readonly description: "Unable to create ${account.currency} account with xpub.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to create ${account.currency} account with xpub."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "ledger.currency.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["ledger.currency.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to create an account, unsupported currency.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to create an account, unsupported currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.incompatible";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.incompatible"];
                    };
                    readonly message: {
                        readonly description: "Xpub not compatible with account currency.";
                        readonly type: "string";
                        readonly examples: readonly ["Xpub not compatible with account currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.incompatible";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.incompatible"];
                    };
                    readonly message: {
                        readonly description: "Xpub not compatible with account currency.";
                        readonly type: "string";
                        readonly examples: readonly ["Xpub not compatible with account currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.present";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.present"];
                    };
                    readonly message: {
                        readonly description: "Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead.";
                        readonly type: "string";
                        readonly examples: readonly ["Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                    readonly required: {
                        readonly "0": "errorCode";
                        readonly "1": "message";
                        readonly "2": "statusCode";
                    };
                    readonly type: "object";
                };
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "customer.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["customer.not.exists"];
                    };
                    readonly message: {
                        readonly description: "No customer with given external ID ${externalId} exists.";
                        readonly type: "string";
                        readonly examples: readonly ["No customer with given external ID ${externalId} exists."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "customer.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["customer.not.active"];
                    };
                    readonly message: {
                        readonly description: "Customer not active.";
                        readonly type: "string";
                        readonly examples: readonly ["Customer not active."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const CreateBep20: {
    readonly body: {
        readonly oneOf: readonly [{
            readonly properties: {
                readonly symbol: {
                    readonly description: "The name of the token; used as an identifier within the Tatum platform and as a currency symbol on the blockchain<br/>The token name that you specify here must be the same as the token name in the <code>symbol</code> parameter of the smart contract that you <a href=\"https://apidoc.tatum.io/tag/Fungible-Tokens-(ERC-20-or-compatible)#operation/Erc20Deploy\" target=\"_blank\">are going to deploy or have already deployed</a> for this token.";
                    readonly maxLength: 30;
                    readonly minLength: 1;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                };
                readonly supply: {
                    readonly description: "The supply of the token";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["1000000.0"];
                };
                readonly decimals: {
                    readonly description: "The number of decimal places that the token has";
                    readonly minimum: 0;
                    readonly type: "number";
                    readonly examples: readonly [8];
                };
                readonly description: {
                    readonly description: "The description of the token; used as a description within the Tatum platform and as a currency name on the blockchain";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["My Public Token"];
                };
                readonly xpub: {
                    readonly description: "The extended public key of the wallet from which a deposit address for the virtual account will be generated<br/><b>NOTE:</b> On Solana, you only can assign an existing address to the virtual account; use the <code>Erc20Address</code> schema of this API.";
                    readonly maxLength: 150;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["xpub6EsCk1uU6cJzqvP9CdsTiJwT2rF748YkPnhv5Qo8q44DG7nn2vbyt48YRsNSUYS44jFCW9gwvD9kLQu9AuqXpTpM1c5hgg9PsuBLdeNncid"];
                };
                readonly derivationIndex: {
                    readonly description: "The derivation index to use together with the extended public key to generate the deposit address";
                    readonly format: "int32";
                    readonly type: "integer";
                    readonly maximum: 2147483647;
                    readonly examples: readonly [0];
                    readonly minimum: -2147483648;
                };
                readonly basePair: {
                    readonly description: "The base pair for the virtual currency that represents the token; used to calculate the value of a transaction";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["EUR"];
                };
                readonly baseRate: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly minimum: 0;
                    readonly description: "The exchange rate for the base pair; one unit of the created virtual currency equals 1 unit of <code>basePair</code>*<code>baseRate</code>";
                    readonly examples: readonly [1];
                };
                readonly customer: {
                    readonly properties: {
                        readonly externalId: {
                            readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123654"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                            readonly default: "EUR";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly customerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                        readonly providerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                    };
                    readonly required: readonly ["externalId"];
                    readonly type: "object";
                    readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                };
                readonly accountingCurrency: {
                    readonly description: "The ISO 4217 code of the currency in which all transactions for the created virtual account will be billed\n\nDefault: `USD`";
                    readonly default: "USD";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["USD"];
                };
            };
            readonly required: readonly ["symbol", "supply", "decimals", "description", "basePair", "derivationIndex", "xpub"];
            readonly type: "object";
        }, {
            readonly properties: {
                readonly symbol: {
                    readonly description: "The name of the token; used as an identifier within the Tatum platform and as a currency symbol on the blockchain<br/>The token name that you specify here must be the same as the token name in the <code>symbol</code> parameter of the smart contract that you <a href=\"https://apidoc.tatum.io/tag/Fungible-Tokens-(ERC-20-or-compatible)#operation/Erc20Deploy\" target=\"_blank\">are going to deploy or have already deployed</a> for this token.";
                    readonly maxLength: 30;
                    readonly minLength: 1;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                };
                readonly supply: {
                    readonly description: "The supply of the token";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["1000000.0"];
                };
                readonly decimals: {
                    readonly description: "The number of decimal places that the token has";
                    readonly minimum: 0;
                    readonly type: "number";
                    readonly examples: readonly [8];
                };
                readonly description: {
                    readonly description: "The description of the token; used as a description within the Tatum platform and as a currency name on the blockchain";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["My Public Token"];
                };
                readonly address: {
                    readonly description: "The blockchain address to be assigned to the virtual account as a deposit address";
                    readonly maxLength: 44;
                    readonly minLength: 42;
                    readonly type: "string";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly basePair: {
                    readonly description: "The base pair for the virtual currency that represents the token; used to calculate the value of a transaction";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["EUR"];
                };
                readonly baseRate: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly minimum: 0;
                    readonly description: "The exchange rate for the base pair; one unit of the created virtual currency equals 1 unit of <code>basePair</code>*<code>baseRate</code>";
                    readonly examples: readonly [1];
                };
                readonly customer: {
                    readonly properties: {
                        readonly externalId: {
                            readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123654"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                            readonly default: "EUR";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly customerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                        readonly providerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                    };
                    readonly required: readonly ["externalId"];
                    readonly type: "object";
                    readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                };
                readonly accountingCurrency: {
                    readonly description: "AThe ISO 4217 code of the currency in which all transactions for the created virtual account will be billed\n\nDefault: `USD`";
                    readonly default: "USD";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["USD"];
                };
            };
            readonly required: readonly ["symbol", "supply", "decimals", "description", "basePair", "address"];
            readonly type: "object";
        }];
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly properties: {
                readonly accountId: {
                    readonly description: "The ID of the created virtual account with the currency set to the token name (the <code>symbol</code> parameter of the request body)<br/>The token supply will be created as soon as the token smart contract is deployed on the blockchain.";
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly address: {
                    readonly description: "The deposit address of the virtual account";
                    readonly type: "string";
                    readonly examples: readonly ["0xa7673161CbfE0116A4De9E341f8465940c2211d4"];
                };
            };
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.symbol.prefix";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.symbol.prefix"];
                    };
                    readonly message: {
                        readonly description: "ERC20 token cannot start with VC_.";
                        readonly type: "string";
                        readonly examples: readonly ["ERC20 token cannot start with VC_."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.address.xpub.both";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.address.xpub.both"];
                    };
                    readonly message: {
                        readonly description: "Either xpub or address must be present, not both.";
                        readonly type: "string";
                        readonly examples: readonly ["Either xpub or address must be present, not both."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.address.xpub.missing";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.address.xpub.missing"];
                    };
                    readonly message: {
                        readonly description: "Either xpub or address must be present.";
                        readonly type: "string";
                        readonly examples: readonly ["Either xpub or address must be present."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.recipient.format";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.recipient.format"];
                    };
                    readonly message: {
                        readonly description: "Recipient blockchain address has incorrect format.";
                        readonly type: "string";
                        readonly examples: readonly ["Recipient blockchain address has incorrect format."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.duplicate.name";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.duplicate.name"];
                    };
                    readonly message: {
                        readonly description: "ERC20 token with given name already exists.";
                        readonly type: "string";
                        readonly examples: readonly ["ERC20 token with given name already exists."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "customer.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["customer.not.active"];
                    };
                    readonly message: {
                        readonly description: "Customer not active.";
                        readonly type: "string";
                        readonly examples: readonly ["Customer not active."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "virtual.creation.error";
                        readonly type: "string";
                        readonly examples: readonly ["virtual.creation.error"];
                    };
                    readonly message: {
                        readonly description: "It is not possible to create virtual currency.";
                        readonly type: "string";
                        readonly examples: readonly ["It is not possible to create virtual currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["account.not.exists"];
                    };
                    readonly message: {
                        readonly description: "No such account.";
                        readonly type: "string";
                        readonly examples: readonly ["No such account."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.missing";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.missing"];
                    };
                    readonly message: {
                        readonly description: "No xpub assigned to account, it is not possible to generate address. Use assignAddress method instead.";
                        readonly type: "string";
                        readonly examples: readonly ["No xpub assigned to account, it is not possible to generate address. Use assignAddress method instead."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "xpub.used";
                        readonly type: "string";
                        readonly examples: readonly ["xpub.used"];
                    };
                    readonly message: {
                        readonly description: "XPub already used registered within Tatum";
                        readonly type: "string";
                        readonly examples: readonly ["XPub already used registered within Tatum"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "Address.index.used";
                        readonly type: "string";
                        readonly examples: readonly ["address.index.used"];
                    };
                    readonly message: {
                        readonly description: "Unable to create address, derivation index is already used.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to create address, derivation index is already used."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "offchain.not.supported";
                        readonly type: "string";
                        readonly examples: readonly ["offchain.not.supported"];
                    };
                    readonly message: {
                        readonly description: "Offchain not supported for account with ${account.currency} currency.";
                        readonly type: "string";
                        readonly examples: readonly ["Offchain not supported for account with ${account.currency} currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.incompatible";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.incompatible"];
                    };
                    readonly message: {
                        readonly description: "Xpub not compatible with account currency.";
                        readonly type: "string";
                        readonly examples: readonly ["Xpub not compatible with account currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.present";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.present"];
                    };
                    readonly message: {
                        readonly description: "Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead.";
                        readonly type: "string";
                        readonly examples: readonly ["Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                    readonly required: {
                        readonly "0": "errorCode";
                        readonly "1": "message";
                        readonly "2": "statusCode";
                    };
                    readonly type: "object";
                };
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "vc.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["vc.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such virtual currency.";
                        readonly type: "string";
                        readonly examples: readonly ["No such virtual currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "Address.used";
                        readonly type: "string";
                        readonly examples: readonly ["address.used"];
                    };
                    readonly message: {
                        readonly description: "Address and currency already in use.";
                        readonly type: "string";
                        readonly examples: readonly ["Address and currency already in use."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.present";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.present"];
                    };
                    readonly message: {
                        readonly description: "Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead.";
                        readonly type: "string";
                        readonly examples: readonly ["Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                    readonly required: {
                        readonly "0": "errorCode";
                        readonly "1": "message";
                        readonly "2": "statusCode";
                    };
                    readonly type: "object";
                };
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.erc20.unsupported";
                        readonly type: "string";
                        readonly examples: readonly ["eth.erc20.unsupported"];
                    };
                    readonly message: {
                        readonly description: "Unsupported ETH ERC20 blockchain.";
                        readonly type: "string";
                        readonly examples: readonly ["Unsupported ETH ERC20 blockchain."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const CreateCeloErc20: {
    readonly body: {
        readonly oneOf: readonly [{
            readonly properties: {
                readonly symbol: {
                    readonly description: "The name of the token; used as an identifier within the Tatum platform and as a currency symbol on the blockchain<br/>The token name that you specify here must be the same as the token name in the <code>symbol</code> parameter of the smart contract that you <a href=\"https://apidoc.tatum.io/tag/Fungible-Tokens-(ERC-20-or-compatible)#operation/Erc20Deploy\" target=\"_blank\">are going to deploy or have already deployed</a> for this token.";
                    readonly maxLength: 30;
                    readonly minLength: 1;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                };
                readonly supply: {
                    readonly description: "The supply of the token";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["1000000.0"];
                };
                readonly decimals: {
                    readonly description: "The number of decimal places that the token has";
                    readonly minimum: 0;
                    readonly type: "number";
                    readonly examples: readonly [8];
                };
                readonly description: {
                    readonly description: "The description of the token; used as a description within the Tatum platform and as a currency name on the blockchain";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["My Public Token"];
                };
                readonly xpub: {
                    readonly description: "The extended public key of the wallet from which a deposit address for the virtual account will be generated<br/><b>NOTE:</b> On Solana, you only can assign an existing address to the virtual account; use the <code>Erc20Address</code> schema of this API.";
                    readonly maxLength: 150;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["xpub6EsCk1uU6cJzqvP9CdsTiJwT2rF748YkPnhv5Qo8q44DG7nn2vbyt48YRsNSUYS44jFCW9gwvD9kLQu9AuqXpTpM1c5hgg9PsuBLdeNncid"];
                };
                readonly derivationIndex: {
                    readonly description: "The derivation index to use together with the extended public key to generate the deposit address";
                    readonly format: "int32";
                    readonly type: "integer";
                    readonly maximum: 2147483647;
                    readonly examples: readonly [0];
                    readonly minimum: -2147483648;
                };
                readonly basePair: {
                    readonly description: "The base pair for the virtual currency that represents the token; used to calculate the value of a transaction";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["EUR"];
                };
                readonly baseRate: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly minimum: 0;
                    readonly description: "The exchange rate for the base pair; one unit of the created virtual currency equals 1 unit of <code>basePair</code>*<code>baseRate</code>";
                    readonly examples: readonly [1];
                };
                readonly customer: {
                    readonly properties: {
                        readonly externalId: {
                            readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123654"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                            readonly default: "EUR";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly customerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                        readonly providerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                    };
                    readonly required: readonly ["externalId"];
                    readonly type: "object";
                    readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                };
                readonly accountingCurrency: {
                    readonly description: "The ISO 4217 code of the currency in which all transactions for the created virtual account will be billed\n\nDefault: `USD`";
                    readonly default: "USD";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["USD"];
                };
            };
            readonly required: readonly ["symbol", "supply", "decimals", "description", "basePair", "derivationIndex", "xpub"];
            readonly type: "object";
        }, {
            readonly properties: {
                readonly symbol: {
                    readonly description: "The name of the token; used as an identifier within the Tatum platform and as a currency symbol on the blockchain<br/>The token name that you specify here must be the same as the token name in the <code>symbol</code> parameter of the smart contract that you <a href=\"https://apidoc.tatum.io/tag/Fungible-Tokens-(ERC-20-or-compatible)#operation/Erc20Deploy\" target=\"_blank\">are going to deploy or have already deployed</a> for this token.";
                    readonly maxLength: 30;
                    readonly minLength: 1;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                };
                readonly supply: {
                    readonly description: "The supply of the token";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["1000000.0"];
                };
                readonly decimals: {
                    readonly description: "The number of decimal places that the token has";
                    readonly minimum: 0;
                    readonly type: "number";
                    readonly examples: readonly [8];
                };
                readonly description: {
                    readonly description: "The description of the token; used as a description within the Tatum platform and as a currency name on the blockchain";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["My Public Token"];
                };
                readonly address: {
                    readonly description: "The blockchain address to be assigned to the virtual account as a deposit address";
                    readonly maxLength: 44;
                    readonly minLength: 42;
                    readonly type: "string";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly basePair: {
                    readonly description: "The base pair for the virtual currency that represents the token; used to calculate the value of a transaction";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["EUR"];
                };
                readonly baseRate: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly minimum: 0;
                    readonly description: "The exchange rate for the base pair; one unit of the created virtual currency equals 1 unit of <code>basePair</code>*<code>baseRate</code>";
                    readonly examples: readonly [1];
                };
                readonly customer: {
                    readonly properties: {
                        readonly externalId: {
                            readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123654"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                            readonly default: "EUR";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly customerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                        readonly providerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                    };
                    readonly required: readonly ["externalId"];
                    readonly type: "object";
                    readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                };
                readonly accountingCurrency: {
                    readonly description: "AThe ISO 4217 code of the currency in which all transactions for the created virtual account will be billed\n\nDefault: `USD`";
                    readonly default: "USD";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["USD"];
                };
            };
            readonly required: readonly ["symbol", "supply", "decimals", "description", "basePair", "address"];
            readonly type: "object";
        }];
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly properties: {
                readonly accountId: {
                    readonly description: "The ID of the created virtual account with the currency set to the token name (the <code>symbol</code> parameter of the request body)<br/>The token supply will be created as soon as the token smart contract is deployed on the blockchain.";
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly address: {
                    readonly description: "The deposit address of the virtual account";
                    readonly type: "string";
                    readonly examples: readonly ["0xa7673161CbfE0116A4De9E341f8465940c2211d4"];
                };
            };
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.symbol.prefix";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.symbol.prefix"];
                    };
                    readonly message: {
                        readonly description: "ERC20 token cannot start with VC_.";
                        readonly type: "string";
                        readonly examples: readonly ["ERC20 token cannot start with VC_."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.address.xpub.both";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.address.xpub.both"];
                    };
                    readonly message: {
                        readonly description: "Either xpub or address must be present, not both.";
                        readonly type: "string";
                        readonly examples: readonly ["Either xpub or address must be present, not both."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.address.xpub.missing";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.address.xpub.missing"];
                    };
                    readonly message: {
                        readonly description: "Either xpub or address must be present.";
                        readonly type: "string";
                        readonly examples: readonly ["Either xpub or address must be present."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.recipient.format";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.recipient.format"];
                    };
                    readonly message: {
                        readonly description: "Recipient blockchain address has incorrect format.";
                        readonly type: "string";
                        readonly examples: readonly ["Recipient blockchain address has incorrect format."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.duplicate.name";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.duplicate.name"];
                    };
                    readonly message: {
                        readonly description: "ERC20 token with given name already exists.";
                        readonly type: "string";
                        readonly examples: readonly ["ERC20 token with given name already exists."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "customer.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["customer.not.active"];
                    };
                    readonly message: {
                        readonly description: "Customer not active.";
                        readonly type: "string";
                        readonly examples: readonly ["Customer not active."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "virtual.creation.error";
                        readonly type: "string";
                        readonly examples: readonly ["virtual.creation.error"];
                    };
                    readonly message: {
                        readonly description: "It is not possible to create virtual currency.";
                        readonly type: "string";
                        readonly examples: readonly ["It is not possible to create virtual currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["account.not.exists"];
                    };
                    readonly message: {
                        readonly description: "No such account.";
                        readonly type: "string";
                        readonly examples: readonly ["No such account."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.missing";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.missing"];
                    };
                    readonly message: {
                        readonly description: "No xpub assigned to account, it is not possible to generate address. Use assignAddress method instead.";
                        readonly type: "string";
                        readonly examples: readonly ["No xpub assigned to account, it is not possible to generate address. Use assignAddress method instead."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "xpub.used";
                        readonly type: "string";
                        readonly examples: readonly ["xpub.used"];
                    };
                    readonly message: {
                        readonly description: "XPub already used registered within Tatum";
                        readonly type: "string";
                        readonly examples: readonly ["XPub already used registered within Tatum"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "Address.index.used";
                        readonly type: "string";
                        readonly examples: readonly ["address.index.used"];
                    };
                    readonly message: {
                        readonly description: "Unable to create address, derivation index is already used.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to create address, derivation index is already used."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "offchain.not.supported";
                        readonly type: "string";
                        readonly examples: readonly ["offchain.not.supported"];
                    };
                    readonly message: {
                        readonly description: "Offchain not supported for account with ${account.currency} currency.";
                        readonly type: "string";
                        readonly examples: readonly ["Offchain not supported for account with ${account.currency} currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.incompatible";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.incompatible"];
                    };
                    readonly message: {
                        readonly description: "Xpub not compatible with account currency.";
                        readonly type: "string";
                        readonly examples: readonly ["Xpub not compatible with account currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.present";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.present"];
                    };
                    readonly message: {
                        readonly description: "Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead.";
                        readonly type: "string";
                        readonly examples: readonly ["Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                    readonly required: {
                        readonly "0": "errorCode";
                        readonly "1": "message";
                        readonly "2": "statusCode";
                    };
                    readonly type: "object";
                };
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "vc.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["vc.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such virtual currency.";
                        readonly type: "string";
                        readonly examples: readonly ["No such virtual currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "Address.used";
                        readonly type: "string";
                        readonly examples: readonly ["address.used"];
                    };
                    readonly message: {
                        readonly description: "Address and currency already in use.";
                        readonly type: "string";
                        readonly examples: readonly ["Address and currency already in use."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.present";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.present"];
                    };
                    readonly message: {
                        readonly description: "Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead.";
                        readonly type: "string";
                        readonly examples: readonly ["Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                    readonly required: {
                        readonly "0": "errorCode";
                        readonly "1": "message";
                        readonly "2": "statusCode";
                    };
                    readonly type: "object";
                };
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.erc20.unsupported";
                        readonly type: "string";
                        readonly examples: readonly ["eth.erc20.unsupported"];
                    };
                    readonly message: {
                        readonly description: "Unsupported ETH ERC20 blockchain.";
                        readonly type: "string";
                        readonly examples: readonly ["Unsupported ETH ERC20 blockchain."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const CreateCurrency: {
    readonly body: {
        readonly properties: {
            readonly name: {
                readonly description: "Virtual currency name. Must be prefixed with 'VC_'.";
                readonly maxLength: 30;
                readonly pattern: "^[a-zA-Z0-9_]+$";
                readonly minLength: 1;
                readonly type: "string";
                readonly examples: readonly ["VC_VIRTUAL"];
            };
            readonly supply: {
                readonly description: "Supply of virtual currency.";
                readonly maxLength: 38;
                readonly minLength: 1;
                readonly type: "string";
                readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                readonly examples: readonly ["1000000"];
            };
            readonly basePair: {
                readonly description: "Base pair for virtual currency. Transaction value will be calculated according to this base pair. e.g. 1 VC_VIRTUAL is equal to 1 BTC, if basePair is set to BTC.";
                readonly type: "string";
                readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                readonly examples: readonly ["BTC"];
            };
            readonly baseRate: {
                readonly type: "number";
                readonly default: 1;
                readonly minimum: 0;
                readonly description: "Exchange rate of the base pair. Each unit of the created curency will represent value of baseRate*1 basePair.";
                readonly examples: readonly [1];
            };
            readonly customer: {
                readonly properties: {
                    readonly externalId: {
                        readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                        readonly maxLength: 100;
                        readonly minLength: 1;
                        readonly type: "string";
                        readonly examples: readonly ["123654"];
                    };
                    readonly accountingCurrency: {
                        readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                        readonly default: "EUR";
                        readonly type: "string";
                        readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                        readonly examples: readonly ["USD"];
                    };
                    readonly customerCountry: {
                        readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                        readonly maxLength: 2;
                        readonly minLength: 2;
                        readonly type: "string";
                        readonly examples: readonly ["US"];
                    };
                    readonly providerCountry: {
                        readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                        readonly maxLength: 2;
                        readonly minLength: 2;
                        readonly type: "string";
                        readonly examples: readonly ["US"];
                    };
                };
                readonly required: readonly ["externalId"];
                readonly type: "object";
                readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
            };
            readonly description: {
                readonly description: "Used as a description within Tatum system.";
                readonly maxLength: 100;
                readonly minLength: 1;
                readonly type: "string";
                readonly examples: readonly ["My Virtual Token description."];
            };
            readonly accountCode: {
                readonly description: "For bookkeeping to distinct account purpose.";
                readonly maxLength: 50;
                readonly minLength: 1;
                readonly type: "string";
                readonly examples: readonly ["AC_1011_B"];
            };
            readonly accountNumber: {
                readonly description: "Account number from external system.";
                readonly type: "string";
                readonly minLength: 1;
                readonly maxLength: 50;
                readonly examples: readonly ["1234567890"];
            };
            readonly accountingCurrency: {
                readonly description: "All transaction will be billed in this currency for created account associated with this currency. If not set, EUR is used. ISO-4217";
                readonly type: "string";
                readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                readonly examples: readonly ["USD"];
            };
        };
        readonly required: readonly ["basePair", "name", "supply"];
        readonly type: "object";
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly properties: {
                readonly id: {
                    readonly description: "The ID of the virtual account";
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly balance: {
                    readonly properties: {
                        readonly accountBalance: {
                            readonly description: "All assets on the account, both available and blocked";
                            readonly type: "string";
                            readonly examples: readonly ["1000000"];
                        };
                        readonly availableBalance: {
                            readonly description: "The account balance minus the blocked assets; use the available balance to determine how much a customer can send or withdraw from their virtual account";
                            readonly type: "string";
                            readonly examples: readonly ["1000000"];
                        };
                    };
                    readonly type: "object";
                    readonly required: readonly ["accountBalance", "availableBalance"];
                };
                readonly currency: {
                    readonly description: "The currency of the virtual account";
                    readonly type: "string";
                    readonly examples: readonly ["BTC"];
                };
                readonly frozen: {
                    readonly description: "If set to \"true\", the virtual account is frozen";
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                };
                readonly active: {
                    readonly description: "If set to \"true\", the virtual account is active";
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                };
                readonly customerId: {
                    readonly description: "The ID of the customer (newly created or existing one) associated with the virtual account";
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly accountNumber: {
                    readonly description: "The number associated with the virtual account in an external system";
                    readonly maxLength: 50;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["123456"];
                };
                readonly accountCode: {
                    readonly description: "The code associated with the virtual account in an external system to designate the purpose of the account in bookkeeping";
                    readonly type: "string";
                    readonly examples: readonly ["03_ACC_01"];
                };
                readonly accountingCurrency: {
                    readonly description: "The currency in which all the transactions for all accounts will be accounted";
                    readonly type: "string";
                    readonly examples: readonly ["EUR"];
                };
                readonly xpub: {
                    readonly description: "The extended public key of the blockchain wallet associated with the virtual account; used to generate deposit addresses for the virtual account";
                    readonly type: "string";
                    readonly examples: readonly ["xpub6FB4LJzdKNkkpsjggFAGS2p34G48pqjtmSktmK2Ke3k1LKqm9ULsg8bGfDakYUrdhe2EHw5uGKX9DrMbrgYnVfDwrksT4ZVQ3vmgEruo3Ka"];
                };
            };
            readonly required: readonly ["id", "active", "frozen", "currency", "balance"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "virtual.name.prefix";
                        readonly type: "string";
                        readonly examples: readonly ["virtual.name.prefix"];
                    };
                    readonly message: {
                        readonly description: "Virtual currency has wrong name, must start with VC_.";
                        readonly type: "string";
                        readonly examples: readonly ["Virtual currency has wrong name, must start with VC_."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "virtual.duplicate";
                        readonly type: "string";
                        readonly examples: readonly ["virtual.duplicate"];
                    };
                    readonly message: {
                        readonly description: "Virtual currency with given name already exists.";
                        readonly type: "string";
                        readonly examples: readonly ["Virtual currency with given name already exists."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "virtual.creation.error";
                        readonly type: "string";
                        readonly examples: readonly ["virtual.creation.error"];
                    };
                    readonly message: {
                        readonly description: "It is not possible to create virtual currency.";
                        readonly type: "string";
                        readonly examples: readonly ["It is not possible to create virtual currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const CreateErc20: {
    readonly body: {
        readonly oneOf: readonly [{
            readonly properties: {
                readonly symbol: {
                    readonly description: "The name of the token; used as an identifier within the Tatum platform and as a currency symbol on the blockchain<br/>The token name that you specify here must be the same as the token name in the <code>symbol</code> parameter of the smart contract that you <a href=\"https://apidoc.tatum.io/tag/Fungible-Tokens-(ERC-20-or-compatible)#operation/Erc20Deploy\" target=\"_blank\">are going to deploy or have already deployed</a> for this token.";
                    readonly maxLength: 30;
                    readonly minLength: 1;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                };
                readonly supply: {
                    readonly description: "The supply of the token";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["1000000.0"];
                };
                readonly decimals: {
                    readonly description: "The number of decimal places that the token has";
                    readonly minimum: 0;
                    readonly type: "number";
                    readonly examples: readonly [8];
                };
                readonly description: {
                    readonly description: "The description of the token; used as a description within the Tatum platform and as a currency name on the blockchain";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["My Public Token"];
                };
                readonly xpub: {
                    readonly description: "The extended public key of the wallet from which a deposit address for the virtual account will be generated<br/><b>NOTE:</b> On Solana, you only can assign an existing address to the virtual account; use the <code>Erc20Address</code> schema of this API.";
                    readonly maxLength: 150;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["xpub6EsCk1uU6cJzqvP9CdsTiJwT2rF748YkPnhv5Qo8q44DG7nn2vbyt48YRsNSUYS44jFCW9gwvD9kLQu9AuqXpTpM1c5hgg9PsuBLdeNncid"];
                };
                readonly derivationIndex: {
                    readonly description: "The derivation index to use together with the extended public key to generate the deposit address";
                    readonly format: "int32";
                    readonly type: "integer";
                    readonly maximum: 2147483647;
                    readonly examples: readonly [0];
                    readonly minimum: -2147483648;
                };
                readonly basePair: {
                    readonly description: "The base pair for the virtual currency that represents the token; used to calculate the value of a transaction";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["EUR"];
                };
                readonly baseRate: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly minimum: 0;
                    readonly description: "The exchange rate for the base pair; one unit of the created virtual currency equals 1 unit of <code>basePair</code>*<code>baseRate</code>";
                    readonly examples: readonly [1];
                };
                readonly customer: {
                    readonly properties: {
                        readonly externalId: {
                            readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123654"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                            readonly default: "EUR";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly customerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                        readonly providerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                    };
                    readonly required: readonly ["externalId"];
                    readonly type: "object";
                    readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                };
                readonly accountingCurrency: {
                    readonly description: "The ISO 4217 code of the currency in which all transactions for the created virtual account will be billed\n\nDefault: `USD`";
                    readonly default: "USD";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["USD"];
                };
            };
            readonly required: readonly ["symbol", "supply", "decimals", "description", "basePair", "derivationIndex", "xpub"];
            readonly type: "object";
        }, {
            readonly properties: {
                readonly symbol: {
                    readonly description: "The name of the token; used as an identifier within the Tatum platform and as a currency symbol on the blockchain<br/>The token name that you specify here must be the same as the token name in the <code>symbol</code> parameter of the smart contract that you <a href=\"https://apidoc.tatum.io/tag/Fungible-Tokens-(ERC-20-or-compatible)#operation/Erc20Deploy\" target=\"_blank\">are going to deploy or have already deployed</a> for this token.";
                    readonly maxLength: 30;
                    readonly minLength: 1;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                };
                readonly supply: {
                    readonly description: "The supply of the token";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["1000000.0"];
                };
                readonly decimals: {
                    readonly description: "The number of decimal places that the token has";
                    readonly minimum: 0;
                    readonly type: "number";
                    readonly examples: readonly [8];
                };
                readonly description: {
                    readonly description: "The description of the token; used as a description within the Tatum platform and as a currency name on the blockchain";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["My Public Token"];
                };
                readonly address: {
                    readonly description: "The blockchain address to be assigned to the virtual account as a deposit address";
                    readonly maxLength: 44;
                    readonly minLength: 42;
                    readonly type: "string";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly basePair: {
                    readonly description: "The base pair for the virtual currency that represents the token; used to calculate the value of a transaction";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["EUR"];
                };
                readonly baseRate: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly minimum: 0;
                    readonly description: "The exchange rate for the base pair; one unit of the created virtual currency equals 1 unit of <code>basePair</code>*<code>baseRate</code>";
                    readonly examples: readonly [1];
                };
                readonly customer: {
                    readonly properties: {
                        readonly externalId: {
                            readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123654"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                            readonly default: "EUR";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly customerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                        readonly providerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                    };
                    readonly required: readonly ["externalId"];
                    readonly type: "object";
                    readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                };
                readonly accountingCurrency: {
                    readonly description: "AThe ISO 4217 code of the currency in which all transactions for the created virtual account will be billed\n\nDefault: `USD`";
                    readonly default: "USD";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["USD"];
                };
            };
            readonly required: readonly ["symbol", "supply", "decimals", "description", "basePair", "address"];
            readonly type: "object";
        }];
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly properties: {
                readonly accountId: {
                    readonly description: "The ID of the created virtual account with the currency set to the token name (the <code>symbol</code> parameter of the request body)<br/>The token supply will be created as soon as the token smart contract is deployed on the blockchain.";
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly address: {
                    readonly description: "The deposit address of the virtual account";
                    readonly type: "string";
                    readonly examples: readonly ["0xa7673161CbfE0116A4De9E341f8465940c2211d4"];
                };
            };
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.symbol.prefix";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.symbol.prefix"];
                    };
                    readonly message: {
                        readonly description: "ERC20 token cannot start with VC_.";
                        readonly type: "string";
                        readonly examples: readonly ["ERC20 token cannot start with VC_."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.address.xpub.both";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.address.xpub.both"];
                    };
                    readonly message: {
                        readonly description: "Either xpub or address must be present, not both.";
                        readonly type: "string";
                        readonly examples: readonly ["Either xpub or address must be present, not both."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.address.xpub.missing";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.address.xpub.missing"];
                    };
                    readonly message: {
                        readonly description: "Either xpub or address must be present.";
                        readonly type: "string";
                        readonly examples: readonly ["Either xpub or address must be present."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.recipient.format";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.recipient.format"];
                    };
                    readonly message: {
                        readonly description: "Recipient blockchain address has incorrect format.";
                        readonly type: "string";
                        readonly examples: readonly ["Recipient blockchain address has incorrect format."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.duplicate.name";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.duplicate.name"];
                    };
                    readonly message: {
                        readonly description: "ERC20 token with given name already exists.";
                        readonly type: "string";
                        readonly examples: readonly ["ERC20 token with given name already exists."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "customer.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["customer.not.active"];
                    };
                    readonly message: {
                        readonly description: "Customer not active.";
                        readonly type: "string";
                        readonly examples: readonly ["Customer not active."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "virtual.creation.error";
                        readonly type: "string";
                        readonly examples: readonly ["virtual.creation.error"];
                    };
                    readonly message: {
                        readonly description: "It is not possible to create virtual currency.";
                        readonly type: "string";
                        readonly examples: readonly ["It is not possible to create virtual currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["account.not.exists"];
                    };
                    readonly message: {
                        readonly description: "No such account.";
                        readonly type: "string";
                        readonly examples: readonly ["No such account."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.missing";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.missing"];
                    };
                    readonly message: {
                        readonly description: "No xpub assigned to account, it is not possible to generate address. Use assignAddress method instead.";
                        readonly type: "string";
                        readonly examples: readonly ["No xpub assigned to account, it is not possible to generate address. Use assignAddress method instead."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "xpub.used";
                        readonly type: "string";
                        readonly examples: readonly ["xpub.used"];
                    };
                    readonly message: {
                        readonly description: "XPub already used registered within Tatum";
                        readonly type: "string";
                        readonly examples: readonly ["XPub already used registered within Tatum"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "Address.index.used";
                        readonly type: "string";
                        readonly examples: readonly ["address.index.used"];
                    };
                    readonly message: {
                        readonly description: "Unable to create address, derivation index is already used.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to create address, derivation index is already used."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "offchain.not.supported";
                        readonly type: "string";
                        readonly examples: readonly ["offchain.not.supported"];
                    };
                    readonly message: {
                        readonly description: "Offchain not supported for account with ${account.currency} currency.";
                        readonly type: "string";
                        readonly examples: readonly ["Offchain not supported for account with ${account.currency} currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.incompatible";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.incompatible"];
                    };
                    readonly message: {
                        readonly description: "Xpub not compatible with account currency.";
                        readonly type: "string";
                        readonly examples: readonly ["Xpub not compatible with account currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.present";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.present"];
                    };
                    readonly message: {
                        readonly description: "Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead.";
                        readonly type: "string";
                        readonly examples: readonly ["Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                    readonly required: {
                        readonly "0": "errorCode";
                        readonly "1": "message";
                        readonly "2": "statusCode";
                    };
                    readonly type: "object";
                };
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "vc.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["vc.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such virtual currency.";
                        readonly type: "string";
                        readonly examples: readonly ["No such virtual currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "Address.used";
                        readonly type: "string";
                        readonly examples: readonly ["address.used"];
                    };
                    readonly message: {
                        readonly description: "Address and currency already in use.";
                        readonly type: "string";
                        readonly examples: readonly ["Address and currency already in use."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.present";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.present"];
                    };
                    readonly message: {
                        readonly description: "Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead.";
                        readonly type: "string";
                        readonly examples: readonly ["Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                    readonly required: {
                        readonly "0": "errorCode";
                        readonly "1": "message";
                        readonly "2": "statusCode";
                    };
                    readonly type: "object";
                };
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.erc20.unsupported";
                        readonly type: "string";
                        readonly examples: readonly ["eth.erc20.unsupported"];
                    };
                    readonly message: {
                        readonly description: "Unsupported ETH ERC20 blockchain.";
                        readonly type: "string";
                        readonly examples: readonly ["Unsupported ETH ERC20 blockchain."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const CreateHrm20: {
    readonly body: {
        readonly oneOf: readonly [{
            readonly properties: {
                readonly symbol: {
                    readonly description: "The name of the token; used as an identifier within the Tatum platform and as a currency symbol on the blockchain<br/>The token name that you specify here must be the same as the token name in the <code>symbol</code> parameter of the smart contract that you <a href=\"https://apidoc.tatum.io/tag/Fungible-Tokens-(ERC-20-or-compatible)#operation/Erc20Deploy\" target=\"_blank\">are going to deploy or have already deployed</a> for this token.";
                    readonly maxLength: 30;
                    readonly minLength: 1;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                };
                readonly supply: {
                    readonly description: "The supply of the token";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["1000000.0"];
                };
                readonly decimals: {
                    readonly description: "The number of decimal places that the token has";
                    readonly minimum: 0;
                    readonly type: "number";
                    readonly examples: readonly [8];
                };
                readonly description: {
                    readonly description: "The description of the token; used as a description within the Tatum platform and as a currency name on the blockchain";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["My Public Token"];
                };
                readonly xpub: {
                    readonly description: "The extended public key of the wallet from which a deposit address for the virtual account will be generated<br/><b>NOTE:</b> On Solana, you only can assign an existing address to the virtual account; use the <code>Erc20Address</code> schema of this API.";
                    readonly maxLength: 150;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["xpub6EsCk1uU6cJzqvP9CdsTiJwT2rF748YkPnhv5Qo8q44DG7nn2vbyt48YRsNSUYS44jFCW9gwvD9kLQu9AuqXpTpM1c5hgg9PsuBLdeNncid"];
                };
                readonly derivationIndex: {
                    readonly description: "The derivation index to use together with the extended public key to generate the deposit address";
                    readonly format: "int32";
                    readonly type: "integer";
                    readonly maximum: 2147483647;
                    readonly examples: readonly [0];
                    readonly minimum: -2147483648;
                };
                readonly basePair: {
                    readonly description: "The base pair for the virtual currency that represents the token; used to calculate the value of a transaction";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["EUR"];
                };
                readonly baseRate: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly minimum: 0;
                    readonly description: "The exchange rate for the base pair; one unit of the created virtual currency equals 1 unit of <code>basePair</code>*<code>baseRate</code>";
                    readonly examples: readonly [1];
                };
                readonly customer: {
                    readonly properties: {
                        readonly externalId: {
                            readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123654"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                            readonly default: "EUR";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly customerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                        readonly providerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                    };
                    readonly required: readonly ["externalId"];
                    readonly type: "object";
                    readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                };
                readonly accountingCurrency: {
                    readonly description: "The ISO 4217 code of the currency in which all transactions for the created virtual account will be billed\n\nDefault: `USD`";
                    readonly default: "USD";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["USD"];
                };
            };
            readonly required: readonly ["symbol", "supply", "decimals", "description", "basePair", "derivationIndex", "xpub"];
            readonly type: "object";
        }, {
            readonly properties: {
                readonly symbol: {
                    readonly description: "The name of the token; used as an identifier within the Tatum platform and as a currency symbol on the blockchain<br/>The token name that you specify here must be the same as the token name in the <code>symbol</code> parameter of the smart contract that you <a href=\"https://apidoc.tatum.io/tag/Fungible-Tokens-(ERC-20-or-compatible)#operation/Erc20Deploy\" target=\"_blank\">are going to deploy or have already deployed</a> for this token.";
                    readonly maxLength: 30;
                    readonly minLength: 1;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                };
                readonly supply: {
                    readonly description: "The supply of the token";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["1000000.0"];
                };
                readonly decimals: {
                    readonly description: "The number of decimal places that the token has";
                    readonly minimum: 0;
                    readonly type: "number";
                    readonly examples: readonly [8];
                };
                readonly description: {
                    readonly description: "The description of the token; used as a description within the Tatum platform and as a currency name on the blockchain";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["My Public Token"];
                };
                readonly address: {
                    readonly description: "The blockchain address to be assigned to the virtual account as a deposit address";
                    readonly maxLength: 44;
                    readonly minLength: 42;
                    readonly type: "string";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly basePair: {
                    readonly description: "The base pair for the virtual currency that represents the token; used to calculate the value of a transaction";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["EUR"];
                };
                readonly baseRate: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly minimum: 0;
                    readonly description: "The exchange rate for the base pair; one unit of the created virtual currency equals 1 unit of <code>basePair</code>*<code>baseRate</code>";
                    readonly examples: readonly [1];
                };
                readonly customer: {
                    readonly properties: {
                        readonly externalId: {
                            readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123654"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                            readonly default: "EUR";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly customerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                        readonly providerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                    };
                    readonly required: readonly ["externalId"];
                    readonly type: "object";
                    readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                };
                readonly accountingCurrency: {
                    readonly description: "AThe ISO 4217 code of the currency in which all transactions for the created virtual account will be billed\n\nDefault: `USD`";
                    readonly default: "USD";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["USD"];
                };
            };
            readonly required: readonly ["symbol", "supply", "decimals", "description", "basePair", "address"];
            readonly type: "object";
        }];
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly properties: {
                readonly accountId: {
                    readonly description: "The ID of the created virtual account with the currency set to the token name (the <code>symbol</code> parameter of the request body)<br/>The token supply will be created as soon as the token smart contract is deployed on the blockchain.";
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly address: {
                    readonly description: "The deposit address of the virtual account";
                    readonly type: "string";
                    readonly examples: readonly ["0xa7673161CbfE0116A4De9E341f8465940c2211d4"];
                };
            };
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.symbol.prefix";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.symbol.prefix"];
                    };
                    readonly message: {
                        readonly description: "ERC20 token cannot start with VC_.";
                        readonly type: "string";
                        readonly examples: readonly ["ERC20 token cannot start with VC_."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.address.xpub.both";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.address.xpub.both"];
                    };
                    readonly message: {
                        readonly description: "Either xpub or address must be present, not both.";
                        readonly type: "string";
                        readonly examples: readonly ["Either xpub or address must be present, not both."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.address.xpub.missing";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.address.xpub.missing"];
                    };
                    readonly message: {
                        readonly description: "Either xpub or address must be present.";
                        readonly type: "string";
                        readonly examples: readonly ["Either xpub or address must be present."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.recipient.format";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.recipient.format"];
                    };
                    readonly message: {
                        readonly description: "Recipient blockchain address has incorrect format.";
                        readonly type: "string";
                        readonly examples: readonly ["Recipient blockchain address has incorrect format."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.duplicate.name";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.duplicate.name"];
                    };
                    readonly message: {
                        readonly description: "ERC20 token with given name already exists.";
                        readonly type: "string";
                        readonly examples: readonly ["ERC20 token with given name already exists."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "customer.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["customer.not.active"];
                    };
                    readonly message: {
                        readonly description: "Customer not active.";
                        readonly type: "string";
                        readonly examples: readonly ["Customer not active."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "virtual.creation.error";
                        readonly type: "string";
                        readonly examples: readonly ["virtual.creation.error"];
                    };
                    readonly message: {
                        readonly description: "It is not possible to create virtual currency.";
                        readonly type: "string";
                        readonly examples: readonly ["It is not possible to create virtual currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["account.not.exists"];
                    };
                    readonly message: {
                        readonly description: "No such account.";
                        readonly type: "string";
                        readonly examples: readonly ["No such account."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.missing";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.missing"];
                    };
                    readonly message: {
                        readonly description: "No xpub assigned to account, it is not possible to generate address. Use assignAddress method instead.";
                        readonly type: "string";
                        readonly examples: readonly ["No xpub assigned to account, it is not possible to generate address. Use assignAddress method instead."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "xpub.used";
                        readonly type: "string";
                        readonly examples: readonly ["xpub.used"];
                    };
                    readonly message: {
                        readonly description: "XPub already used registered within Tatum";
                        readonly type: "string";
                        readonly examples: readonly ["XPub already used registered within Tatum"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "Address.index.used";
                        readonly type: "string";
                        readonly examples: readonly ["address.index.used"];
                    };
                    readonly message: {
                        readonly description: "Unable to create address, derivation index is already used.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to create address, derivation index is already used."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "offchain.not.supported";
                        readonly type: "string";
                        readonly examples: readonly ["offchain.not.supported"];
                    };
                    readonly message: {
                        readonly description: "Offchain not supported for account with ${account.currency} currency.";
                        readonly type: "string";
                        readonly examples: readonly ["Offchain not supported for account with ${account.currency} currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.incompatible";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.incompatible"];
                    };
                    readonly message: {
                        readonly description: "Xpub not compatible with account currency.";
                        readonly type: "string";
                        readonly examples: readonly ["Xpub not compatible with account currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.present";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.present"];
                    };
                    readonly message: {
                        readonly description: "Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead.";
                        readonly type: "string";
                        readonly examples: readonly ["Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                    readonly required: {
                        readonly "0": "errorCode";
                        readonly "1": "message";
                        readonly "2": "statusCode";
                    };
                    readonly type: "object";
                };
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "vc.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["vc.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such virtual currency.";
                        readonly type: "string";
                        readonly examples: readonly ["No such virtual currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "Address.used";
                        readonly type: "string";
                        readonly examples: readonly ["address.used"];
                    };
                    readonly message: {
                        readonly description: "Address and currency already in use.";
                        readonly type: "string";
                        readonly examples: readonly ["Address and currency already in use."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.present";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.present"];
                    };
                    readonly message: {
                        readonly description: "Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead.";
                        readonly type: "string";
                        readonly examples: readonly ["Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                    readonly required: {
                        readonly "0": "errorCode";
                        readonly "1": "message";
                        readonly "2": "statusCode";
                    };
                    readonly type: "object";
                };
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.erc20.unsupported";
                        readonly type: "string";
                        readonly examples: readonly ["eth.erc20.unsupported"];
                    };
                    readonly message: {
                        readonly description: "Unsupported ETH ERC20 blockchain.";
                        readonly type: "string";
                        readonly examples: readonly ["Unsupported ETH ERC20 blockchain."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const CreateTrc: {
    readonly body: {
        readonly oneOf: readonly [{
            readonly properties: {
                readonly symbol: {
                    readonly description: "The name of the token; used as an identifier within the Tatum platform and as a currency symbol on the blockchain";
                    readonly maxLength: 30;
                    readonly minLength: 1;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                };
                readonly supply: {
                    readonly description: "The supply of the token";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["1000000.0"];
                };
                readonly decimals: {
                    readonly description: "The number of decimal places that the token has";
                    readonly minimum: 0;
                    readonly type: "number";
                    readonly examples: readonly [6];
                };
                readonly type: {
                    readonly description: "The type of the token";
                    readonly type: "string";
                    readonly enum: readonly ["TRC10", "TRC20"];
                    readonly examples: readonly ["TRC10"];
                };
                readonly description: {
                    readonly description: "The description of the token; used as a description within the Tatum platform and as a currency name on the blockchain";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["My Public Token"];
                };
                readonly address: {
                    readonly description: "The blockchain address to be assigned to the virtual account as a deposit address";
                    readonly maxLength: 34;
                    readonly minLength: 34;
                    readonly type: "string";
                    readonly examples: readonly ["TVAEYCmc15awaDRAjUZ1kvcHwQQaoPw2CW"];
                };
                readonly basePair: {
                    readonly description: "The base pair for the virtual currency that represents the token; used to calculate the value of a transaction";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["EUR"];
                };
                readonly baseRate: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly minimum: 0;
                    readonly description: "The exchange rate for the base pair; one unit of the created virtual currency equals 1 unit of <code>basePair</code>*<code>baseRate</code>";
                    readonly examples: readonly [1];
                };
                readonly url: {
                    readonly description: "(TRC-10 tokens only) The URL of the project that the token is created for<br/>Use this parameter only with TRC-10 tokens. Do <b>not</b> use this parameter with TRC-20 tokens.";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["https://mytoken.com"];
                };
                readonly customer: {
                    readonly properties: {
                        readonly externalId: {
                            readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123654"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                            readonly default: "EUR";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly customerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                        readonly providerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                    };
                    readonly required: readonly ["externalId"];
                    readonly type: "object";
                    readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                };
                readonly accountingCurrency: {
                    readonly description: "The ISO 4217 code of the currency in which all transactions for the created virtual account will be billed\n\nDefault: `EUR`";
                    readonly default: "EUR";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["USD"];
                };
            };
            readonly required: readonly ["symbol", "supply", "decimals", "type", "description", "basePair", "address"];
            readonly type: "object";
        }, {
            readonly properties: {
                readonly symbol: {
                    readonly description: "The name of the token; used as an identifier within the Tatum platform and as a currency symbol on the blockchain";
                    readonly maxLength: 30;
                    readonly minLength: 1;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                };
                readonly supply: {
                    readonly description: "The supply of the token";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["1000000.0"];
                };
                readonly decimals: {
                    readonly description: "The number of decimal places that the token has";
                    readonly minimum: 0;
                    readonly type: "number";
                    readonly examples: readonly [6];
                };
                readonly type: {
                    readonly description: "The type of the token";
                    readonly type: "string";
                    readonly enum: readonly ["TRC10", "TRC20"];
                    readonly examples: readonly ["TRC10"];
                };
                readonly description: {
                    readonly description: "The description of the token; used as a description within the Tatum platform and as a currency name on the blockchain";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["My Public Token"];
                };
                readonly xpub: {
                    readonly description: "The extended public key of the TRON wallet from which a deposit address for the virtual account will be generated";
                    readonly maxLength: 130;
                    readonly minLength: 130;
                    readonly type: "string";
                    readonly examples: readonly ["xpub6EsCk1uU6cJzqvP9CdsTiJwT2rF748YkPnhv5Qo8q44DG7nn2vbyt48YRsNSUYS44jFCW9gwvD9kLQu9AuqXpTpM1c5hgg9PsuBLdeNncid"];
                };
                readonly derivationIndex: {
                    readonly description: "The derivation index to use together with the extended public key to generate the deposit address";
                    readonly format: "int32";
                    readonly type: "integer";
                    readonly maximum: 2147483647;
                    readonly examples: readonly [0];
                    readonly minimum: -2147483648;
                };
                readonly basePair: {
                    readonly description: "The base pair for the virtual currency that represents the token; used to calculate the value of a transaction";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["EUR"];
                };
                readonly baseRate: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly minimum: 0;
                    readonly description: "The exchange rate for the base pair; one unit of the created virtual currency equals 1 unit of <code>basePair</code>*<code>baseRate</code>";
                    readonly examples: readonly [1];
                };
                readonly url: {
                    readonly description: "(TRC-10 tokens only) The URL of the project that the token is created for<br/>Use this parameter only with TRC-10 tokens. Do <b>not</b> use this parameter with TRC-20 tokens.";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["https://mytoken.com"];
                };
                readonly customer: {
                    readonly properties: {
                        readonly externalId: {
                            readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123654"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                            readonly default: "EUR";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly customerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                        readonly providerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                    };
                    readonly required: readonly ["externalId"];
                    readonly type: "object";
                    readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                };
                readonly accountingCurrency: {
                    readonly description: "The ISO 4217 code of the currency in which all transactions for the created virtual account will be billed\n\nDefault: `EUR`";
                    readonly default: "EUR";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["USD"];
                };
            };
            readonly required: readonly ["symbol", "supply", "decimals", "type", "description", "basePair", "xpub", "derivationIndex"];
            readonly type: "object";
        }];
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly properties: {
                readonly accountId: {
                    readonly description: "The ID of the created virtual account with the currency set to the token name (the <code>symbol</code> parameter of the request body)";
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly address: {
                    readonly description: "The deposit address of the virtual account";
                    readonly type: "string";
                    readonly examples: readonly ["TVAEYCmc15awaDRAjUZ1kvcHwQQaoPw2CW"];
                };
            };
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.symbol.prefix";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.symbol.prefix"];
                    };
                    readonly message: {
                        readonly description: "ERC20 token cannot start with VC_.";
                        readonly type: "string";
                        readonly examples: readonly ["ERC20 token cannot start with VC_."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.address.xpub.both";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.address.xpub.both"];
                    };
                    readonly message: {
                        readonly description: "Either xpub or address must be present, not both.";
                        readonly type: "string";
                        readonly examples: readonly ["Either xpub or address must be present, not both."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.address.xpub.missing";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.address.xpub.missing"];
                    };
                    readonly message: {
                        readonly description: "Either xpub or address must be present.";
                        readonly type: "string";
                        readonly examples: readonly ["Either xpub or address must be present."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.recipient.format";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.recipient.format"];
                    };
                    readonly message: {
                        readonly description: "Recipient blockchain address has incorrect format.";
                        readonly type: "string";
                        readonly examples: readonly ["Recipient blockchain address has incorrect format."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.duplicate.name";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.duplicate.name"];
                    };
                    readonly message: {
                        readonly description: "ERC20 token with given name already exists.";
                        readonly type: "string";
                        readonly examples: readonly ["ERC20 token with given name already exists."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "customer.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["customer.not.active"];
                    };
                    readonly message: {
                        readonly description: "Customer not active.";
                        readonly type: "string";
                        readonly examples: readonly ["Customer not active."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "virtual.creation.error";
                        readonly type: "string";
                        readonly examples: readonly ["virtual.creation.error"];
                    };
                    readonly message: {
                        readonly description: "It is not possible to create virtual currency.";
                        readonly type: "string";
                        readonly examples: readonly ["It is not possible to create virtual currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["account.not.exists"];
                    };
                    readonly message: {
                        readonly description: "No such account.";
                        readonly type: "string";
                        readonly examples: readonly ["No such account."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.missing";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.missing"];
                    };
                    readonly message: {
                        readonly description: "No xpub assigned to account, it is not possible to generate address. Use assignAddress method instead.";
                        readonly type: "string";
                        readonly examples: readonly ["No xpub assigned to account, it is not possible to generate address. Use assignAddress method instead."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "xpub.used";
                        readonly type: "string";
                        readonly examples: readonly ["xpub.used"];
                    };
                    readonly message: {
                        readonly description: "XPub already used registered within Tatum";
                        readonly type: "string";
                        readonly examples: readonly ["XPub already used registered within Tatum"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "Address.index.used";
                        readonly type: "string";
                        readonly examples: readonly ["address.index.used"];
                    };
                    readonly message: {
                        readonly description: "Unable to create address, derivation index is already used.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to create address, derivation index is already used."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "offchain.not.supported";
                        readonly type: "string";
                        readonly examples: readonly ["offchain.not.supported"];
                    };
                    readonly message: {
                        readonly description: "Offchain not supported for account with ${account.currency} currency.";
                        readonly type: "string";
                        readonly examples: readonly ["Offchain not supported for account with ${account.currency} currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.incompatible";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.incompatible"];
                    };
                    readonly message: {
                        readonly description: "Xpub not compatible with account currency.";
                        readonly type: "string";
                        readonly examples: readonly ["Xpub not compatible with account currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.present";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.present"];
                    };
                    readonly message: {
                        readonly description: "Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead.";
                        readonly type: "string";
                        readonly examples: readonly ["Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                    readonly required: {
                        readonly "0": "errorCode";
                        readonly "1": "message";
                        readonly "2": "statusCode";
                    };
                    readonly type: "object";
                };
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "vc.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["vc.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such virtual currency.";
                        readonly type: "string";
                        readonly examples: readonly ["No such virtual currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "Address.used";
                        readonly type: "string";
                        readonly examples: readonly ["address.used"];
                    };
                    readonly message: {
                        readonly description: "Address and currency already in use.";
                        readonly type: "string";
                        readonly examples: readonly ["Address and currency already in use."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.present";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.present"];
                    };
                    readonly message: {
                        readonly description: "Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead.";
                        readonly type: "string";
                        readonly examples: readonly ["Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                    readonly required: {
                        readonly "0": "errorCode";
                        readonly "1": "message";
                        readonly "2": "statusCode";
                    };
                    readonly type: "object";
                };
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.erc20.unsupported";
                        readonly type: "string";
                        readonly examples: readonly ["eth.erc20.unsupported"];
                    };
                    readonly message: {
                        readonly description: "Unsupported ETH ERC20 blockchain.";
                        readonly type: "string";
                        readonly examples: readonly ["Unsupported ETH ERC20 blockchain."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const CreateXdc20: {
    readonly body: {
        readonly oneOf: readonly [{
            readonly properties: {
                readonly symbol: {
                    readonly description: "The name of the token; used as an identifier within the Tatum platform and as a currency symbol on the blockchain<br/>The token name that you specify here must be the same as the token name in the <code>symbol</code> parameter of the smart contract that you <a href=\"https://apidoc.tatum.io/tag/Fungible-Tokens-(ERC-20-or-compatible)#operation/Erc20Deploy\" target=\"_blank\">are going to deploy or have already deployed</a> for this token.";
                    readonly maxLength: 30;
                    readonly minLength: 1;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                };
                readonly supply: {
                    readonly description: "The supply of the token";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["1000000.0"];
                };
                readonly decimals: {
                    readonly description: "The number of decimal places that the token has";
                    readonly minimum: 0;
                    readonly type: "number";
                    readonly examples: readonly [8];
                };
                readonly description: {
                    readonly description: "The description of the token; used as a description within the Tatum platform and as a currency name on the blockchain";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["My Public Token"];
                };
                readonly xpub: {
                    readonly description: "The extended public key of the wallet from which a deposit address for the virtual account will be generated<br/><b>NOTE:</b> On Solana, you only can assign an existing address to the virtual account; use the <code>Erc20Address</code> schema of this API.";
                    readonly maxLength: 150;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["xpub6EsCk1uU6cJzqvP9CdsTiJwT2rF748YkPnhv5Qo8q44DG7nn2vbyt48YRsNSUYS44jFCW9gwvD9kLQu9AuqXpTpM1c5hgg9PsuBLdeNncid"];
                };
                readonly derivationIndex: {
                    readonly description: "The derivation index to use together with the extended public key to generate the deposit address";
                    readonly format: "int32";
                    readonly type: "integer";
                    readonly maximum: 2147483647;
                    readonly examples: readonly [0];
                    readonly minimum: -2147483648;
                };
                readonly basePair: {
                    readonly description: "The base pair for the virtual currency that represents the token; used to calculate the value of a transaction";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["EUR"];
                };
                readonly baseRate: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly minimum: 0;
                    readonly description: "The exchange rate for the base pair; one unit of the created virtual currency equals 1 unit of <code>basePair</code>*<code>baseRate</code>";
                    readonly examples: readonly [1];
                };
                readonly customer: {
                    readonly properties: {
                        readonly externalId: {
                            readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123654"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                            readonly default: "EUR";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly customerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                        readonly providerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                    };
                    readonly required: readonly ["externalId"];
                    readonly type: "object";
                    readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                };
                readonly accountingCurrency: {
                    readonly description: "The ISO 4217 code of the currency in which all transactions for the created virtual account will be billed\n\nDefault: `USD`";
                    readonly default: "USD";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["USD"];
                };
            };
            readonly required: readonly ["symbol", "supply", "decimals", "description", "basePair", "derivationIndex", "xpub"];
            readonly type: "object";
        }, {
            readonly properties: {
                readonly symbol: {
                    readonly description: "The name of the token; used as an identifier within the Tatum platform and as a currency symbol on the blockchain<br/>The token name that you specify here must be the same as the token name in the <code>symbol</code> parameter of the smart contract that you <a href=\"https://apidoc.tatum.io/tag/Fungible-Tokens-(ERC-20-or-compatible)#operation/Erc20Deploy\" target=\"_blank\">are going to deploy or have already deployed</a> for this token.";
                    readonly maxLength: 30;
                    readonly minLength: 1;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                };
                readonly supply: {
                    readonly description: "The supply of the token";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["1000000.0"];
                };
                readonly decimals: {
                    readonly description: "The number of decimal places that the token has";
                    readonly minimum: 0;
                    readonly type: "number";
                    readonly examples: readonly [8];
                };
                readonly description: {
                    readonly description: "The description of the token; used as a description within the Tatum platform and as a currency name on the blockchain";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["My Public Token"];
                };
                readonly address: {
                    readonly description: "The blockchain address to be assigned to the virtual account as a deposit address";
                    readonly maxLength: 44;
                    readonly minLength: 42;
                    readonly type: "string";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly basePair: {
                    readonly description: "The base pair for the virtual currency that represents the token; used to calculate the value of a transaction";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["EUR"];
                };
                readonly baseRate: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly minimum: 0;
                    readonly description: "The exchange rate for the base pair; one unit of the created virtual currency equals 1 unit of <code>basePair</code>*<code>baseRate</code>";
                    readonly examples: readonly [1];
                };
                readonly customer: {
                    readonly properties: {
                        readonly externalId: {
                            readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123654"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                            readonly default: "EUR";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly customerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                        readonly providerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                    };
                    readonly required: readonly ["externalId"];
                    readonly type: "object";
                    readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                };
                readonly accountingCurrency: {
                    readonly description: "AThe ISO 4217 code of the currency in which all transactions for the created virtual account will be billed\n\nDefault: `USD`";
                    readonly default: "USD";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["USD"];
                };
            };
            readonly required: readonly ["symbol", "supply", "decimals", "description", "basePair", "address"];
            readonly type: "object";
        }];
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly properties: {
                readonly accountId: {
                    readonly description: "The ID of the created virtual account with the currency set to the token name (the <code>symbol</code> parameter of the request body)<br/>The token supply will be created as soon as the token smart contract is deployed on the blockchain.";
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly address: {
                    readonly description: "The deposit address of the virtual account";
                    readonly type: "string";
                    readonly examples: readonly ["0xa7673161CbfE0116A4De9E341f8465940c2211d4"];
                };
            };
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.symbol.prefix";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.symbol.prefix"];
                    };
                    readonly message: {
                        readonly description: "ERC20 token cannot start with VC_.";
                        readonly type: "string";
                        readonly examples: readonly ["ERC20 token cannot start with VC_."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.address.xpub.both";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.address.xpub.both"];
                    };
                    readonly message: {
                        readonly description: "Either xpub or address must be present, not both.";
                        readonly type: "string";
                        readonly examples: readonly ["Either xpub or address must be present, not both."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.address.xpub.missing";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.address.xpub.missing"];
                    };
                    readonly message: {
                        readonly description: "Either xpub or address must be present.";
                        readonly type: "string";
                        readonly examples: readonly ["Either xpub or address must be present."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.recipient.format";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.recipient.format"];
                    };
                    readonly message: {
                        readonly description: "Recipient blockchain address has incorrect format.";
                        readonly type: "string";
                        readonly examples: readonly ["Recipient blockchain address has incorrect format."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.duplicate.name";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.duplicate.name"];
                    };
                    readonly message: {
                        readonly description: "ERC20 token with given name already exists.";
                        readonly type: "string";
                        readonly examples: readonly ["ERC20 token with given name already exists."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "customer.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["customer.not.active"];
                    };
                    readonly message: {
                        readonly description: "Customer not active.";
                        readonly type: "string";
                        readonly examples: readonly ["Customer not active."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "virtual.creation.error";
                        readonly type: "string";
                        readonly examples: readonly ["virtual.creation.error"];
                    };
                    readonly message: {
                        readonly description: "It is not possible to create virtual currency.";
                        readonly type: "string";
                        readonly examples: readonly ["It is not possible to create virtual currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["account.not.exists"];
                    };
                    readonly message: {
                        readonly description: "No such account.";
                        readonly type: "string";
                        readonly examples: readonly ["No such account."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.missing";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.missing"];
                    };
                    readonly message: {
                        readonly description: "No xpub assigned to account, it is not possible to generate address. Use assignAddress method instead.";
                        readonly type: "string";
                        readonly examples: readonly ["No xpub assigned to account, it is not possible to generate address. Use assignAddress method instead."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "xpub.used";
                        readonly type: "string";
                        readonly examples: readonly ["xpub.used"];
                    };
                    readonly message: {
                        readonly description: "XPub already used registered within Tatum";
                        readonly type: "string";
                        readonly examples: readonly ["XPub already used registered within Tatum"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "Address.index.used";
                        readonly type: "string";
                        readonly examples: readonly ["address.index.used"];
                    };
                    readonly message: {
                        readonly description: "Unable to create address, derivation index is already used.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to create address, derivation index is already used."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "offchain.not.supported";
                        readonly type: "string";
                        readonly examples: readonly ["offchain.not.supported"];
                    };
                    readonly message: {
                        readonly description: "Offchain not supported for account with ${account.currency} currency.";
                        readonly type: "string";
                        readonly examples: readonly ["Offchain not supported for account with ${account.currency} currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.incompatible";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.incompatible"];
                    };
                    readonly message: {
                        readonly description: "Xpub not compatible with account currency.";
                        readonly type: "string";
                        readonly examples: readonly ["Xpub not compatible with account currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.present";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.present"];
                    };
                    readonly message: {
                        readonly description: "Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead.";
                        readonly type: "string";
                        readonly examples: readonly ["Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                    readonly required: {
                        readonly "0": "errorCode";
                        readonly "1": "message";
                        readonly "2": "statusCode";
                    };
                    readonly type: "object";
                };
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "vc.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["vc.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such virtual currency.";
                        readonly type: "string";
                        readonly examples: readonly ["No such virtual currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "Address.used";
                        readonly type: "string";
                        readonly examples: readonly ["address.used"];
                    };
                    readonly message: {
                        readonly description: "Address and currency already in use.";
                        readonly type: "string";
                        readonly examples: readonly ["Address and currency already in use."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.present";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.present"];
                    };
                    readonly message: {
                        readonly description: "Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead.";
                        readonly type: "string";
                        readonly examples: readonly ["Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                    readonly required: {
                        readonly "0": "errorCode";
                        readonly "1": "message";
                        readonly "2": "statusCode";
                    };
                    readonly type: "object";
                };
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.erc20.unsupported";
                        readonly type: "string";
                        readonly examples: readonly ["eth.erc20.unsupported"];
                    };
                    readonly message: {
                        readonly description: "Unsupported ETH ERC20 blockchain.";
                        readonly type: "string";
                        readonly examples: readonly ["Unsupported ETH ERC20 blockchain."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const DeactivateAccount: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Account ID";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["account.not.exists"];
                    };
                    readonly message: {
                        readonly description: "No such account.";
                        readonly type: "string";
                        readonly examples: readonly ["No such account."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.inactive";
                        readonly type: "string";
                        readonly examples: readonly ["account.inactive"];
                    };
                    readonly message: {
                        readonly description: "Unable to deactivate inactive account.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to deactivate inactive account."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.balance.non.zero";
                        readonly type: "string";
                        readonly examples: readonly ["account.balance.non.zero"];
                    };
                    readonly message: {
                        readonly description: "Unable to deactivate account with non-zero balance.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to deactivate account with non-zero balance."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.trade.non.zero";
                        readonly type: "string";
                        readonly examples: readonly ["account.trade.non.zero"];
                    };
                    readonly message: {
                        readonly description: "Unable to deactivate account with non-zero exchange trades.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to deactivate account with non-zero exchange trades."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const DeactivateCustomer: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly maxLength: 50;
                    readonly minLength: 10;
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Customer internal ID";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "customer.deactivate.account.active";
                        readonly type: "string";
                        readonly examples: readonly ["customer.deactivate.account.active"];
                    };
                    readonly message: {
                        readonly description: "Unable to deactivate customer, accounts not deactivated.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to deactivate customer, accounts not deactivated."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "customer.inactive";
                        readonly type: "string";
                        readonly examples: readonly ["customer.inactive"];
                    };
                    readonly message: {
                        readonly description: "Unable to perform operation on inactive customer.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to perform operation on inactive customer."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "customer.internal.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["customer.internal.not.exists"];
                    };
                    readonly message: {
                        readonly description: "No such customer.";
                        readonly type: "string";
                        readonly examples: readonly ["No such customer."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const DeleteAccountTrades: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Account ID";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const DeleteAllBlockAmount: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["5e6be89ee6aa436299950c3f"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Account ID";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["account.not.exists"];
                    };
                    readonly message: {
                        readonly description: "No such account.";
                        readonly type: "string";
                        readonly examples: readonly ["No such account."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "customer.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["customer.not.exists"];
                    };
                    readonly message: {
                        readonly description: "No customer with given external ID ${externalId} exists.";
                        readonly type: "string";
                        readonly examples: readonly ["No customer with given external ID ${externalId} exists."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "customer.blockage.inactive";
                        readonly type: "string";
                        readonly examples: readonly ["customer.blockage.inactive"];
                    };
                    readonly message: {
                        readonly description: "Unable to delete blockages on account for inactive customer.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to delete blockages on account for inactive customer."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const DeleteBlockAmount: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["5e6be89ee6aa436299950c3f"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Blockage ID";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly properties: {
                readonly message: {
                    readonly description: "Forbidden";
                    readonly type: "string";
                    readonly examples: readonly ["Forbidden"];
                };
                readonly statusCode: {
                    readonly description: "403";
                    readonly type: "number";
                    readonly examples: readonly [403];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const DeleteTrade: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Trade ID";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const DisableCustomer: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly maxLength: 50;
                    readonly minLength: 10;
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Customer internal ID";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "customer.inactive";
                        readonly type: "string";
                        readonly examples: readonly ["customer.inactive"];
                    };
                    readonly message: {
                        readonly description: "Unable to perform operation on inactive customer.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to perform operation on inactive customer."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "customer.disabled";
                        readonly type: "string";
                        readonly examples: readonly ["customer.disabled"];
                    };
                    readonly message: {
                        readonly description: "Unable to disable disabled customer.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to disable disabled customer."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "customer.internal.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["customer.internal.not.exists"];
                    };
                    readonly message: {
                        readonly description: "No such customer.";
                        readonly type: "string";
                        readonly examples: readonly ["No such customer."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const DogeTransfer: {
    readonly body: {
        readonly oneOf: readonly [{
            readonly properties: {
                readonly senderAccountId: {
                    readonly description: "Sender account ID";
                    readonly maxLength: 24;
                    readonly minLength: 24;
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly address: {
                    readonly description: "Blockchain address to send assets to. For BTC, LTC, DOGE and BCH, it is possible to enter list of multiple recipient blockchain addresses as a comma separated string.";
                    readonly maxLength: 10000;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["mpTwPdF8up9kidgcAStriUPwRdnE9MRAg7"];
                };
                readonly amount: {
                    readonly description: "Amount to be withdrawn to blockchain.";
                    readonly maxLength: 38;
                    readonly type: "string";
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly examples: readonly ["0.001"];
                };
                readonly compliant: {
                    readonly description: "Compliance check, if withdrawal is not compliant, it will not be processed.";
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                };
                readonly fee: {
                    readonly description: "Fee to be submitted as a transaction fee to blockchain. If none is set, default value of 1 DOGE is used.";
                    readonly type: "string";
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly examples: readonly ["1"];
                };
                readonly multipleAmounts: {
                    readonly description: "For BTC, LTC, DOGE and BCH, it is possible to enter list of multiple recipient blockchain amounts. List of recipient addresses must be present in the address field and total sum of amounts must be equal to the amount field.";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                        readonly examples: readonly ["0.1"];
                    };
                };
                readonly mnemonic: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "Mnemonic seed - usually 12-24 words with access to whole wallet.\nEither mnemonic, keyPair or signature Id must be present - depends on the type of account and xpub.\nTatum KMS does not support keyPair type of off-chain transaction, only mnemonic based.\n";
                    readonly type: "string";
                    readonly examples: readonly ["urge pulp usage sister evidence arrest palm math please chief egg abuse"];
                };
                readonly xpub: {
                    readonly description: "Extended public key (xpub) of the wallet associated with the accounts. Should be present, when mnemonic is used.";
                    readonly maxLength: 150;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["xpub6EsCk1uU6cJzqvP9CdsTiJwT2rF748YkPnhv5Qo8q44DG7nn2vbyt48YRsNSUYS44jFCW9gwvD9kLQu9AuqXpTpM1c5hgg9PsuBLdeNncid"];
                };
                readonly paymentId: {
                    readonly description: "Identifier of the payment, shown for created Transaction within Tatum sender account.";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["1234"];
                };
                readonly senderNote: {
                    readonly description: "Note visible to owner of withdrawing account";
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["Sender note"];
                };
            };
            readonly required: readonly ["amount", "senderAccountId", "address", "mnemonic", "xpub"];
            readonly type: "object";
        }, {
            readonly properties: {
                readonly senderAccountId: {
                    readonly description: "Sender account ID";
                    readonly maxLength: 24;
                    readonly minLength: 24;
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly address: {
                    readonly description: "Blockchain address to send assets to. For BTC, LTC, DOGE and BCH, it is possible to enter list of multiple recipient blockchain addresses as a comma separated string.";
                    readonly maxLength: 10000;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["mpTwPdF8up9kidgcAStriUPwRdnE9MRAg7"];
                };
                readonly amount: {
                    readonly description: "Amount to be withdrawn to blockchain.";
                    readonly maxLength: 38;
                    readonly type: "string";
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly examples: readonly ["0.001"];
                };
                readonly compliant: {
                    readonly description: "Compliance check, if withdrawal is not compliant, it will not be processed.";
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                };
                readonly fee: {
                    readonly description: "Fee to be submitted as a transaction fee to blockchain. If none is set, default value of 1 DOGE is used.";
                    readonly type: "string";
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly examples: readonly ["1"];
                };
                readonly multipleAmounts: {
                    readonly description: "For BTC, LTC, DOGE and BCH, it is possible to enter list of multiple recipient blockchain amounts. List of recipient addresses must be present in the address field and total sum of amounts must be equal to the amount field.";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                        readonly examples: readonly ["0.1"];
                    };
                };
                readonly keyPair: {
                    readonly description: "Array of assigned blockchain addresses with their private keys.\nEither mnemonic, keyPair or signature Id must be present - depends on the type of account and xpub.\nTatum KMS does not support keyPair type of off-chain transaction, only mnemonic based.\n";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly address: {
                                readonly type: "string";
                                readonly description: "Blockchain address assigned to account withdrawal is made from.";
                                readonly maxLength: 50;
                                readonly minLength: 30;
                            };
                            readonly privateKey: {
                                readonly type: "string";
                                readonly description: "Private key of blockchain address.";
                                readonly maxLength: 52;
                                readonly minLength: 52;
                                readonly examples: readonly ["cTmS2jBWXgFaXZ2xG9jhn67TiyTshnMp3UedamzEhGm6BZV1vLgQ"];
                            };
                        };
                    };
                };
                readonly attr: {
                    readonly description: "Used to parametrize withdrawal as a change address for left coins from transaction.";
                    readonly maxLength: 256;
                    readonly minLength: 1;
                    readonly type: "string";
                };
                readonly paymentId: {
                    readonly description: "Identifier of the payment, shown for created Transaction within Tatum sender account.";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["1234"];
                };
                readonly senderNote: {
                    readonly description: "Note visible to owner of withdrawing account";
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["Sender note"];
                };
            };
            readonly required: readonly ["amount", "senderAccountId", "address", "keyPair", "attr"];
            readonly type: "object";
        }, {
            readonly properties: {
                readonly senderAccountId: {
                    readonly description: "Sender account ID";
                    readonly maxLength: 24;
                    readonly minLength: 24;
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly address: {
                    readonly description: "Blockchain address to send assets to. For BTC, LTC, DOGE and BCH, it is possible to enter list of multiple recipient blockchain addresses as a comma separated string.";
                    readonly maxLength: 10000;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["mpTwPdF8up9kidgcAStriUPwRdnE9MRAg7"];
                };
                readonly amount: {
                    readonly description: "Amount to be withdrawn to blockchain.";
                    readonly maxLength: 38;
                    readonly type: "string";
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly examples: readonly ["0.001"];
                };
                readonly compliant: {
                    readonly description: "Compliance check, if withdrawal is not compliant, it will not be processed.";
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                };
                readonly fee: {
                    readonly description: "Fee to be submitted as a transaction fee to blockchain. If none is set, default value of 1 DOGE is used.";
                    readonly type: "string";
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly examples: readonly ["1"];
                };
                readonly multipleAmounts: {
                    readonly description: "For BTC, LTC, DOGE and BCH, it is possible to enter list of multiple recipient blockchain amounts. List of recipient addresses must be present in the address field and total sum of amounts must be equal to the amount field.";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                        readonly examples: readonly ["0.1"];
                    };
                };
                readonly signatureId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly description: "Signature hash of the mnemonic, which will be used to sign transactions locally.\nAll signature Ids should be present, which might be used to sign transaction.\nTatum KMS does not support keyPair type of off-chain transaction, only mnemonic based.\n";
                    readonly examples: readonly ["26d3883e-4e17-48b3-a0ee-09a3e484ac83"];
                };
                readonly xpub: {
                    readonly description: "Extended public key (xpub) of the wallet associated with the accounts. Should be present, when mnemonic is used.";
                    readonly maxLength: 150;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["xpub6EsCk1uU6cJzqvP9CdsTiJwT2rF748YkPnhv5Qo8q44DG7nn2vbyt48YRsNSUYS44jFCW9gwvD9kLQu9AuqXpTpM1c5hgg9PsuBLdeNncid"];
                };
                readonly paymentId: {
                    readonly description: "Identifier of the payment, shown for created Transaction within Tatum sender account.";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["1234"];
                };
                readonly senderNote: {
                    readonly description: "Note visible to owner of withdrawing account";
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["Sender note"];
                };
            };
            readonly required: readonly ["amount", "senderAccountId", "address", "signatureId", "xpub"];
            readonly type: "object";
        }];
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly oneOf: readonly [{
                readonly type: "object";
                readonly properties: {
                    readonly id: {
                        readonly description: "ID of withdrawal. If transaction is not valid in blockchain, use this id to cancel withdrawal.";
                        readonly type: "string";
                        readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    };
                    readonly txId: {
                        readonly description: "TX hash of successful transaction.";
                        readonly type: "string";
                        readonly examples: readonly ["c83f8818db43d9ba4accfe454aa44fc33123d47a4f89d47b314d6748eb0e9bc9"];
                    };
                    readonly completed: {
                        readonly description: "If set to \"true\", the withdrawal has been completed in the virtual account; if set to \"false\", the withdrawal has not been completed and you have to <a href=\"https://apidoc.tatum.io/tag/Withdrawal#operation/completeWithdrawal\" target=\"_blank\">complete it manually</a>";
                        readonly type: "boolean";
                        readonly examples: readonly [true];
                    };
                };
                readonly required: readonly ["txId", "id", "completed"];
            }, {
                readonly type: "object";
                readonly properties: {
                    readonly signatureId: {
                        readonly description: "ID of prepared payment template to sign. This is should be stored on a client side to retrieve ID of the blockchain transaction, when signing application signs the transaction and broadcasts it to the blockchain.";
                        readonly format: "uuid";
                        readonly type: "string";
                        readonly examples: readonly ["1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6"];
                    };
                };
                readonly required: readonly ["id", "signatureId"];
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "transaction.invalid.body";
                        readonly type: "string";
                        readonly examples: readonly ["transaction.invalid.body"];
                    };
                    readonly message: {
                        readonly description: "Either UTXO, or addresses must be present.";
                        readonly type: "string";
                        readonly examples: readonly ["Either UTXO, or addresses must be present."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.missing";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.missing"];
                    };
                    readonly message: {
                        readonly description: "No such withdrawal.";
                        readonly type: "string";
                        readonly examples: readonly ["No such withdrawal."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "rate.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["rate.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such currency rate.";
                        readonly type: "string";
                        readonly examples: readonly ["No such currency rate."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "vc.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["vc.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such virtual currency.";
                        readonly type: "string";
                        readonly examples: readonly ["No such virtual currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.failed.transaction.failed";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.failed.transaction.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to store withdrawal, it is impossible to create transaction.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to store withdrawal, it is impossible to create transaction."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "blockchain.error.code";
                        readonly type: "string";
                        readonly examples: readonly ["blockchain.error.code"];
                    };
                    readonly message: {
                        readonly description: "${error.message} Code: ${error.code}";
                        readonly type: "string";
                        readonly examples: readonly ["${error.message} Code: ${error.code}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "tx.hash.index.spent";
                        readonly type: "string";
                        readonly examples: readonly ["tx.hash.index.spent"];
                    };
                    readonly message: {
                        readonly description: "No such UTXO for transaction and index.";
                        readonly type: "string";
                        readonly examples: readonly ["No such UTXO for transaction and index."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "blockchain.broadcast.error";
                        readonly type: "string";
                        readonly examples: readonly ["blockchain.broadcast.error"];
                    };
                    readonly message: {
                        readonly description: "Unable to broadcast transaction, wrong input data.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to broadcast transaction, wrong input data."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "transaction.preparation.failed";
                        readonly type: "string";
                        readonly examples: readonly ["transaction.preparation.failed"];
                    };
                    readonly message: {
                        readonly description: "Impossible to prepare transaction. Either mnemonic or keyPair and attr must be present.";
                        readonly type: "string";
                        readonly examples: readonly ["Impossible to prepare transaction. Either mnemonic or keyPair and attr must be present."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.account.virtual";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.account.virtual"];
                    };
                    readonly message: {
                        readonly description: "Sender account cannot be virtual.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender account cannot be virtual."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "offchain.not.supported";
                        readonly type: "string";
                        readonly examples: readonly ["offchain.not.supported"];
                    };
                    readonly message: {
                        readonly description: "Offchain not supported for account with ${account.currency} currency.";
                        readonly type: "string";
                        readonly examples: readonly ["Offchain not supported for account with ${account.currency} currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "amount.format";
                        readonly type: "string";
                        readonly examples: readonly ["amount.format"];
                    };
                    readonly message: {
                        readonly description: "Amount has incorrect format.";
                        readonly type: "string";
                        readonly examples: readonly ["Amount has incorrect format."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "fee.format";
                        readonly type: "string";
                        readonly examples: readonly ["fee.format"];
                    };
                    readonly message: {
                        readonly description: "Fee has incorrect format.";
                        readonly type: "string";
                        readonly examples: readonly ["Fee has incorrect format."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "transaction.preparation.failed.utxo";
                        readonly type: "string";
                        readonly examples: readonly ["transaction.preparation.failed.utxo"];
                    };
                    readonly message: {
                        readonly description: "Impossible to find last UTXO.";
                        readonly type: "string";
                        readonly examples: readonly ["Impossible to find last UTXO."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "transaction.failed";
                        readonly type: "string";
                        readonly examples: readonly ["transaction.failed"];
                    };
                    readonly message: {
                        readonly description: "No spendable inputs.";
                        readonly type: "string";
                        readonly examples: readonly ["No spendable inputs."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "key.generation.failed.wrong.mnemonic";
                        readonly type: "string";
                        readonly examples: readonly ["key.generation.failed.wrong.mnemonic"];
                    };
                    readonly message: {
                        readonly description: "Unable to generate address, wrong mnemonic and index.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to generate address, wrong mnemonic and index."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.not.cancelled.transaction.failed";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.not.cancelled.transaction.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to broadcast transaction, and impossible to cancel withdrawal. ID is attached, \"${withdrawalId}\", cancel it manually.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to broadcast transaction, and impossible to cancel withdrawal. ID is attached, \"${withdrawalId}\", cancel it manually."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.prepare.failed";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.prepare.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to prepare transaction, withdrawal cancelled.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to prepare transaction, withdrawal cancelled."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.not.exists"];
                    };
                    readonly message: {
                        readonly description: "Unable to find sender account ${transaction.senderAccountId}.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find sender account ${transaction.senderAccountId}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.customer.disabled";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.customer.disabled"];
                    };
                    readonly message: {
                        readonly description: "Sender accounts customer ${senderAccount.customerId} is disabled, unable to perform payment.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender accounts customer ${senderAccount.customerId} is disabled, unable to perform payment."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "balance.insufficient";
                        readonly type: "string";
                        readonly examples: readonly ["balance.insufficient"];
                    };
                    readonly message: {
                        readonly description: "Insufficient balance for account ${transaction.senderAccountId} and payment amount ${transaction.amount}. Sender balance is ${senderAccount.balance.availableBalance as string}, amount is ${amount}";
                        readonly type: "string";
                        readonly examples: readonly ["Insufficient balance for account ${transaction.senderAccountId} and payment amount ${transaction.amount}. Sender balance is ${senderAccount.balance.availableBalance as string}, amount is ${amount}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "amount.btc";
                        readonly type: "string";
                        readonly examples: readonly ["amount.btc"];
                    };
                    readonly message: {
                        readonly description: "BTC|LTC|BCH|DOGE payment amount must be at least 0.00000001, not ${transaction.amount}.";
                        readonly type: "string";
                        readonly examples: readonly ["BTC|LTC|BCH|DOGE payment amount must be at least 0.00000001, not ${transaction.amount}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "amount.eth";
                        readonly type: "string";
                        readonly examples: readonly ["amount.eth"];
                    };
                    readonly message: {
                        readonly description: "ETH payment amount must be at least 0.000000000001, not ${transaction.amount}.";
                        readonly type: "string";
                        readonly examples: readonly ["ETH payment amount must be at least 0.000000000001, not ${transaction.amount}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.frozen";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.frozen"];
                    };
                    readonly message: {
                        readonly description: "Sender account ${transaction.senderAccountId} is frozen, unable to perform payment.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender account ${transaction.senderAccountId} is frozen, unable to perform payment."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.pending";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.pending"];
                    };
                    readonly message: {
                        readonly description: "Unable to prepare withdrawal, last withdrawal with id ${id} is not yet processed by blockchain.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to prepare withdrawal, last withdrawal with id ${id} is not yet processed by blockchain."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const EgldTransfer: {
    readonly body: {
        readonly oneOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly nonce: {
                    readonly type: "number";
                    readonly minimum: 0;
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                };
                readonly address: {
                    readonly description: "Blockchain address to send assets";
                    readonly maxLength: 42;
                    readonly minLength: 42;
                    readonly type: "string";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly amount: {
                    readonly description: "Amount to be sent in Ether | MATIC | XDC | KCS.";
                    readonly maxLength: 38;
                    readonly type: "string";
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly examples: readonly ["100000"];
                };
                readonly compliant: {
                    readonly description: "Compliance check, if withdrawal is not compliant, it will not be processed.";
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                };
                readonly privateKey: {
                    readonly type: "string";
                    readonly maxLength: 66;
                    readonly minLength: 66;
                    readonly description: "Private key of sender address. Either mnemonic and index, privateKey or signature Id must be present - depends on the type of account and xpub.";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly paymentId: {
                    readonly description: "Identifier of the payment, shown for created Transaction within Tatum sender account.";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["1234"];
                };
                readonly senderAccountId: {
                    readonly maxLength: 24;
                    readonly minLength: 24;
                    readonly description: "Sender account ID";
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly senderNote: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "Note visible to owner of withdrawing account";
                    readonly type: "string";
                    readonly examples: readonly ["Sender note"];
                };
                readonly gasLimit: {
                    readonly type: "string";
                    readonly description: "Gas limit for transaction in gas price. If not set, automatic calculation will be used.";
                    readonly pattern: "^[+]?\\d+$";
                    readonly examples: readonly ["40000"];
                };
                readonly gasPrice: {
                    readonly type: "string";
                    readonly description: "Gas price in Gwei. If not set, automatic calculation will be used.";
                    readonly pattern: "^[+]?\\d+$";
                    readonly examples: readonly ["20"];
                };
            };
            readonly required: readonly ["senderAccountId", "address", "amount", "privateKey"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly nonce: {
                    readonly type: "number";
                    readonly minimum: 0;
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                };
                readonly address: {
                    readonly description: "Blockchain address to send assets";
                    readonly maxLength: 42;
                    readonly minLength: 42;
                    readonly type: "string";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly amount: {
                    readonly description: "Amount to be sent in Ether | MATIC | XDC | KCS.";
                    readonly maxLength: 38;
                    readonly type: "string";
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly examples: readonly ["100000"];
                };
                readonly compliant: {
                    readonly description: "Compliance check, if withdrawal is not compliant, it will not be processed.";
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                };
                readonly index: {
                    readonly description: "Derivation index of sender address.";
                    readonly maximum: 2147483647;
                    readonly type: "integer";
                    readonly examples: readonly [0];
                };
                readonly gasLimit: {
                    readonly type: "string";
                    readonly description: "Gas limit for transaction in gas price. If not set, automatic calculation will be used.";
                    readonly pattern: "^[+]?\\d+$";
                    readonly examples: readonly ["40000"];
                };
                readonly gasPrice: {
                    readonly type: "string";
                    readonly description: "Gas price in Gwei. If not set, automatic calculation will be used.";
                    readonly pattern: "^[+]?\\d+$";
                    readonly examples: readonly ["20"];
                };
                readonly mnemonic: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "Mnemonic to generate private key for sender address. Either mnemonic and index, privateKey or signature Id must be present - depends on the type of account and xpub.";
                    readonly type: "string";
                    readonly examples: readonly ["urge pulp usage sister evidence arrest palm math please chief egg abuse"];
                };
                readonly paymentId: {
                    readonly description: "Identifier of the payment, shown for created Transaction within Tatum sender account.";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["1234"];
                };
                readonly senderAccountId: {
                    readonly maxLength: 24;
                    readonly minLength: 24;
                    readonly description: "Sender account ID";
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly senderNote: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "Note visible to owner of withdrawing account";
                    readonly type: "string";
                    readonly examples: readonly ["Sender note"];
                };
            };
            readonly required: readonly ["senderAccountId", "address", "amount", "mnemonic", "index"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly nonce: {
                    readonly type: "number";
                    readonly minimum: 0;
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                };
                readonly address: {
                    readonly description: "Blockchain address to send assets";
                    readonly maxLength: 42;
                    readonly minLength: 42;
                    readonly type: "string";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly amount: {
                    readonly description: "Amount to be sent in Ether | MATIC | XDC | KCS.";
                    readonly maxLength: 38;
                    readonly type: "string";
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly examples: readonly ["100000"];
                };
                readonly compliant: {
                    readonly description: "Compliance check, if withdrawal is not compliant, it will not be processed.";
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                };
                readonly signatureId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly description: "Identifier of the mnemonic / private key associated in signing application.\nWhen hash identifies mnemonic, index must be present to represent specific account to pay from.\nPrivate key, mnemonic or signature Id must be present.\n";
                    readonly examples: readonly ["26d3883e-4e17-48b3-a0ee-09a3e484ac83"];
                };
                readonly index: {
                    readonly description: "Derivation index of sender address.";
                    readonly maximum: 2147483647;
                    readonly type: "integer";
                    readonly examples: readonly [0];
                };
                readonly paymentId: {
                    readonly description: "Identifier of the payment, shown for created Transaction within Tatum sender account.";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["1234"];
                };
                readonly senderAccountId: {
                    readonly maxLength: 24;
                    readonly minLength: 24;
                    readonly description: "Sender account ID";
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly senderNote: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "Note visible to owner of withdrawing account";
                    readonly type: "string";
                    readonly examples: readonly ["Sender note"];
                };
                readonly gasLimit: {
                    readonly type: "string";
                    readonly description: "Gas limit for transaction in gas price. If not set, automatic calculation will be used.";
                    readonly pattern: "^[+]?\\d+$";
                    readonly examples: readonly ["40000"];
                };
                readonly gasPrice: {
                    readonly type: "string";
                    readonly description: "Gas price in Gwei. If not set, automatic calculation will be used.";
                    readonly pattern: "^[+]?\\d+$";
                    readonly examples: readonly ["20"];
                };
            };
            readonly required: readonly ["senderAccountId", "address", "signatureId", "amount"];
        }];
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly oneOf: readonly [{
                readonly type: "object";
                readonly properties: {
                    readonly id: {
                        readonly description: "ID of withdrawal. If transaction is not valid in blockchain, use this id to cancel withdrawal.";
                        readonly type: "string";
                        readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    };
                    readonly txId: {
                        readonly description: "TX hash of successful transaction.";
                        readonly type: "string";
                        readonly examples: readonly ["c83f8818db43d9ba4accfe454aa44fc33123d47a4f89d47b314d6748eb0e9bc9"];
                    };
                    readonly completed: {
                        readonly description: "If set to \"true\", the withdrawal has been completed in the virtual account; if set to \"false\", the withdrawal has not been completed and you have to <a href=\"https://apidoc.tatum.io/tag/Withdrawal#operation/completeWithdrawal\" target=\"_blank\">complete it manually</a>";
                        readonly type: "boolean";
                        readonly examples: readonly [true];
                    };
                };
                readonly required: readonly ["txId", "id", "completed"];
            }, {
                readonly type: "object";
                readonly properties: {
                    readonly signatureId: {
                        readonly description: "ID of prepared payment template to sign. This is should be stored on a client side to retrieve ID of the blockchain transaction, when signing application signs the transaction and broadcasts it to the blockchain.";
                        readonly format: "uuid";
                        readonly type: "string";
                        readonly examples: readonly ["1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6"];
                    };
                };
                readonly required: readonly ["id", "signatureId"];
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.missing";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.missing"];
                    };
                    readonly message: {
                        readonly description: "No such withdrawal.";
                        readonly type: "string";
                        readonly examples: readonly ["No such withdrawal."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "rate.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["rate.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such currency rate.";
                        readonly type: "string";
                        readonly examples: readonly ["No such currency rate."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "vc.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["vc.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such virtual currency.";
                        readonly type: "string";
                        readonly examples: readonly ["No such virtual currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.recipient.format";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.recipient.format"];
                    };
                    readonly message: {
                        readonly description: "Recipient blockchain address has incorrect format.";
                        readonly type: "string";
                        readonly examples: readonly ["Recipient blockchain address has incorrect format."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.failed.transaction.failed";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.failed.transaction.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to store withdrawal, it is impossible to create transaction.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to store withdrawal, it is impossible to create transaction."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.account.virtual";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.account.virtual"];
                    };
                    readonly message: {
                        readonly description: "Sender account cannot be virtual.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender account cannot be virtual."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "offchain.not.supported";
                        readonly type: "string";
                        readonly examples: readonly ["offchain.not.supported"];
                    };
                    readonly message: {
                        readonly description: "Offchain not supported for account with ${account.currency} currency.";
                        readonly type: "string";
                        readonly examples: readonly ["Offchain not supported for account with ${account.currency} currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "amount.format";
                        readonly type: "string";
                        readonly examples: readonly ["amount.format"];
                    };
                    readonly message: {
                        readonly description: "Amount has incorrect format.";
                        readonly type: "string";
                        readonly examples: readonly ["Amount has incorrect format."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "fee.format";
                        readonly type: "string";
                        readonly examples: readonly ["fee.format"];
                    };
                    readonly message: {
                        readonly description: "Fee has incorrect format.";
                        readonly type: "string";
                        readonly examples: readonly ["Fee has incorrect format."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.not.cancelled.transaction.failed";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.not.cancelled.transaction.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to broadcast transaction, and impossible to cancel withdrawal. ID is attached, \"${withdrawalId}\", cancel it manually.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to broadcast transaction, and impossible to cancel withdrawal. ID is attached, \"${withdrawalId}\", cancel it manually."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.prepare.failed";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.prepare.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to prepare transaction, withdrawal cancelled.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to prepare transaction, withdrawal cancelled."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.not.exists"];
                    };
                    readonly message: {
                        readonly description: "Unable to find sender account ${transaction.senderAccountId}.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find sender account ${transaction.senderAccountId}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.customer.disabled";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.customer.disabled"];
                    };
                    readonly message: {
                        readonly description: "Sender accounts customer ${senderAccount.customerId} is disabled, unable to perform payment.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender accounts customer ${senderAccount.customerId} is disabled, unable to perform payment."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "balance.insufficient";
                        readonly type: "string";
                        readonly examples: readonly ["balance.insufficient"];
                    };
                    readonly message: {
                        readonly description: "Insufficient balance for account ${transaction.senderAccountId} and payment amount ${transaction.amount}. Sender balance is ${senderAccount.balance.availableBalance as string}, amount is ${amount}";
                        readonly type: "string";
                        readonly examples: readonly ["Insufficient balance for account ${transaction.senderAccountId} and payment amount ${transaction.amount}. Sender balance is ${senderAccount.balance.availableBalance as string}, amount is ${amount}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "amount.btc";
                        readonly type: "string";
                        readonly examples: readonly ["amount.btc"];
                    };
                    readonly message: {
                        readonly description: "BTC|LTC|BCH|DOGE payment amount must be at least 0.00000001, not ${transaction.amount}.";
                        readonly type: "string";
                        readonly examples: readonly ["BTC|LTC|BCH|DOGE payment amount must be at least 0.00000001, not ${transaction.amount}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "amount.eth";
                        readonly type: "string";
                        readonly examples: readonly ["amount.eth"];
                    };
                    readonly message: {
                        readonly description: "ETH payment amount must be at least 0.000000000001, not ${transaction.amount}.";
                        readonly type: "string";
                        readonly examples: readonly ["ETH payment amount must be at least 0.000000000001, not ${transaction.amount}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.frozen";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.frozen"];
                    };
                    readonly message: {
                        readonly description: "Sender account ${transaction.senderAccountId} is frozen, unable to perform payment.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender account ${transaction.senderAccountId} is frozen, unable to perform payment."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.pending";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.pending"];
                    };
                    readonly message: {
                        readonly description: "Unable to prepare withdrawal, last withdrawal with id ${id} is not yet processed by blockchain.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to prepare withdrawal, last withdrawal with id ${id} is not yet processed by blockchain."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "private.mnemonic.missing";
                        readonly type: "string";
                        readonly examples: readonly ["private.mnemonic.missing"];
                    };
                    readonly message: {
                        readonly description: "Either mnemonic and index or private key must be present.";
                        readonly type: "string";
                        readonly examples: readonly ["Either mnemonic and index or private key must be present."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.erc20.unsupported";
                        readonly type: "string";
                        readonly examples: readonly ["eth.erc20.unsupported"];
                    };
                    readonly message: {
                        readonly description: "Unsupported ETH ERC20 blockchain.";
                        readonly type: "string";
                        readonly examples: readonly ["Unsupported ETH ERC20 blockchain."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "ethereum.broadcast.failed";
                        readonly type: "string";
                        readonly examples: readonly ["ethereum.broadcast.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to broadcast transaction due to ${error}.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to broadcast transaction due to ${error}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "gas.price.failed";
                        readonly type: "string";
                        readonly examples: readonly ["gas.price.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to obtain current GAS price.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to obtain current GAS price."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "ethereum.transaction.body";
                        readonly type: "string";
                        readonly examples: readonly ["ethereum.transaction.body"];
                    };
                    readonly message: {
                        readonly description: "Either currency, or tokenAddress must be defined.";
                        readonly type: "string";
                        readonly examples: readonly ["Either currency, or tokenAddress must be defined."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.transaction.gas";
                        readonly type: "string";
                        readonly examples: readonly ["eth.transaction.gas"];
                    };
                    readonly message: {
                        readonly description: "Unable to calculate gas limit for transaction. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to calculate gas limit for transaction. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.transaction.hash";
                        readonly type: "string";
                        readonly examples: readonly ["eth.transaction.hash"];
                    };
                    readonly message: {
                        readonly description: "Unable to calculate transaction hash. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to calculate transaction hash. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.transaction.sign";
                        readonly type: "string";
                        readonly examples: readonly ["eth.transaction.sign"];
                    };
                    readonly message: {
                        readonly description: "Unable to sign transaction. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to sign transaction. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const EnableCustomer: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly maxLength: 50;
                    readonly minLength: 10;
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Customer internal ID";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "customer.inactive";
                        readonly type: "string";
                        readonly examples: readonly ["customer.inactive"];
                    };
                    readonly message: {
                        readonly description: "Unable to perform operation on inactive customer.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to perform operation on inactive customer."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "customer.enabled";
                        readonly type: "string";
                        readonly examples: readonly ["customer.enabled"];
                    };
                    readonly message: {
                        readonly description: "Unable to enable enabled customer.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to enable enabled customer."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "customer.internal.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["customer.internal.not.exists"];
                    };
                    readonly message: {
                        readonly description: "No such customer.";
                        readonly type: "string";
                        readonly examples: readonly ["No such customer."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const EthDeployErc20: {
    readonly body: {
        readonly oneOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly symbol: {
                    readonly description: "The name of the token; used as an identifier within the Tatum platform and as a currency symbol on the blockchain";
                    readonly maxLength: 30;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                };
                readonly supply: {
                    readonly description: "The supply of the token";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["10000000"];
                };
                readonly description: {
                    readonly description: "The description of the token; used as a description within the Tatum platform and as a currency name on the blockchain";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["My Public Token"];
                };
                readonly address: {
                    readonly description: "The blockchain address to be assigned to the virtual account as a deposit address";
                    readonly maxLength: 42;
                    readonly minLength: 42;
                    readonly type: "string";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly mnemonic: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "The mnemonic to generate the private key for the blockchain address from which the fee for deploying the smart contract will be deducted; is used together with the derivation index of this address";
                    readonly type: "string";
                    readonly examples: readonly ["urge pulp usage sister evidence arrest palm math please chief egg abuse"];
                };
                readonly index: {
                    readonly description: "The derivation index of the blockchain address from which the fee for deploying the smart contract will be deducted; is used together with the mnemonic to generate the private key for this address";
                    readonly type: "integer";
                    readonly maximum: 2147483647;
                    readonly examples: readonly [0];
                };
                readonly basePair: {
                    readonly description: "The base pair for the virtual currency that represents the token; used to calculate the value of a transaction";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["EUR"];
                };
                readonly baseRate: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly minimum: 0;
                    readonly description: "The exchange rate for the base pair; one unit of the created virtual currency equals 1 unit of <code>basePair</code>*<code>baseRate</code>";
                    readonly examples: readonly [1];
                };
                readonly nonce: {
                    readonly type: "number";
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                    readonly minimum: 0;
                };
                readonly customer: {
                    readonly properties: {
                        readonly externalId: {
                            readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123654"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                            readonly default: "EUR";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly customerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                        readonly providerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                    };
                    readonly required: readonly ["externalId"];
                    readonly type: "object";
                    readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                };
            };
            readonly required: readonly ["description", "supply", "symbol", "basePair", "address", "mnemonic", "index"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly symbol: {
                    readonly description: "The name of the token; used as an identifier within the Tatum platform and as a currency symbol on the blockchain";
                    readonly maxLength: 30;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                };
                readonly supply: {
                    readonly description: "The supply of the token";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["10000000"];
                };
                readonly description: {
                    readonly description: "The description of the token; used as a description within the Tatum platform and as a currency name on the blockchain";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["My Public Token"];
                };
                readonly xpub: {
                    readonly description: "The extended public key from which a deposit address for the virtual account will be generated";
                    readonly maxLength: 150;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["xpub6EsCk1uU6cJzqvP9CdsTiJwT2rF748YkPnhv5Qo8q44DG7nn2vbyt48YRsNSUYS44jFCW9gwvD9kLQu9AuqXpTpM1c5hgg9PsuBLdeNncid"];
                };
                readonly derivationIndex: {
                    readonly description: "The derivation index to use together with the extended public key to generate the deposit address";
                    readonly format: "int32";
                    readonly type: "integer";
                    readonly maximum: 2147483647;
                    readonly examples: readonly [0];
                    readonly minimum: -2147483648;
                };
                readonly mnemonic: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "The mnemonic to generate the private key for the blockchain address from which the fee for deploying the smart contract will be deducted; is used together with the derivation index of this address";
                    readonly type: "string";
                    readonly examples: readonly ["urge pulp usage sister evidence arrest palm math please chief egg abuse"];
                };
                readonly index: {
                    readonly description: "The derivation index of the blockchain address from which the fee for deploying the smart contract will be deducted; is used together with the mnemonic to generate the private key for this address";
                    readonly type: "integer";
                    readonly maximum: 2147483647;
                    readonly examples: readonly [0];
                };
                readonly basePair: {
                    readonly description: "The base pair for the virtual currency that represents the token; used to calculate the value of a transaction";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["EUR"];
                };
                readonly baseRate: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly minimum: 0;
                    readonly description: "The exchange rate for the base pair; one unit of the created virtual currency equals 1 unit of <code>basePair</code>*<code>baseRate</code>";
                    readonly examples: readonly [1];
                };
                readonly nonce: {
                    readonly type: "number";
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                    readonly minimum: 0;
                };
                readonly customer: {
                    readonly properties: {
                        readonly externalId: {
                            readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123654"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                            readonly default: "EUR";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly customerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                        readonly providerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                    };
                    readonly required: readonly ["externalId"];
                    readonly type: "object";
                    readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                };
            };
            readonly required: readonly ["description", "supply", "symbol", "basePair", "xpub", "derivationIndex", "mnemonic", "index"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly symbol: {
                    readonly description: "The name of the token; used as an identifier within the Tatum platform and as a currency symbol on the blockchain";
                    readonly maxLength: 30;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                };
                readonly supply: {
                    readonly description: "The supply of the token";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["10000000"];
                };
                readonly description: {
                    readonly description: "The description of the token; used as a description within the Tatum platform and as a currency name on the blockchain";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["My Public Token"];
                };
                readonly address: {
                    readonly description: "The blockchain address to be assigned to the virtual account as a deposit address";
                    readonly maxLength: 42;
                    readonly minLength: 42;
                    readonly type: "string";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly privateKey: {
                    readonly description: "The private key of the blockchain address from which the fee for deploying the smart contract will be deducted";
                    readonly type: "string";
                    readonly maxLength: 66;
                    readonly minLength: 66;
                    readonly examples: readonly ["0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2"];
                };
                readonly basePair: {
                    readonly description: "The base pair for the virtual currency that represents the token; used to calculate the value of a transaction";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["EUR"];
                };
                readonly baseRate: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly minimum: 0;
                    readonly description: "The exchange rate for the base pair; one unit of the created virtual currency equals 1 unit of <code>basePair</code>*<code>baseRate</code>";
                    readonly examples: readonly [1];
                };
                readonly nonce: {
                    readonly type: "number";
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                    readonly minimum: 0;
                };
                readonly customer: {
                    readonly properties: {
                        readonly externalId: {
                            readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123654"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                            readonly default: "EUR";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly customerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                        readonly providerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                    };
                    readonly required: readonly ["externalId"];
                    readonly type: "object";
                    readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                };
            };
            readonly required: readonly ["description", "supply", "symbol", "basePair", "privateKey", "address"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly symbol: {
                    readonly description: "The name of the token; used as an identifier within the Tatum platform and as a currency symbol on the blockchain";
                    readonly maxLength: 30;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                };
                readonly supply: {
                    readonly description: "The supply of the token";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["10000000"];
                };
                readonly description: {
                    readonly description: "The description of the token; used as a description within the Tatum platform and as a currency name on the blockchain";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["My Public Token"];
                };
                readonly xpub: {
                    readonly description: "The extended public key from which a deposit address for the virtual account will be generated";
                    readonly maxLength: 150;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["xpub6EsCk1uU6cJzqvP9CdsTiJwT2rF748YkPnhv5Qo8q44DG7nn2vbyt48YRsNSUYS44jFCW9gwvD9kLQu9AuqXpTpM1c5hgg9PsuBLdeNncid"];
                };
                readonly derivationIndex: {
                    readonly description: "The derivation index to use together with the extended public key to generate the deposit address";
                    readonly format: "int32";
                    readonly type: "integer";
                    readonly maximum: 2147483647;
                    readonly examples: readonly [0];
                    readonly minimum: -2147483648;
                };
                readonly privateKey: {
                    readonly description: "The private key of the blockchain address from which the fee for deploying the smart contract will be deducted";
                    readonly type: "string";
                    readonly maxLength: 66;
                    readonly minLength: 66;
                    readonly examples: readonly ["0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2"];
                };
                readonly basePair: {
                    readonly description: "The base pair for the virtual currency that represents the token; used to calculate the value of a transaction";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["EUR"];
                };
                readonly baseRate: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly minimum: 0;
                    readonly description: "The exchange rate for the base pair; one unit of the created virtual currency equals 1 unit of <code>basePair</code>*<code>baseRate</code>";
                    readonly examples: readonly [1];
                };
                readonly nonce: {
                    readonly type: "number";
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                    readonly minimum: 0;
                };
                readonly customer: {
                    readonly properties: {
                        readonly externalId: {
                            readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123654"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                            readonly default: "EUR";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly customerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                        readonly providerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                    };
                    readonly required: readonly ["externalId"];
                    readonly type: "object";
                    readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                };
            };
            readonly required: readonly ["description", "supply", "symbol", "basePair", "xpub", "derivationIndex", "privateKey"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly symbol: {
                    readonly description: "The name of the token; used as an identifier within the Tatum platform and as a currency symbol on the blockchain";
                    readonly maxLength: 30;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                };
                readonly supply: {
                    readonly description: "The supply of the token";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["10000000"];
                };
                readonly description: {
                    readonly description: "The description of the token; used as a description within the Tatum platform and as a currency name on the blockchain";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["My Public Token"];
                };
                readonly address: {
                    readonly description: "The blockchain address to be assigned to the virtual account as a deposit address";
                    readonly maxLength: 42;
                    readonly minLength: 42;
                    readonly type: "string";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly signatureId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly description: "The KMS identifier of either the <b>private key</b> of the blockchain address from which the fee for deploying the smart contract will be deducted, or the <b>mnemonic</b> to generate the private key for the blockchain address from which the fee will be deducted";
                    readonly examples: readonly ["26d3883e-4e17-48b3-a0ee-09a3e484ac83"];
                };
                readonly index: {
                    readonly type: "number";
                    readonly minimum: 0;
                    readonly description: "(Only if the signature ID is mnemonic-based) The index of the address from which the fee will be deducted that was generated from the mnemonic";
                };
                readonly basePair: {
                    readonly description: "The base pair for the virtual currency that represents the token; used to calculate the value of a transaction";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["EUR"];
                };
                readonly baseRate: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly minimum: 0;
                    readonly description: "The exchange rate for the base pair; one unit of the created virtual currency equals 1 unit of <code>basePair</code>*<code>baseRate</code>";
                    readonly examples: readonly [1];
                };
                readonly nonce: {
                    readonly type: "number";
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                    readonly minimum: 0;
                };
                readonly customer: {
                    readonly properties: {
                        readonly externalId: {
                            readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123654"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                            readonly default: "EUR";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly customerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                        readonly providerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                    };
                    readonly required: readonly ["externalId"];
                    readonly type: "object";
                    readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                };
            };
            readonly required: readonly ["description", "supply", "symbol", "basePair", "address", "signatureId"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly symbol: {
                    readonly description: "The name of the token; used as an identifier within the Tatum platform and as a currency symbol on the blockchain";
                    readonly maxLength: 30;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                };
                readonly supply: {
                    readonly description: "The supply of the token";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["10000000"];
                };
                readonly description: {
                    readonly description: "The description of the token; used as a description within the Tatum platform and as a currency name on the blockchain";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["My Public Token"];
                };
                readonly xpub: {
                    readonly description: "The extended public key from which a deposit address for the virtual account will be generated";
                    readonly maxLength: 150;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["xpub6EsCk1uU6cJzqvP9CdsTiJwT2rF748YkPnhv5Qo8q44DG7nn2vbyt48YRsNSUYS44jFCW9gwvD9kLQu9AuqXpTpM1c5hgg9PsuBLdeNncid"];
                };
                readonly derivationIndex: {
                    readonly description: "The derivation index to use together with the extended public key to generate the deposit address";
                    readonly format: "int32";
                    readonly type: "integer";
                    readonly maximum: 2147483647;
                    readonly examples: readonly [0];
                    readonly minimum: -2147483648;
                };
                readonly signatureId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly description: "The KMS identifier of either the <b>private key</b> of the blockchain address from which the fee for deploying the smart contract will be deducted, or the <b>mnemonic</b> to generate the private key for the blockchain address from which the fee will be deducted";
                    readonly examples: readonly ["26d3883e-4e17-48b3-a0ee-09a3e484ac83"];
                };
                readonly index: {
                    readonly type: "number";
                    readonly minimum: 0;
                    readonly description: "(Only if the signature ID is mnemonic-based) The index of the address from which the fee will be deducted that was generated from the mnemonic";
                };
                readonly basePair: {
                    readonly description: "The base pair for the virtual currency that represents the token; used to calculate the value of a transaction";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["EUR"];
                };
                readonly baseRate: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly minimum: 0;
                    readonly description: "The exchange rate for the base pair; one unit of the created virtual currency equals 1 unit of <code>basePair</code>*<code>baseRate</code>";
                    readonly examples: readonly [1];
                };
                readonly nonce: {
                    readonly type: "number";
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                    readonly minimum: 0;
                };
                readonly customer: {
                    readonly properties: {
                        readonly externalId: {
                            readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123654"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                            readonly default: "EUR";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly customerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                        readonly providerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                    };
                    readonly required: readonly ["externalId"];
                    readonly type: "object";
                    readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                };
            };
            readonly required: readonly ["description", "supply", "symbol", "basePair", "xpub", "derivationIndex", "signatureId"];
        }];
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly accountId: {
                        readonly description: "Account ID with the type of currency as created ERC20/BEP20 token symbol. Account will be unfrozen when ERC20/BEP20 contract address will be set.";
                        readonly type: "string";
                        readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    };
                    readonly txId: {
                        readonly description: "TX hash of successful transaction. From this transaction receipt contract address can be obtained.";
                        readonly type: "string";
                        readonly examples: readonly ["c83f8818db43d9ba4accfe454aa44fc33123d47a4f89d47b314d6748eb0e9bc9"];
                    };
                };
                readonly type: "object";
                readonly required: readonly ["accountId", "txId"];
            }, {
                readonly properties: {
                    readonly accountId: {
                        readonly description: "Account ID with the type of currency as created ERC20/BEP20 token symbol. Account will be unfrozen when ERC20/BEP20 contract address will be set.";
                        readonly type: "string";
                        readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    };
                    readonly signatureId: {
                        readonly description: "ID of prepared payment template to sign. This is should be stored on a client side to retrieve ID of the blockchain transaction, when signing application signs the transaction and broadcasts it to the blockchain.";
                        readonly format: "uuid";
                        readonly type: "string";
                        readonly examples: readonly ["1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6"];
                    };
                };
                readonly type: "object";
                readonly required: readonly ["accountId", "signatureId"];
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.symbol.prefix";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.symbol.prefix"];
                    };
                    readonly message: {
                        readonly description: "ERC20 token cannot start with VC_.";
                        readonly type: "string";
                        readonly examples: readonly ["ERC20 token cannot start with VC_."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.address.xpub.both";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.address.xpub.both"];
                    };
                    readonly message: {
                        readonly description: "Either xpub or address must be present, not both.";
                        readonly type: "string";
                        readonly examples: readonly ["Either xpub or address must be present, not both."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.address.xpub.missing";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.address.xpub.missing"];
                    };
                    readonly message: {
                        readonly description: "Either xpub or address must be present.";
                        readonly type: "string";
                        readonly examples: readonly ["Either xpub or address must be present."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.duplicate.name";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.duplicate.name"];
                    };
                    readonly message: {
                        readonly description: "ERC20 token with given name already exists.";
                        readonly type: "string";
                        readonly examples: readonly ["ERC20 token with given name already exists."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "customer.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["customer.not.active"];
                    };
                    readonly message: {
                        readonly description: "Customer not active.";
                        readonly type: "string";
                        readonly examples: readonly ["Customer not active."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "virtual.creation.error";
                        readonly type: "string";
                        readonly examples: readonly ["virtual.creation.error"];
                    };
                    readonly message: {
                        readonly description: "It is not possible to create virtual currency.";
                        readonly type: "string";
                        readonly examples: readonly ["It is not possible to create virtual currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["account.not.exists"];
                    };
                    readonly message: {
                        readonly description: "No such account.";
                        readonly type: "string";
                        readonly examples: readonly ["No such account."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.missing";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.missing"];
                    };
                    readonly message: {
                        readonly description: "No xpub assigned to account, it is not possible to generate address. Use assignAddress method instead.";
                        readonly type: "string";
                        readonly examples: readonly ["No xpub assigned to account, it is not possible to generate address. Use assignAddress method instead."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "xpub.used";
                        readonly type: "string";
                        readonly examples: readonly ["xpub.used"];
                    };
                    readonly message: {
                        readonly description: "XPub already used registered within Tatum";
                        readonly type: "string";
                        readonly examples: readonly ["XPub already used registered within Tatum"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "Address.index.used";
                        readonly type: "string";
                        readonly examples: readonly ["address.index.used"];
                    };
                    readonly message: {
                        readonly description: "Unable to create address, derivation index is already used.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to create address, derivation index is already used."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "offchain.not.supported";
                        readonly type: "string";
                        readonly examples: readonly ["offchain.not.supported"];
                    };
                    readonly message: {
                        readonly description: "Offchain not supported for account with ${account.currency} currency.";
                        readonly type: "string";
                        readonly examples: readonly ["Offchain not supported for account with ${account.currency} currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.incompatible";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.incompatible"];
                    };
                    readonly message: {
                        readonly description: "Xpub not compatible with account currency.";
                        readonly type: "string";
                        readonly examples: readonly ["Xpub not compatible with account currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.present";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.present"];
                    };
                    readonly message: {
                        readonly description: "Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead.";
                        readonly type: "string";
                        readonly examples: readonly ["Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                    readonly required: {
                        readonly "0": "errorCode";
                        readonly "1": "message";
                        readonly "2": "statusCode";
                    };
                    readonly type: "object";
                };
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "vc.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["vc.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such virtual currency.";
                        readonly type: "string";
                        readonly examples: readonly ["No such virtual currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "Address.used";
                        readonly type: "string";
                        readonly examples: readonly ["address.used"];
                    };
                    readonly message: {
                        readonly description: "Address and currency already in use.";
                        readonly type: "string";
                        readonly examples: readonly ["Address and currency already in use."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.present";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.present"];
                    };
                    readonly message: {
                        readonly description: "Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead.";
                        readonly type: "string";
                        readonly examples: readonly ["Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                    readonly required: {
                        readonly "0": "errorCode";
                        readonly "1": "message";
                        readonly "2": "statusCode";
                    };
                    readonly type: "object";
                };
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.erc20.unsupported";
                        readonly type: "string";
                        readonly examples: readonly ["eth.erc20.unsupported"];
                    };
                    readonly message: {
                        readonly description: "Unsupported ETH ERC20 blockchain.";
                        readonly type: "string";
                        readonly examples: readonly ["Unsupported ETH ERC20 blockchain."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "ethereum.broadcast.failed";
                        readonly type: "string";
                        readonly examples: readonly ["ethereum.broadcast.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to broadcast transaction due to ${error}.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to broadcast transaction due to ${error}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "gas.price.failed";
                        readonly type: "string";
                        readonly examples: readonly ["gas.price.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to obtain current GAS price.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to obtain current GAS price."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "ethereum.transaction.body";
                        readonly type: "string";
                        readonly examples: readonly ["ethereum.transaction.body"];
                    };
                    readonly message: {
                        readonly description: "Either currency, or tokenAddress must be defined.";
                        readonly type: "string";
                        readonly examples: readonly ["Either currency, or tokenAddress must be defined."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.transaction.gas";
                        readonly type: "string";
                        readonly examples: readonly ["eth.transaction.gas"];
                    };
                    readonly message: {
                        readonly description: "Unable to calculate gas limit for transaction. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to calculate gas limit for transaction. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.transaction.hash";
                        readonly type: "string";
                        readonly examples: readonly ["eth.transaction.hash"];
                    };
                    readonly message: {
                        readonly description: "Unable to calculate transaction hash. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to calculate transaction hash. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.transaction.sign";
                        readonly type: "string";
                        readonly examples: readonly ["eth.transaction.sign"];
                    };
                    readonly message: {
                        readonly description: "Unable to sign transaction. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to sign transaction. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const EthTransfer: {
    readonly body: {
        readonly oneOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly nonce: {
                    readonly type: "number";
                    readonly minimum: 0;
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                };
                readonly address: {
                    readonly description: "Blockchain address to send assets";
                    readonly maxLength: 42;
                    readonly minLength: 42;
                    readonly type: "string";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly amount: {
                    readonly description: "Amount to be sent in Ether | MATIC | XDC | KCS.";
                    readonly maxLength: 38;
                    readonly type: "string";
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly examples: readonly ["100000"];
                };
                readonly compliant: {
                    readonly description: "Compliance check, if withdrawal is not compliant, it will not be processed.";
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                };
                readonly privateKey: {
                    readonly type: "string";
                    readonly maxLength: 66;
                    readonly minLength: 66;
                    readonly description: "Private key of sender address. Either mnemonic and index, privateKey or signature Id must be present - depends on the type of account and xpub.";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly paymentId: {
                    readonly description: "Identifier of the payment, shown for created Transaction within Tatum sender account.";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["1234"];
                };
                readonly senderAccountId: {
                    readonly maxLength: 24;
                    readonly minLength: 24;
                    readonly description: "Sender account ID";
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly senderNote: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "Note visible to owner of withdrawing account";
                    readonly type: "string";
                    readonly examples: readonly ["Sender note"];
                };
                readonly gasLimit: {
                    readonly type: "string";
                    readonly description: "Gas limit for transaction in gas price. If not set, automatic calculation will be used.";
                    readonly pattern: "^[+]?\\d+$";
                    readonly examples: readonly ["40000"];
                };
                readonly gasPrice: {
                    readonly type: "string";
                    readonly description: "Gas price in Gwei. If not set, automatic calculation will be used.";
                    readonly pattern: "^[+]?\\d+$";
                    readonly examples: readonly ["20"];
                };
            };
            readonly required: readonly ["senderAccountId", "address", "amount", "privateKey"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly nonce: {
                    readonly type: "number";
                    readonly minimum: 0;
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                };
                readonly address: {
                    readonly description: "Blockchain address to send assets";
                    readonly maxLength: 42;
                    readonly minLength: 42;
                    readonly type: "string";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly amount: {
                    readonly description: "Amount to be sent in Ether | MATIC | XDC | KCS.";
                    readonly maxLength: 38;
                    readonly type: "string";
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly examples: readonly ["100000"];
                };
                readonly compliant: {
                    readonly description: "Compliance check, if withdrawal is not compliant, it will not be processed.";
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                };
                readonly index: {
                    readonly description: "Derivation index of sender address.";
                    readonly maximum: 2147483647;
                    readonly type: "integer";
                    readonly examples: readonly [0];
                };
                readonly gasLimit: {
                    readonly type: "string";
                    readonly description: "Gas limit for transaction in gas price. If not set, automatic calculation will be used.";
                    readonly pattern: "^[+]?\\d+$";
                    readonly examples: readonly ["40000"];
                };
                readonly gasPrice: {
                    readonly type: "string";
                    readonly description: "Gas price in Gwei. If not set, automatic calculation will be used.";
                    readonly pattern: "^[+]?\\d+$";
                    readonly examples: readonly ["20"];
                };
                readonly mnemonic: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "Mnemonic to generate private key for sender address. Either mnemonic and index, privateKey or signature Id must be present - depends on the type of account and xpub.";
                    readonly type: "string";
                    readonly examples: readonly ["urge pulp usage sister evidence arrest palm math please chief egg abuse"];
                };
                readonly paymentId: {
                    readonly description: "Identifier of the payment, shown for created Transaction within Tatum sender account.";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["1234"];
                };
                readonly senderAccountId: {
                    readonly maxLength: 24;
                    readonly minLength: 24;
                    readonly description: "Sender account ID";
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly senderNote: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "Note visible to owner of withdrawing account";
                    readonly type: "string";
                    readonly examples: readonly ["Sender note"];
                };
            };
            readonly required: readonly ["senderAccountId", "address", "amount", "mnemonic", "index"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly nonce: {
                    readonly type: "number";
                    readonly minimum: 0;
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                };
                readonly address: {
                    readonly description: "Blockchain address to send assets";
                    readonly maxLength: 42;
                    readonly minLength: 42;
                    readonly type: "string";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly amount: {
                    readonly description: "Amount to be sent in Ether | MATIC | XDC | KCS.";
                    readonly maxLength: 38;
                    readonly type: "string";
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly examples: readonly ["100000"];
                };
                readonly compliant: {
                    readonly description: "Compliance check, if withdrawal is not compliant, it will not be processed.";
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                };
                readonly signatureId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly description: "Identifier of the mnemonic / private key associated in signing application.\nWhen hash identifies mnemonic, index must be present to represent specific account to pay from.\nPrivate key, mnemonic or signature Id must be present.\n";
                    readonly examples: readonly ["26d3883e-4e17-48b3-a0ee-09a3e484ac83"];
                };
                readonly index: {
                    readonly description: "Derivation index of sender address.";
                    readonly maximum: 2147483647;
                    readonly type: "integer";
                    readonly examples: readonly [0];
                };
                readonly paymentId: {
                    readonly description: "Identifier of the payment, shown for created Transaction within Tatum sender account.";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["1234"];
                };
                readonly senderAccountId: {
                    readonly maxLength: 24;
                    readonly minLength: 24;
                    readonly description: "Sender account ID";
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly senderNote: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "Note visible to owner of withdrawing account";
                    readonly type: "string";
                    readonly examples: readonly ["Sender note"];
                };
                readonly gasLimit: {
                    readonly type: "string";
                    readonly description: "Gas limit for transaction in gas price. If not set, automatic calculation will be used.";
                    readonly pattern: "^[+]?\\d+$";
                    readonly examples: readonly ["40000"];
                };
                readonly gasPrice: {
                    readonly type: "string";
                    readonly description: "Gas price in Gwei. If not set, automatic calculation will be used.";
                    readonly pattern: "^[+]?\\d+$";
                    readonly examples: readonly ["20"];
                };
            };
            readonly required: readonly ["senderAccountId", "address", "signatureId", "amount"];
        }];
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly oneOf: readonly [{
                readonly type: "object";
                readonly properties: {
                    readonly id: {
                        readonly description: "ID of withdrawal. If transaction is not valid in blockchain, use this id to cancel withdrawal.";
                        readonly type: "string";
                        readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    };
                    readonly txId: {
                        readonly description: "TX hash of successful transaction.";
                        readonly type: "string";
                        readonly examples: readonly ["c83f8818db43d9ba4accfe454aa44fc33123d47a4f89d47b314d6748eb0e9bc9"];
                    };
                    readonly completed: {
                        readonly description: "If set to \"true\", the withdrawal has been completed in the virtual account; if set to \"false\", the withdrawal has not been completed and you have to <a href=\"https://apidoc.tatum.io/tag/Withdrawal#operation/completeWithdrawal\" target=\"_blank\">complete it manually</a>";
                        readonly type: "boolean";
                        readonly examples: readonly [true];
                    };
                };
                readonly required: readonly ["txId", "id", "completed"];
            }, {
                readonly type: "object";
                readonly properties: {
                    readonly signatureId: {
                        readonly description: "ID of prepared payment template to sign. This is should be stored on a client side to retrieve ID of the blockchain transaction, when signing application signs the transaction and broadcasts it to the blockchain.";
                        readonly format: "uuid";
                        readonly type: "string";
                        readonly examples: readonly ["1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6"];
                    };
                };
                readonly required: readonly ["id", "signatureId"];
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.missing";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.missing"];
                    };
                    readonly message: {
                        readonly description: "No such withdrawal.";
                        readonly type: "string";
                        readonly examples: readonly ["No such withdrawal."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "rate.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["rate.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such currency rate.";
                        readonly type: "string";
                        readonly examples: readonly ["No such currency rate."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "vc.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["vc.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such virtual currency.";
                        readonly type: "string";
                        readonly examples: readonly ["No such virtual currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.recipient.format";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.recipient.format"];
                    };
                    readonly message: {
                        readonly description: "Recipient blockchain address has incorrect format.";
                        readonly type: "string";
                        readonly examples: readonly ["Recipient blockchain address has incorrect format."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.failed.transaction.failed";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.failed.transaction.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to store withdrawal, it is impossible to create transaction.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to store withdrawal, it is impossible to create transaction."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.account.virtual";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.account.virtual"];
                    };
                    readonly message: {
                        readonly description: "Sender account cannot be virtual.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender account cannot be virtual."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "offchain.not.supported";
                        readonly type: "string";
                        readonly examples: readonly ["offchain.not.supported"];
                    };
                    readonly message: {
                        readonly description: "Offchain not supported for account with ${account.currency} currency.";
                        readonly type: "string";
                        readonly examples: readonly ["Offchain not supported for account with ${account.currency} currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "amount.format";
                        readonly type: "string";
                        readonly examples: readonly ["amount.format"];
                    };
                    readonly message: {
                        readonly description: "Amount has incorrect format.";
                        readonly type: "string";
                        readonly examples: readonly ["Amount has incorrect format."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "fee.format";
                        readonly type: "string";
                        readonly examples: readonly ["fee.format"];
                    };
                    readonly message: {
                        readonly description: "Fee has incorrect format.";
                        readonly type: "string";
                        readonly examples: readonly ["Fee has incorrect format."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.not.cancelled.transaction.failed";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.not.cancelled.transaction.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to broadcast transaction, and impossible to cancel withdrawal. ID is attached, \"${withdrawalId}\", cancel it manually.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to broadcast transaction, and impossible to cancel withdrawal. ID is attached, \"${withdrawalId}\", cancel it manually."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.prepare.failed";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.prepare.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to prepare transaction, withdrawal cancelled.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to prepare transaction, withdrawal cancelled."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.not.exists"];
                    };
                    readonly message: {
                        readonly description: "Unable to find sender account ${transaction.senderAccountId}.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find sender account ${transaction.senderAccountId}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.customer.disabled";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.customer.disabled"];
                    };
                    readonly message: {
                        readonly description: "Sender accounts customer ${senderAccount.customerId} is disabled, unable to perform payment.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender accounts customer ${senderAccount.customerId} is disabled, unable to perform payment."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "balance.insufficient";
                        readonly type: "string";
                        readonly examples: readonly ["balance.insufficient"];
                    };
                    readonly message: {
                        readonly description: "Insufficient balance for account ${transaction.senderAccountId} and payment amount ${transaction.amount}. Sender balance is ${senderAccount.balance.availableBalance as string}, amount is ${amount}";
                        readonly type: "string";
                        readonly examples: readonly ["Insufficient balance for account ${transaction.senderAccountId} and payment amount ${transaction.amount}. Sender balance is ${senderAccount.balance.availableBalance as string}, amount is ${amount}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "amount.btc";
                        readonly type: "string";
                        readonly examples: readonly ["amount.btc"];
                    };
                    readonly message: {
                        readonly description: "BTC|LTC|BCH|DOGE payment amount must be at least 0.00000001, not ${transaction.amount}.";
                        readonly type: "string";
                        readonly examples: readonly ["BTC|LTC|BCH|DOGE payment amount must be at least 0.00000001, not ${transaction.amount}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "amount.eth";
                        readonly type: "string";
                        readonly examples: readonly ["amount.eth"];
                    };
                    readonly message: {
                        readonly description: "ETH payment amount must be at least 0.000000000001, not ${transaction.amount}.";
                        readonly type: "string";
                        readonly examples: readonly ["ETH payment amount must be at least 0.000000000001, not ${transaction.amount}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.frozen";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.frozen"];
                    };
                    readonly message: {
                        readonly description: "Sender account ${transaction.senderAccountId} is frozen, unable to perform payment.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender account ${transaction.senderAccountId} is frozen, unable to perform payment."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.pending";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.pending"];
                    };
                    readonly message: {
                        readonly description: "Unable to prepare withdrawal, last withdrawal with id ${id} is not yet processed by blockchain.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to prepare withdrawal, last withdrawal with id ${id} is not yet processed by blockchain."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "private.mnemonic.missing";
                        readonly type: "string";
                        readonly examples: readonly ["private.mnemonic.missing"];
                    };
                    readonly message: {
                        readonly description: "Either mnemonic and index or private key must be present.";
                        readonly type: "string";
                        readonly examples: readonly ["Either mnemonic and index or private key must be present."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.erc20.unsupported";
                        readonly type: "string";
                        readonly examples: readonly ["eth.erc20.unsupported"];
                    };
                    readonly message: {
                        readonly description: "Unsupported ETH ERC20 blockchain.";
                        readonly type: "string";
                        readonly examples: readonly ["Unsupported ETH ERC20 blockchain."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "ethereum.broadcast.failed";
                        readonly type: "string";
                        readonly examples: readonly ["ethereum.broadcast.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to broadcast transaction due to ${error}.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to broadcast transaction due to ${error}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "gas.price.failed";
                        readonly type: "string";
                        readonly examples: readonly ["gas.price.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to obtain current GAS price.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to obtain current GAS price."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "ethereum.transaction.body";
                        readonly type: "string";
                        readonly examples: readonly ["ethereum.transaction.body"];
                    };
                    readonly message: {
                        readonly description: "Either currency, or tokenAddress must be defined.";
                        readonly type: "string";
                        readonly examples: readonly ["Either currency, or tokenAddress must be defined."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.transaction.gas";
                        readonly type: "string";
                        readonly examples: readonly ["eth.transaction.gas"];
                    };
                    readonly message: {
                        readonly description: "Unable to calculate gas limit for transaction. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to calculate gas limit for transaction. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.transaction.hash";
                        readonly type: "string";
                        readonly examples: readonly ["eth.transaction.hash"];
                    };
                    readonly message: {
                        readonly description: "Unable to calculate transaction hash. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to calculate transaction hash. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.transaction.sign";
                        readonly type: "string";
                        readonly examples: readonly ["eth.transaction.sign"];
                    };
                    readonly message: {
                        readonly description: "Unable to sign transaction. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to sign transaction. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const EthTransferErc20: {
    readonly body: {
        readonly oneOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly senderAccountId: {
                    readonly maxLength: 24;
                    readonly minLength: 24;
                    readonly description: "Sender account ID";
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly address: {
                    readonly maxLength: 42;
                    readonly minLength: 42;
                    readonly description: "Blockchain address to send ERC20 token to";
                    readonly type: "string";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly amount: {
                    readonly description: "Amount to be sent.";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["100000"];
                };
                readonly compliant: {
                    readonly description: "Compliance check, if withdrawal is not compliant, it will not be processed.";
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                };
                readonly gasLimit: {
                    readonly type: "string";
                    readonly description: "Gas limit for transaction in gas price. If not set, automatic calculation will be used.";
                    readonly pattern: "^[+]?\\d+$";
                    readonly examples: readonly ["40000"];
                };
                readonly gasPrice: {
                    readonly type: "string";
                    readonly description: "Gas price in Gwei. If not set, automatic calculation will be used.";
                    readonly pattern: "^[+]?\\d+$";
                    readonly examples: readonly ["20"];
                };
                readonly privateKey: {
                    readonly type: "string";
                    readonly maxLength: 66;
                    readonly minLength: 66;
                    readonly description: "Private key of sender address. Either mnemonic and index, privateKey or signature Id must be present - depends on the type of account and xpub.";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly nonce: {
                    readonly type: "number";
                    readonly minimum: 0;
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                };
                readonly paymentId: {
                    readonly description: "Identifier of the payment, shown for created Transaction within Tatum sender account.";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["1234"];
                };
                readonly senderNote: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "Note visible to owner of withdrawing account";
                    readonly type: "string";
                    readonly examples: readonly ["Sender note"];
                };
            };
            readonly required: readonly ["senderAccountId", "address", "privateKey", "amount"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly senderAccountId: {
                    readonly maxLength: 24;
                    readonly minLength: 24;
                    readonly description: "Sender account ID";
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly address: {
                    readonly maxLength: 42;
                    readonly minLength: 42;
                    readonly description: "Blockchain address to send ERC20 token to";
                    readonly type: "string";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly amount: {
                    readonly description: "Amount to be sent.";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["100000"];
                };
                readonly compliant: {
                    readonly description: "Compliance check, if withdrawal is not compliant, it will not be processed.";
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                };
                readonly gasLimit: {
                    readonly type: "string";
                    readonly description: "Gas limit for transaction in gas price. If not set, automatic calculation will be used.";
                    readonly pattern: "^[+]?\\d+$";
                    readonly examples: readonly ["40000"];
                };
                readonly gasPrice: {
                    readonly type: "string";
                    readonly description: "Gas price in Gwei. If not set, automatic calculation will be used.";
                    readonly pattern: "^[+]?\\d+$";
                    readonly examples: readonly ["20"];
                };
                readonly mnemonic: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "Mnemonic to generate private key for sender address. Either mnemonic and index, or privateKey must be present - depends on the type of account and xpub.";
                    readonly type: "string";
                    readonly examples: readonly ["urge pulp usage sister evidence arrest palm math please chief egg abuse"];
                };
                readonly index: {
                    readonly description: "Derivation index of sender address.";
                    readonly maximum: 2147483647;
                    readonly type: "integer";
                    readonly examples: readonly [0];
                };
                readonly nonce: {
                    readonly type: "number";
                    readonly minimum: 0;
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                };
                readonly paymentId: {
                    readonly description: "Identifier of the payment, shown for created Transaction within Tatum sender account.";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["1234"];
                };
                readonly senderNote: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "Note visible to owner of withdrawing account";
                    readonly type: "string";
                    readonly examples: readonly ["Sender note"];
                };
            };
            readonly required: readonly ["senderAccountId", "address", "amount", "mnemonic", "index"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly senderAccountId: {
                    readonly maxLength: 24;
                    readonly minLength: 24;
                    readonly description: "Sender account ID";
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly address: {
                    readonly maxLength: 42;
                    readonly minLength: 42;
                    readonly description: "Blockchain address to send ERC20 token to";
                    readonly type: "string";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly amount: {
                    readonly description: "Amount to be sent.";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["100000"];
                };
                readonly compliant: {
                    readonly description: "Compliance check, if withdrawal is not compliant, it will not be processed.";
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                };
                readonly gasLimit: {
                    readonly type: "string";
                    readonly description: "Gas limit for transaction in gas price. If not set, automatic calculation will be used.";
                    readonly pattern: "^[+]?\\d+$";
                    readonly examples: readonly ["40000"];
                };
                readonly gasPrice: {
                    readonly type: "string";
                    readonly description: "Gas price in Gwei. If not set, automatic calculation will be used.";
                    readonly pattern: "^[+]?\\d+$";
                    readonly examples: readonly ["20"];
                };
                readonly signatureId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly description: "Identifier of the mnemonic / private key associated in signing application.\nWhen hash identifies mnemonic, index must be present to represent specific account to pay from.\nPrivate key, mnemonic or signature Id must be present.\n";
                    readonly examples: readonly ["26d3883e-4e17-48b3-a0ee-09a3e484ac83"];
                };
                readonly index: {
                    readonly description: "Derivation index of sender address.";
                    readonly maximum: 2147483647;
                    readonly type: "integer";
                    readonly examples: readonly [0];
                };
                readonly nonce: {
                    readonly type: "number";
                    readonly minimum: 0;
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                };
                readonly paymentId: {
                    readonly description: "Identifier of the payment, shown for created Transaction within Tatum sender account.";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["1234"];
                };
                readonly senderNote: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "Note visible to owner of withdrawing account";
                    readonly type: "string";
                    readonly examples: readonly ["Sender note"];
                };
            };
            readonly required: readonly ["senderAccountId", "address", "amount", "signatureId"];
        }];
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly oneOf: readonly [{
                readonly type: "object";
                readonly properties: {
                    readonly id: {
                        readonly description: "ID of withdrawal. If transaction is not valid in blockchain, use this id to cancel withdrawal.";
                        readonly type: "string";
                        readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    };
                    readonly txId: {
                        readonly description: "TX hash of successful transaction.";
                        readonly type: "string";
                        readonly examples: readonly ["c83f8818db43d9ba4accfe454aa44fc33123d47a4f89d47b314d6748eb0e9bc9"];
                    };
                    readonly completed: {
                        readonly description: "If set to \"true\", the withdrawal has been completed in the virtual account; if set to \"false\", the withdrawal has not been completed and you have to <a href=\"https://apidoc.tatum.io/tag/Withdrawal#operation/completeWithdrawal\" target=\"_blank\">complete it manually</a>";
                        readonly type: "boolean";
                        readonly examples: readonly [true];
                    };
                };
                readonly required: readonly ["txId", "id", "completed"];
            }, {
                readonly type: "object";
                readonly properties: {
                    readonly signatureId: {
                        readonly description: "ID of prepared payment template to sign. This is should be stored on a client side to retrieve ID of the blockchain transaction, when signing application signs the transaction and broadcasts it to the blockchain.";
                        readonly format: "uuid";
                        readonly type: "string";
                        readonly examples: readonly ["1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6"];
                    };
                };
                readonly required: readonly ["id", "signatureId"];
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.missing";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.missing"];
                    };
                    readonly message: {
                        readonly description: "No such withdrawal.";
                        readonly type: "string";
                        readonly examples: readonly ["No such withdrawal."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "rate.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["rate.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such currency rate.";
                        readonly type: "string";
                        readonly examples: readonly ["No such currency rate."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "vc.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["vc.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such virtual currency.";
                        readonly type: "string";
                        readonly examples: readonly ["No such virtual currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.failed.transaction.failed";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.failed.transaction.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to store withdrawal, it is impossible to create transaction.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to store withdrawal, it is impossible to create transaction."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.account.virtual";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.account.virtual"];
                    };
                    readonly message: {
                        readonly description: "Sender account cannot be virtual.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender account cannot be virtual."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "offchain.not.supported";
                        readonly type: "string";
                        readonly examples: readonly ["offchain.not.supported"];
                    };
                    readonly message: {
                        readonly description: "Offchain not supported for account with ${account.currency} currency.";
                        readonly type: "string";
                        readonly examples: readonly ["Offchain not supported for account with ${account.currency} currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "amount.format";
                        readonly type: "string";
                        readonly examples: readonly ["amount.format"];
                    };
                    readonly message: {
                        readonly description: "Amount has incorrect format.";
                        readonly type: "string";
                        readonly examples: readonly ["Amount has incorrect format."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "fee.format";
                        readonly type: "string";
                        readonly examples: readonly ["fee.format"];
                    };
                    readonly message: {
                        readonly description: "Fee has incorrect format.";
                        readonly type: "string";
                        readonly examples: readonly ["Fee has incorrect format."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.not.cancelled.transaction.failed";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.not.cancelled.transaction.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to broadcast transaction, and impossible to cancel withdrawal. ID is attached, \"${withdrawalId}\", cancel it manually.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to broadcast transaction, and impossible to cancel withdrawal. ID is attached, \"${withdrawalId}\", cancel it manually."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.prepare.failed";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.prepare.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to prepare transaction, withdrawal cancelled.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to prepare transaction, withdrawal cancelled."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.not.exists"];
                    };
                    readonly message: {
                        readonly description: "Unable to find sender account ${transaction.senderAccountId}.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find sender account ${transaction.senderAccountId}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.customer.disabled";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.customer.disabled"];
                    };
                    readonly message: {
                        readonly description: "Sender accounts customer ${senderAccount.customerId} is disabled, unable to perform payment.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender accounts customer ${senderAccount.customerId} is disabled, unable to perform payment."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "balance.insufficient";
                        readonly type: "string";
                        readonly examples: readonly ["balance.insufficient"];
                    };
                    readonly message: {
                        readonly description: "Insufficient balance for account ${transaction.senderAccountId} and payment amount ${transaction.amount}. Sender balance is ${senderAccount.balance.availableBalance as string}, amount is ${amount}";
                        readonly type: "string";
                        readonly examples: readonly ["Insufficient balance for account ${transaction.senderAccountId} and payment amount ${transaction.amount}. Sender balance is ${senderAccount.balance.availableBalance as string}, amount is ${amount}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "amount.btc";
                        readonly type: "string";
                        readonly examples: readonly ["amount.btc"];
                    };
                    readonly message: {
                        readonly description: "BTC|LTC|BCH|DOGE payment amount must be at least 0.00000001, not ${transaction.amount}.";
                        readonly type: "string";
                        readonly examples: readonly ["BTC|LTC|BCH|DOGE payment amount must be at least 0.00000001, not ${transaction.amount}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "amount.eth";
                        readonly type: "string";
                        readonly examples: readonly ["amount.eth"];
                    };
                    readonly message: {
                        readonly description: "ETH payment amount must be at least 0.000000000001, not ${transaction.amount}.";
                        readonly type: "string";
                        readonly examples: readonly ["ETH payment amount must be at least 0.000000000001, not ${transaction.amount}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.frozen";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.frozen"];
                    };
                    readonly message: {
                        readonly description: "Sender account ${transaction.senderAccountId} is frozen, unable to perform payment.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender account ${transaction.senderAccountId} is frozen, unable to perform payment."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.pending";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.pending"];
                    };
                    readonly message: {
                        readonly description: "Unable to prepare withdrawal, last withdrawal with id ${id} is not yet processed by blockchain.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to prepare withdrawal, last withdrawal with id ${id} is not yet processed by blockchain."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "private.mnemonic.missing";
                        readonly type: "string";
                        readonly examples: readonly ["private.mnemonic.missing"];
                    };
                    readonly message: {
                        readonly description: "Either mnemonic and index or private key must be present.";
                        readonly type: "string";
                        readonly examples: readonly ["Either mnemonic and index or private key must be present."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.erc20.unsupported";
                        readonly type: "string";
                        readonly examples: readonly ["eth.erc20.unsupported"];
                    };
                    readonly message: {
                        readonly description: "Unsupported ETH ERC20 blockchain.";
                        readonly type: "string";
                        readonly examples: readonly ["Unsupported ETH ERC20 blockchain."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "ethereum.broadcast.failed";
                        readonly type: "string";
                        readonly examples: readonly ["ethereum.broadcast.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to broadcast transaction due to ${error}.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to broadcast transaction due to ${error}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "gas.price.failed";
                        readonly type: "string";
                        readonly examples: readonly ["gas.price.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to obtain current GAS price.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to obtain current GAS price."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "ethereum.transaction.body";
                        readonly type: "string";
                        readonly examples: readonly ["ethereum.transaction.body"];
                    };
                    readonly message: {
                        readonly description: "Either currency, or tokenAddress must be defined.";
                        readonly type: "string";
                        readonly examples: readonly ["Either currency, or tokenAddress must be defined."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.transaction.gas";
                        readonly type: "string";
                        readonly examples: readonly ["eth.transaction.gas"];
                    };
                    readonly message: {
                        readonly description: "Unable to calculate gas limit for transaction. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to calculate gas limit for transaction. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.transaction.hash";
                        readonly type: "string";
                        readonly examples: readonly ["eth.transaction.hash"];
                    };
                    readonly message: {
                        readonly description: "Unable to calculate transaction hash. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to calculate transaction hash. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.transaction.sign";
                        readonly type: "string";
                        readonly examples: readonly ["eth.transaction.sign"];
                    };
                    readonly message: {
                        readonly description: "Unable to sign transaction. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to sign transaction. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const FindAllCustomers: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly pageSize: {
                    readonly type: "number";
                    readonly maximum: 50;
                    readonly minimum: 1;
                    readonly examples: readonly [10];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Max number of items per page is 50.";
                };
                readonly offset: {
                    readonly type: "number";
                    readonly examples: readonly [0];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Offset to obtain next page of the data.";
                };
            };
            readonly required: readonly ["pageSize"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly items: {
                readonly required: readonly ["active", "id", "externalId", "enabled"];
                readonly properties: {
                    readonly externalId: {
                        readonly description: "Customer external ID.";
                        readonly type: "string";
                        readonly examples: readonly ["651234"];
                    };
                    readonly id: {
                        readonly description: "Customer internal ID within Tatum.";
                        readonly type: "string";
                        readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    };
                    readonly enabled: {
                        readonly description: "Indicates whether customer is enabled or not";
                        readonly type: "boolean";
                        readonly examples: readonly [true];
                    };
                    readonly active: {
                        readonly description: "Indicates whether customer is active or not";
                        readonly type: "boolean";
                        readonly examples: readonly [true];
                    };
                    readonly accountingCurrency: {
                        readonly description: "All transaction will be accounted in this currency for all accounts of the customer. Currency can be overridden per account level. ISO-4217\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYN` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DOGE` `DZD` `EGP` `ERN` `ETB` `ETH` `EUR` `FJD` `FKP` `FLOW` `FUSD` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `IMP` `INR` `IQD` `IRR` `ISK` `JEP` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZMW` `ZWL`";
                        readonly type: "string";
                        readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                        readonly examples: readonly ["USD"];
                    };
                    readonly customerCountry: {
                        readonly description: "Country customer has to be compliant with";
                        readonly type: "string";
                        readonly examples: readonly ["US"];
                    };
                    readonly providerCountry: {
                        readonly description: "Country service provider has to be compliant with";
                        readonly type: "string";
                        readonly examples: readonly ["US"];
                    };
                };
                readonly type: "object";
            };
            readonly type: "array";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const FlowTransfer: {
    readonly body: {
        readonly oneOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly senderAccountId: {
                    readonly maxLength: 24;
                    readonly minLength: 24;
                    readonly description: "Sender account ID";
                    readonly type: "string";
                    readonly examples: readonly ["61b3bffddfb389cde19c73be"];
                };
                readonly account: {
                    readonly description: "Blockchain account to send from";
                    readonly maxLength: 18;
                    readonly minLength: 18;
                    readonly type: "string";
                    readonly examples: readonly ["0x955cd3f17b2fd8ad"];
                };
                readonly address: {
                    readonly description: "Blockchain address to send assets";
                    readonly maxLength: 18;
                    readonly minLength: 18;
                    readonly type: "string";
                    readonly examples: readonly ["0x955cd3f17b2fd8ae"];
                };
                readonly amount: {
                    readonly description: "Amount to be sent, in Flow.";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["10000"];
                };
                readonly mnemonic: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "Mnemonic to generate private key.";
                    readonly type: "string";
                    readonly examples: readonly ["urge pulp usage sister evidence arrest palm math please chief egg abuse"];
                };
                readonly index: {
                    readonly type: "number";
                    readonly minimum: 0;
                    readonly description: "Index to the specific address from mnemonic.";
                };
                readonly compliant: {
                    readonly description: "Compliance check, if withdrawal is not compliant, it will not be processed.";
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                };
                readonly paymentId: {
                    readonly description: "Identifier of the payment, shown for created Transaction within Tatum sender account.";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["1234"];
                };
                readonly senderNote: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "Note visible to owner of withdrawing account.";
                    readonly type: "string";
                    readonly examples: readonly ["Sender note"];
                };
            };
            readonly required: readonly ["account", "senderAccountId", "address", "amount", "mnemonic", "index"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly senderAccountId: {
                    readonly maxLength: 24;
                    readonly minLength: 24;
                    readonly description: "Sender account ID";
                    readonly type: "string";
                    readonly examples: readonly ["61b3bffddfb389cde19c73be"];
                };
                readonly account: {
                    readonly description: "Blockchain account to send from";
                    readonly maxLength: 18;
                    readonly minLength: 18;
                    readonly type: "string";
                    readonly examples: readonly ["0x955cd3f17b2fd8ad"];
                };
                readonly address: {
                    readonly description: "Blockchain address to send assets";
                    readonly maxLength: 18;
                    readonly minLength: 18;
                    readonly type: "string";
                    readonly examples: readonly [10762710243615955000];
                };
                readonly amount: {
                    readonly description: "Amount to be sent, in Flow.";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["10000"];
                };
                readonly privateKey: {
                    readonly maxLength: 64;
                    readonly minLength: 64;
                    readonly description: "Secret for account. Secret, or signature Id must be present.";
                    readonly type: "string";
                    readonly examples: readonly ["37afa218d41d9cd6a2c6f2b96d9eaa3ad96c598252bc50e4d45d62f9356a51f8"];
                };
                readonly compliant: {
                    readonly description: "Compliance check, if withdrawal is not compliant, it will not be processed.";
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                };
                readonly paymentId: {
                    readonly description: "Identifier of the payment, shown for created Transaction within Tatum sender account.";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["1234"];
                };
                readonly senderNote: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "Note visible to owner of withdrawing account.";
                    readonly type: "string";
                    readonly examples: readonly ["Sender note"];
                };
            };
            readonly required: readonly ["account", "senderAccountId", "address", "privateKey", "amount"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly senderAccountId: {
                    readonly maxLength: 24;
                    readonly minLength: 24;
                    readonly description: "Sender account ID";
                    readonly type: "string";
                    readonly examples: readonly ["61b3bffddfb389cde19c73be"];
                };
                readonly account: {
                    readonly description: "Blockchain account to send from";
                    readonly maxLength: 18;
                    readonly minLength: 18;
                    readonly type: "string";
                    readonly examples: readonly ["0x955cd3f17b2fd8ad"];
                };
                readonly address: {
                    readonly description: "Blockchain address to send assets";
                    readonly maxLength: 18;
                    readonly minLength: 18;
                    readonly type: "string";
                    readonly examples: readonly [10762710243615955000];
                };
                readonly amount: {
                    readonly description: "Amount to be sent, in Flow.";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["10000"];
                };
                readonly signatureId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly description: "Identifier of the secret associated in signing application. Secret, or signature Id must be present.";
                    readonly examples: readonly ["26d3883e-4e17-48b3-a0ee-09a3e484ac83"];
                };
                readonly index: {
                    readonly type: "number";
                    readonly minimum: 0;
                    readonly description: "If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.";
                };
                readonly compliant: {
                    readonly description: "Compliance check, if withdrawal is not compliant, it will not be processed.";
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                };
                readonly paymentId: {
                    readonly description: "Identifier of the payment, shown for created Transaction within Tatum sender account.";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["1234"];
                };
                readonly senderNote: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "Note visible to owner of withdrawing account.";
                    readonly type: "string";
                    readonly examples: readonly ["Sender note"];
                };
            };
            readonly required: readonly ["account", "senderAccountId", "address", "amount", "signatureId"];
        }];
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly oneOf: readonly [{
                readonly type: "object";
                readonly properties: {
                    readonly id: {
                        readonly description: "ID of withdrawal. If transaction is not valid in blockchain, use this id to cancel withdrawal.";
                        readonly type: "string";
                        readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    };
                    readonly txId: {
                        readonly description: "TX hash of successful transaction.";
                        readonly type: "string";
                        readonly examples: readonly ["c83f8818db43d9ba4accfe454aa44fc33123d47a4f89d47b314d6748eb0e9bc9"];
                    };
                    readonly completed: {
                        readonly description: "If set to \"true\", the withdrawal has been completed in the virtual account; if set to \"false\", the withdrawal has not been completed and you have to <a href=\"https://apidoc.tatum.io/tag/Withdrawal#operation/completeWithdrawal\" target=\"_blank\">complete it manually</a>";
                        readonly type: "boolean";
                        readonly examples: readonly [true];
                    };
                };
                readonly required: readonly ["txId", "id", "completed"];
            }, {
                readonly type: "object";
                readonly properties: {
                    readonly signatureId: {
                        readonly description: "ID of prepared payment template to sign. This is should be stored on a client side to retrieve ID of the blockchain transaction, when signing application signs the transaction and broadcasts it to the blockchain.";
                        readonly format: "uuid";
                        readonly type: "string";
                        readonly examples: readonly ["1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6"];
                    };
                };
                readonly required: readonly ["id", "signatureId"];
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "transaction.invalid.body";
                        readonly type: "string";
                        readonly examples: readonly ["transaction.invalid.body"];
                    };
                    readonly message: {
                        readonly description: "Either UTXO, or addresses must be present.";
                        readonly type: "string";
                        readonly examples: readonly ["Either UTXO, or addresses must be present."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.missing";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.missing"];
                    };
                    readonly message: {
                        readonly description: "No such withdrawal.";
                        readonly type: "string";
                        readonly examples: readonly ["No such withdrawal."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "rate.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["rate.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such currency rate.";
                        readonly type: "string";
                        readonly examples: readonly ["No such currency rate."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "vc.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["vc.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such virtual currency.";
                        readonly type: "string";
                        readonly examples: readonly ["No such virtual currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.failed.transaction.failed";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.failed.transaction.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to store withdrawal, it is impossible to create transaction.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to store withdrawal, it is impossible to create transaction."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "blockchain.error.code";
                        readonly type: "string";
                        readonly examples: readonly ["blockchain.error.code"];
                    };
                    readonly message: {
                        readonly description: "${error.message} Code: ${error.code}";
                        readonly type: "string";
                        readonly examples: readonly ["${error.message} Code: ${error.code}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "tx.hash.index.spent";
                        readonly type: "string";
                        readonly examples: readonly ["tx.hash.index.spent"];
                    };
                    readonly message: {
                        readonly description: "No such UTXO for transaction and index.";
                        readonly type: "string";
                        readonly examples: readonly ["No such UTXO for transaction and index."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "blockchain.broadcast.error";
                        readonly type: "string";
                        readonly examples: readonly ["blockchain.broadcast.error"];
                    };
                    readonly message: {
                        readonly description: "Unable to broadcast transaction, wrong input data.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to broadcast transaction, wrong input data."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "transaction.preparation.failed";
                        readonly type: "string";
                        readonly examples: readonly ["transaction.preparation.failed"];
                    };
                    readonly message: {
                        readonly description: "Impossible to prepare transaction. Either mnemonic or keyPair and attr must be present.";
                        readonly type: "string";
                        readonly examples: readonly ["Impossible to prepare transaction. Either mnemonic or keyPair and attr must be present."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.account.virtual";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.account.virtual"];
                    };
                    readonly message: {
                        readonly description: "Sender account cannot be virtual.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender account cannot be virtual."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "offchain.not.supported";
                        readonly type: "string";
                        readonly examples: readonly ["offchain.not.supported"];
                    };
                    readonly message: {
                        readonly description: "Offchain not supported for account with ${account.currency} currency.";
                        readonly type: "string";
                        readonly examples: readonly ["Offchain not supported for account with ${account.currency} currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "amount.format";
                        readonly type: "string";
                        readonly examples: readonly ["amount.format"];
                    };
                    readonly message: {
                        readonly description: "Amount has incorrect format.";
                        readonly type: "string";
                        readonly examples: readonly ["Amount has incorrect format."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "fee.format";
                        readonly type: "string";
                        readonly examples: readonly ["fee.format"];
                    };
                    readonly message: {
                        readonly description: "Fee has incorrect format.";
                        readonly type: "string";
                        readonly examples: readonly ["Fee has incorrect format."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "transaction.preparation.failed.utxo";
                        readonly type: "string";
                        readonly examples: readonly ["transaction.preparation.failed.utxo"];
                    };
                    readonly message: {
                        readonly description: "Impossible to find last UTXO.";
                        readonly type: "string";
                        readonly examples: readonly ["Impossible to find last UTXO."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "transaction.failed";
                        readonly type: "string";
                        readonly examples: readonly ["transaction.failed"];
                    };
                    readonly message: {
                        readonly description: "No spendable inputs.";
                        readonly type: "string";
                        readonly examples: readonly ["No spendable inputs."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "key.generation.failed.wrong.mnemonic";
                        readonly type: "string";
                        readonly examples: readonly ["key.generation.failed.wrong.mnemonic"];
                    };
                    readonly message: {
                        readonly description: "Unable to generate address, wrong mnemonic and index.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to generate address, wrong mnemonic and index."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.not.cancelled.transaction.failed";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.not.cancelled.transaction.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to broadcast transaction, and impossible to cancel withdrawal. ID is attached, \"${withdrawalId}\", cancel it manually.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to broadcast transaction, and impossible to cancel withdrawal. ID is attached, \"${withdrawalId}\", cancel it manually."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.prepare.failed";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.prepare.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to prepare transaction, withdrawal cancelled.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to prepare transaction, withdrawal cancelled."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.not.exists"];
                    };
                    readonly message: {
                        readonly description: "Unable to find sender account ${transaction.senderAccountId}.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find sender account ${transaction.senderAccountId}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.customer.disabled";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.customer.disabled"];
                    };
                    readonly message: {
                        readonly description: "Sender accounts customer ${senderAccount.customerId} is disabled, unable to perform payment.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender accounts customer ${senderAccount.customerId} is disabled, unable to perform payment."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "balance.insufficient";
                        readonly type: "string";
                        readonly examples: readonly ["balance.insufficient"];
                    };
                    readonly message: {
                        readonly description: "Insufficient balance for account ${transaction.senderAccountId} and payment amount ${transaction.amount}. Sender balance is ${senderAccount.balance.availableBalance as string}, amount is ${amount}";
                        readonly type: "string";
                        readonly examples: readonly ["Insufficient balance for account ${transaction.senderAccountId} and payment amount ${transaction.amount}. Sender balance is ${senderAccount.balance.availableBalance as string}, amount is ${amount}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "amount.btc";
                        readonly type: "string";
                        readonly examples: readonly ["amount.btc"];
                    };
                    readonly message: {
                        readonly description: "BTC|LTC|BCH|DOGE payment amount must be at least 0.00000001, not ${transaction.amount}.";
                        readonly type: "string";
                        readonly examples: readonly ["BTC|LTC|BCH|DOGE payment amount must be at least 0.00000001, not ${transaction.amount}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "amount.eth";
                        readonly type: "string";
                        readonly examples: readonly ["amount.eth"];
                    };
                    readonly message: {
                        readonly description: "ETH payment amount must be at least 0.000000000001, not ${transaction.amount}.";
                        readonly type: "string";
                        readonly examples: readonly ["ETH payment amount must be at least 0.000000000001, not ${transaction.amount}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.frozen";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.frozen"];
                    };
                    readonly message: {
                        readonly description: "Sender account ${transaction.senderAccountId} is frozen, unable to perform payment.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender account ${transaction.senderAccountId} is frozen, unable to perform payment."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.pending";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.pending"];
                    };
                    readonly message: {
                        readonly description: "Unable to prepare withdrawal, last withdrawal with id ${id} is not yet processed by blockchain.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to prepare withdrawal, last withdrawal with id ${id} is not yet processed by blockchain."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const FreezeAccount: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Account ID";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["account.not.exists"];
                    };
                    readonly message: {
                        readonly description: "No such account.";
                        readonly type: "string";
                        readonly examples: readonly ["No such account."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.frozen";
                        readonly type: "string";
                        readonly examples: readonly ["account.frozen"];
                    };
                    readonly message: {
                        readonly description: "Unable to freeze frozen account.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to freeze frozen account."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GenerateDepositAddress: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Account ID";
                };
            };
            readonly required: readonly ["id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly index: {
                    readonly type: "number";
                    readonly examples: readonly [2];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "<p>Derivation path index for specific address. If not present, last used index for given xpub of account + 1 is used. We recommend not to pass this value manually, since when some of the indexes are skipped, it is not possible to use them lately to generate address from it.</p>";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly required: readonly ["address", "currency"];
            readonly properties: {
                readonly address: {
                    readonly description: "Blockchain address.";
                    readonly type: "string";
                    readonly examples: readonly ["7c21ed165e294db78b95f0f181086d6f"];
                };
                readonly currency: {
                    readonly description: "Currency of generated address. BTC, LTC, DOGE, BCH, ETH, XRP, XLM, BNB, TRX, ERC20, TRC20.";
                    readonly type: "string";
                    readonly examples: readonly ["BTC"];
                };
                readonly derivationKey: {
                    readonly description: "Derivation key index for given address.";
                    readonly format: "int32";
                    readonly type: "integer";
                    readonly maximum: 2147483647;
                    readonly minimum: -2147483648;
                };
                readonly xpub: {
                    readonly description: "Extended public key to derive address from. In case of XRP, this is account address, since address is defined as DestinationTag, which is address field. In case of XLM, this is account address, since address is defined as message, which is address field.";
                    readonly type: "string";
                    readonly examples: readonly ["xpub6FB4LJzdKNkkpsjggFAGS2p34G48pqjtmSktmK2Ke3k1LKqm9ULsg8bGfDakYUrdhe2EHw5uGKX9DrMbrgYnVfDwrksT4ZVQ3vmgEruo3Ka"];
                };
                readonly destinationTag: {
                    readonly description: "In case of XRP, destinationTag is the distinguisher of the account.";
                    readonly type: "number";
                    readonly examples: readonly [5];
                };
                readonly memo: {
                    readonly description: "In case of BNB, message is the distinguisher of the account.";
                    readonly type: "string";
                    readonly examples: readonly ["5"];
                };
                readonly message: {
                    readonly description: "In case of XLM, message is the distinguisher of the account.";
                    readonly type: "string";
                    readonly examples: readonly ["5"];
                };
            };
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["account.not.exists"];
                    };
                    readonly message: {
                        readonly description: "No such account.";
                        readonly type: "string";
                        readonly examples: readonly ["No such account."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.missing";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.missing"];
                    };
                    readonly message: {
                        readonly description: "No xpub assigned to account, it is not possible to generate address. Use assignAddress method instead.";
                        readonly type: "string";
                        readonly examples: readonly ["No xpub assigned to account, it is not possible to generate address. Use assignAddress method instead."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "xpub.used";
                        readonly type: "string";
                        readonly examples: readonly ["xpub.used"];
                    };
                    readonly message: {
                        readonly description: "XPub already used registered within Tatum";
                        readonly type: "string";
                        readonly examples: readonly ["XPub already used registered within Tatum"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "Address.index.used";
                        readonly type: "string";
                        readonly examples: readonly ["address.index.used"];
                    };
                    readonly message: {
                        readonly description: "Unable to create address, derivation index is already used.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to create address, derivation index is already used."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "offchain.not.supported";
                        readonly type: "string";
                        readonly examples: readonly ["offchain.not.supported"];
                    };
                    readonly message: {
                        readonly description: "Offchain not supported for account with ${account.currency} currency.";
                        readonly type: "string";
                        readonly examples: readonly ["Offchain not supported for account with ${account.currency} currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.incompatible";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.incompatible"];
                    };
                    readonly message: {
                        readonly description: "Xpub not compatible with account currency.";
                        readonly type: "string";
                        readonly examples: readonly ["Xpub not compatible with account currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.present";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.present"];
                    };
                    readonly message: {
                        readonly description: "Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead.";
                        readonly type: "string";
                        readonly examples: readonly ["Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                    readonly required: {
                        readonly "0": "errorCode";
                        readonly "1": "message";
                        readonly "2": "statusCode";
                    };
                    readonly type: "object";
                };
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "vc.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["vc.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such virtual currency.";
                        readonly type: "string";
                        readonly examples: readonly ["No such virtual currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "Address.used";
                        readonly type: "string";
                        readonly examples: readonly ["address.used"];
                    };
                    readonly message: {
                        readonly description: "Address and currency already in use.";
                        readonly type: "string";
                        readonly examples: readonly ["Address and currency already in use."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GenerateDepositAddressesBatch: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["addresses"];
        readonly properties: {
            readonly addresses: {
                readonly type: "array";
                readonly items: {
                    readonly type: "object";
                    readonly required: readonly ["accountId"];
                    readonly properties: {
                        readonly accountId: {
                            readonly description: "ID of the account, for which blockchain address will be created.";
                            readonly maxLength: 24;
                            readonly minLength: 24;
                            readonly type: "string";
                            readonly examples: readonly ["5e6be8e9e6aa436299950c41"];
                        };
                        readonly derivationKey: {
                            readonly description: "Derivation key index for given address to generate. If not present, first not used address will be created.";
                            readonly format: "int32";
                            readonly type: "integer";
                            readonly minimum: 0;
                            readonly maximum: 2147483647;
                        };
                    };
                };
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly required: readonly ["address", "currency"];
                readonly properties: {
                    readonly address: {
                        readonly description: "Blockchain address.";
                        readonly type: "string";
                        readonly examples: readonly ["7c21ed165e294db78b95f0f181086d6f"];
                    };
                    readonly currency: {
                        readonly description: "Currency of generated address. BTC, LTC, DOGE, BCH, ETH, XRP, XLM, BNB, TRX, ERC20, TRC20.";
                        readonly type: "string";
                        readonly examples: readonly ["BTC"];
                    };
                    readonly derivationKey: {
                        readonly description: "Derivation key index for given address.";
                        readonly format: "int32";
                        readonly type: "integer";
                        readonly maximum: 2147483647;
                        readonly minimum: -2147483648;
                    };
                    readonly xpub: {
                        readonly description: "Extended public key to derive address from. In case of XRP, this is account address, since address is defined as DestinationTag, which is address field. In case of XLM, this is account address, since address is defined as message, which is address field.";
                        readonly type: "string";
                        readonly examples: readonly ["xpub6FB4LJzdKNkkpsjggFAGS2p34G48pqjtmSktmK2Ke3k1LKqm9ULsg8bGfDakYUrdhe2EHw5uGKX9DrMbrgYnVfDwrksT4ZVQ3vmgEruo3Ka"];
                    };
                    readonly destinationTag: {
                        readonly description: "In case of XRP, destinationTag is the distinguisher of the account.";
                        readonly type: "number";
                        readonly examples: readonly [5];
                    };
                    readonly memo: {
                        readonly description: "In case of BNB, message is the distinguisher of the account.";
                        readonly type: "string";
                        readonly examples: readonly ["5"];
                    };
                    readonly message: {
                        readonly description: "In case of XLM, message is the distinguisher of the account.";
                        readonly type: "string";
                        readonly examples: readonly ["5"];
                    };
                };
                readonly type: "object";
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["account.not.exists"];
                    };
                    readonly message: {
                        readonly description: "No such account.";
                        readonly type: "string";
                        readonly examples: readonly ["No such account."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.missing";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.missing"];
                    };
                    readonly message: {
                        readonly description: "No xpub assigned to account, it is not possible to generate address. Use assignAddress method instead.";
                        readonly type: "string";
                        readonly examples: readonly ["No xpub assigned to account, it is not possible to generate address. Use assignAddress method instead."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "xpub.used";
                        readonly type: "string";
                        readonly examples: readonly ["xpub.used"];
                    };
                    readonly message: {
                        readonly description: "XPub already used registered within Tatum";
                        readonly type: "string";
                        readonly examples: readonly ["XPub already used registered within Tatum"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "Address.index.used";
                        readonly type: "string";
                        readonly examples: readonly ["address.index.used"];
                    };
                    readonly message: {
                        readonly description: "Unable to create address, derivation index is already used.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to create address, derivation index is already used."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "offchain.not.supported";
                        readonly type: "string";
                        readonly examples: readonly ["offchain.not.supported"];
                    };
                    readonly message: {
                        readonly description: "Offchain not supported for account with ${account.currency} currency.";
                        readonly type: "string";
                        readonly examples: readonly ["Offchain not supported for account with ${account.currency} currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.incompatible";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.incompatible"];
                    };
                    readonly message: {
                        readonly description: "Xpub not compatible with account currency.";
                        readonly type: "string";
                        readonly examples: readonly ["Xpub not compatible with account currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.present";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.present"];
                    };
                    readonly message: {
                        readonly description: "Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead.";
                        readonly type: "string";
                        readonly examples: readonly ["Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                    readonly required: {
                        readonly "0": "errorCode";
                        readonly "1": "message";
                        readonly "2": "statusCode";
                    };
                    readonly type: "object";
                };
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "vc.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["vc.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such virtual currency.";
                        readonly type: "string";
                        readonly examples: readonly ["No such virtual currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "Address.used";
                        readonly type: "string";
                        readonly examples: readonly ["address.used"];
                    };
                    readonly message: {
                        readonly description: "Address and currency already in use.";
                        readonly type: "string";
                        readonly examples: readonly ["Address and currency already in use."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetAccountBalance: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Account ID";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly properties: {
                readonly accountBalance: {
                    readonly description: "All assets on the account, both available and blocked";
                    readonly type: "string";
                    readonly examples: readonly ["1000000"];
                };
                readonly availableBalance: {
                    readonly description: "The account balance minus the blocked assets; use the available balance to determine how much a customer can send or withdraw from their virtual account";
                    readonly type: "string";
                    readonly examples: readonly ["1000000"];
                };
            };
            readonly type: "object";
            readonly required: readonly ["accountBalance", "availableBalance"];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "account.not.exists";
                    readonly type: "string";
                    readonly examples: readonly ["account.not.exists"];
                };
                readonly message: {
                    readonly description: "No such account.";
                    readonly type: "string";
                    readonly examples: readonly ["No such account."];
                };
                readonly statusCode: {
                    readonly description: "403";
                    readonly type: "number";
                    readonly examples: readonly [403];
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetAccountByAccountId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Account ID";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly properties: {
                readonly id: {
                    readonly description: "The ID of the virtual account";
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly balance: {
                    readonly properties: {
                        readonly accountBalance: {
                            readonly description: "All assets on the account, both available and blocked";
                            readonly type: "string";
                            readonly examples: readonly ["1000000"];
                        };
                        readonly availableBalance: {
                            readonly description: "The account balance minus the blocked assets; use the available balance to determine how much a customer can send or withdraw from their virtual account";
                            readonly type: "string";
                            readonly examples: readonly ["1000000"];
                        };
                    };
                    readonly type: "object";
                    readonly required: readonly ["accountBalance", "availableBalance"];
                };
                readonly currency: {
                    readonly description: "The currency of the virtual account";
                    readonly type: "string";
                    readonly examples: readonly ["BTC"];
                };
                readonly frozen: {
                    readonly description: "If set to \"true\", the virtual account is frozen";
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                };
                readonly active: {
                    readonly description: "If set to \"true\", the virtual account is active";
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                };
                readonly customerId: {
                    readonly description: "The ID of the customer (newly created or existing one) associated with the virtual account";
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly accountNumber: {
                    readonly description: "The number associated with the virtual account in an external system";
                    readonly maxLength: 50;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["123456"];
                };
                readonly accountCode: {
                    readonly description: "The code associated with the virtual account in an external system to designate the purpose of the account in bookkeeping";
                    readonly type: "string";
                    readonly examples: readonly ["03_ACC_01"];
                };
                readonly accountingCurrency: {
                    readonly description: "The currency in which all the transactions for all accounts will be accounted";
                    readonly type: "string";
                    readonly examples: readonly ["EUR"];
                };
                readonly xpub: {
                    readonly description: "The extended public key of the blockchain wallet associated with the virtual account; used to generate deposit addresses for the virtual account";
                    readonly type: "string";
                    readonly examples: readonly ["xpub6FB4LJzdKNkkpsjggFAGS2p34G48pqjtmSktmK2Ke3k1LKqm9ULsg8bGfDakYUrdhe2EHw5uGKX9DrMbrgYnVfDwrksT4ZVQ3vmgEruo3Ka"];
                };
            };
            readonly required: readonly ["id", "active", "frozen", "currency", "balance"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "account.not.exists";
                    readonly type: "string";
                    readonly examples: readonly ["account.not.exists"];
                };
                readonly message: {
                    readonly description: "No such account.";
                    readonly type: "string";
                    readonly examples: readonly ["No such account."];
                };
                readonly statusCode: {
                    readonly description: "403";
                    readonly type: "number";
                    readonly examples: readonly [403];
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetAccounts: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly pageSize: {
                    readonly type: "number";
                    readonly maximum: 50;
                    readonly minimum: 1;
                    readonly examples: readonly [20];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Max number of items per page is 50.";
                };
                readonly page: {
                    readonly type: "number";
                    readonly examples: readonly [0];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Page number";
                };
                readonly sort: {
                    readonly type: "string";
                    readonly enum: readonly ["asc", "desc"];
                    readonly examples: readonly ["asc"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Direction of sorting. Can be asc or desc";
                };
                readonly sortBy: {
                    readonly type: "string";
                    readonly enum: readonly ["id", "account_number", "account_balance", "available_balance"];
                    readonly examples: readonly ["id"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Sort by";
                };
                readonly active: {
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Filter only active or non active accounts";
                };
                readonly onlyNonZeroBalance: {
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Filter only accounts with non zero balances";
                };
                readonly frozen: {
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Filter only frozen or non frozen accounts";
                };
                readonly currency: {
                    readonly type: "string";
                    readonly examples: readonly ["BTC"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Filter by currency";
                };
                readonly accountNumber: {
                    readonly maxLength: 50;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["AC_1011_B"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Filter by account number";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly items: {
                readonly properties: {
                    readonly id: {
                        readonly description: "The ID of the virtual account";
                        readonly type: "string";
                        readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    };
                    readonly balance: {
                        readonly properties: {
                            readonly accountBalance: {
                                readonly description: "All assets on the account, both available and blocked";
                                readonly type: "string";
                                readonly examples: readonly ["1000000"];
                            };
                            readonly availableBalance: {
                                readonly description: "The account balance minus the blocked assets; use the available balance to determine how much a customer can send or withdraw from their virtual account";
                                readonly type: "string";
                                readonly examples: readonly ["1000000"];
                            };
                        };
                        readonly type: "object";
                        readonly required: readonly ["accountBalance", "availableBalance"];
                    };
                    readonly currency: {
                        readonly description: "The currency of the virtual account";
                        readonly type: "string";
                        readonly examples: readonly ["BTC"];
                    };
                    readonly frozen: {
                        readonly description: "If set to \"true\", the virtual account is frozen";
                        readonly type: "boolean";
                        readonly examples: readonly [false];
                    };
                    readonly active: {
                        readonly description: "If set to \"true\", the virtual account is active";
                        readonly type: "boolean";
                        readonly examples: readonly [true];
                    };
                    readonly customerId: {
                        readonly description: "The ID of the customer (newly created or existing one) associated with the virtual account";
                        readonly type: "string";
                        readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    };
                    readonly accountNumber: {
                        readonly description: "The number associated with the virtual account in an external system";
                        readonly maxLength: 50;
                        readonly minLength: 1;
                        readonly type: "string";
                        readonly examples: readonly ["123456"];
                    };
                    readonly accountCode: {
                        readonly description: "The code associated with the virtual account in an external system to designate the purpose of the account in bookkeeping";
                        readonly type: "string";
                        readonly examples: readonly ["03_ACC_01"];
                    };
                    readonly accountingCurrency: {
                        readonly description: "The currency in which all the transactions for all accounts will be accounted";
                        readonly type: "string";
                        readonly examples: readonly ["EUR"];
                    };
                    readonly xpub: {
                        readonly description: "The extended public key of the blockchain wallet associated with the virtual account; used to generate deposit addresses for the virtual account";
                        readonly type: "string";
                        readonly examples: readonly ["xpub6FB4LJzdKNkkpsjggFAGS2p34G48pqjtmSktmK2Ke3k1LKqm9ULsg8bGfDakYUrdhe2EHw5uGKX9DrMbrgYnVfDwrksT4ZVQ3vmgEruo3Ka"];
                    };
                };
                readonly required: readonly ["id", "active", "frozen", "currency", "balance"];
                readonly type: "object";
            };
            readonly type: "array";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly properties: {
                readonly message: {
                    readonly description: "Forbidden";
                    readonly type: "string";
                    readonly examples: readonly ["Forbidden"];
                };
                readonly statusCode: {
                    readonly description: "403";
                    readonly type: "number";
                    readonly examples: readonly [403];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetAccountsByCustomerId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Internal customer ID";
                };
            };
            readonly required: readonly ["id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly pageSize: {
                    readonly type: "number";
                    readonly maximum: 50;
                    readonly minimum: 1;
                    readonly examples: readonly [10];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Max number of items per page is 50.";
                };
                readonly offset: {
                    readonly type: "number";
                    readonly examples: readonly [0];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Offset to obtain the next page of data.";
                };
                readonly accountCode: {
                    readonly maxLength: 50;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["AC_1011_B"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "For bookkeeping to distinct account purpose.";
                };
            };
            readonly required: readonly ["pageSize"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly items: {
                readonly properties: {
                    readonly id: {
                        readonly description: "The ID of the virtual account";
                        readonly type: "string";
                        readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    };
                    readonly balance: {
                        readonly properties: {
                            readonly accountBalance: {
                                readonly description: "All assets on the account, both available and blocked";
                                readonly type: "string";
                                readonly examples: readonly ["1000000"];
                            };
                            readonly availableBalance: {
                                readonly description: "The account balance minus the blocked assets; use the available balance to determine how much a customer can send or withdraw from their virtual account";
                                readonly type: "string";
                                readonly examples: readonly ["1000000"];
                            };
                        };
                        readonly type: "object";
                        readonly required: readonly ["accountBalance", "availableBalance"];
                    };
                    readonly currency: {
                        readonly description: "The currency of the virtual account";
                        readonly type: "string";
                        readonly examples: readonly ["BTC"];
                    };
                    readonly frozen: {
                        readonly description: "If set to \"true\", the virtual account is frozen";
                        readonly type: "boolean";
                        readonly examples: readonly [false];
                    };
                    readonly active: {
                        readonly description: "If set to \"true\", the virtual account is active";
                        readonly type: "boolean";
                        readonly examples: readonly [true];
                    };
                    readonly customerId: {
                        readonly description: "The ID of the customer (newly created or existing one) associated with the virtual account";
                        readonly type: "string";
                        readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    };
                    readonly accountNumber: {
                        readonly description: "The number associated with the virtual account in an external system";
                        readonly maxLength: 50;
                        readonly minLength: 1;
                        readonly type: "string";
                        readonly examples: readonly ["123456"];
                    };
                    readonly accountCode: {
                        readonly description: "The code associated with the virtual account in an external system to designate the purpose of the account in bookkeeping";
                        readonly type: "string";
                        readonly examples: readonly ["03_ACC_01"];
                    };
                    readonly accountingCurrency: {
                        readonly description: "The currency in which all the transactions for all accounts will be accounted";
                        readonly type: "string";
                        readonly examples: readonly ["EUR"];
                    };
                    readonly xpub: {
                        readonly description: "The extended public key of the blockchain wallet associated with the virtual account; used to generate deposit addresses for the virtual account";
                        readonly type: "string";
                        readonly examples: readonly ["xpub6FB4LJzdKNkkpsjggFAGS2p34G48pqjtmSktmK2Ke3k1LKqm9ULsg8bGfDakYUrdhe2EHw5uGKX9DrMbrgYnVfDwrksT4ZVQ3vmgEruo3Ka"];
                    };
                };
                readonly required: readonly ["id", "active", "frozen", "currency", "balance"];
                readonly type: "object";
            };
            readonly type: "array";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly properties: {
                readonly message: {
                    readonly description: "Forbidden";
                    readonly type: "string";
                    readonly examples: readonly ["Forbidden"];
                };
                readonly statusCode: {
                    readonly description: "403";
                    readonly type: "number";
                    readonly examples: readonly [403];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetAccountsCount: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly pageSize: {
                    readonly type: "number";
                    readonly maximum: 50;
                    readonly minimum: 1;
                    readonly examples: readonly [20];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Max number of items per page is 50.";
                };
                readonly page: {
                    readonly type: "number";
                    readonly examples: readonly [0];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Page number";
                };
                readonly sort: {
                    readonly type: "string";
                    readonly enum: readonly ["asc", "desc"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Direction of sorting. Can be asc or desc";
                };
                readonly sortBy: {
                    readonly type: "string";
                    readonly enum: readonly ["_id", "account_number", "account_balance", "available_balance"];
                    readonly examples: readonly ["_id"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Sort by";
                };
                readonly active: {
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Filter only active or non active accounts";
                };
                readonly onlyNonZeroBalance: {
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Filter only accounts with non zero balances";
                };
                readonly frozen: {
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Filter only frozen or non frozen accounts";
                };
                readonly currency: {
                    readonly type: "string";
                    readonly examples: readonly ["BTC"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Filter by currency";
                };
                readonly accountNumber: {
                    readonly maxLength: 50;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["AC_1011_B"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Filter by account number";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly total: {
                    readonly description: "Total entities";
                    readonly type: "number";
                    readonly examples: readonly [20];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly properties: {
                readonly message: {
                    readonly description: "Forbidden";
                    readonly type: "string";
                    readonly examples: readonly ["Forbidden"];
                };
                readonly statusCode: {
                    readonly description: "403";
                    readonly type: "number";
                    readonly examples: readonly [403];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetAllDepositAddresses: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "The ID of the virtual account to get deposit addresses for";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly items: {
                readonly required: readonly ["address", "currency"];
                readonly properties: {
                    readonly address: {
                        readonly description: "Blockchain address.";
                        readonly type: "string";
                        readonly examples: readonly ["7c21ed165e294db78b95f0f181086d6f"];
                    };
                    readonly currency: {
                        readonly description: "Currency of generated address. BTC, LTC, DOGE, BCH, ETH, XRP, XLM, BNB, TRX, ERC20, TRC20.";
                        readonly type: "string";
                        readonly examples: readonly ["BTC"];
                    };
                    readonly derivationKey: {
                        readonly description: "Derivation key index for given address.";
                        readonly format: "int32";
                        readonly type: "integer";
                        readonly maximum: 2147483647;
                        readonly minimum: -2147483648;
                    };
                    readonly xpub: {
                        readonly description: "Extended public key to derive address from. In case of XRP, this is account address, since address is defined as DestinationTag, which is address field. In case of XLM, this is account address, since address is defined as message, which is address field.";
                        readonly type: "string";
                        readonly examples: readonly ["xpub6FB4LJzdKNkkpsjggFAGS2p34G48pqjtmSktmK2Ke3k1LKqm9ULsg8bGfDakYUrdhe2EHw5uGKX9DrMbrgYnVfDwrksT4ZVQ3vmgEruo3Ka"];
                    };
                    readonly destinationTag: {
                        readonly description: "In case of XRP, destinationTag is the distinguisher of the account.";
                        readonly type: "number";
                        readonly examples: readonly [5];
                    };
                    readonly memo: {
                        readonly description: "In case of BNB, message is the distinguisher of the account.";
                        readonly type: "string";
                        readonly examples: readonly ["5"];
                    };
                    readonly message: {
                        readonly description: "In case of XLM, message is the distinguisher of the account.";
                        readonly type: "string";
                        readonly examples: readonly ["5"];
                    };
                };
                readonly type: "object";
            };
            readonly type: "array";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetBlockAmount: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["5e6be89ee6aa436299950c3f"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Account ID";
                };
            };
            readonly required: readonly ["id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly pageSize: {
                    readonly type: "number";
                    readonly maximum: 50;
                    readonly minimum: 1;
                    readonly examples: readonly [10];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Max number of items per page is 50.";
                };
                readonly offset: {
                    readonly type: "number";
                    readonly examples: readonly [0];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Offset to obtain the next page of data.";
                };
            };
            readonly required: readonly ["pageSize"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly properties: {
                    readonly id: {
                        readonly description: "The ID of the blockage";
                        readonly type: "string";
                        readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    };
                    readonly accountId: {
                        readonly description: "The ID of the account where the amount is blocked";
                        readonly type: "string";
                        readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    };
                    readonly amount: {
                        readonly description: "The amount blocked on the account";
                        readonly type: "string";
                        readonly examples: readonly ["5"];
                    };
                    readonly type: {
                        readonly description: "The type of the blockage";
                        readonly type: "string";
                        readonly examples: readonly ["DEBIT_CARD_OP"];
                    };
                    readonly description: {
                        readonly description: "The description of the blockage";
                        readonly type: "string";
                        readonly examples: readonly ["Card payment in the shop."];
                    };
                };
                readonly type: "object";
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetBlockAmountById: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["5e6be89ee6aa436299950c3f"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Blocked amount ID";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly properties: {
                readonly id: {
                    readonly description: "The ID of the blockage";
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly accountId: {
                    readonly description: "The ID of the account where the amount is blocked";
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly amount: {
                    readonly description: "The amount blocked on the account";
                    readonly type: "string";
                    readonly examples: readonly ["5"];
                };
                readonly type: {
                    readonly description: "The type of the blockage";
                    readonly type: "string";
                    readonly examples: readonly ["DEBIT_CARD_OP"];
                };
                readonly description: {
                    readonly description: "The description of the blockage";
                    readonly type: "string";
                    readonly examples: readonly ["Card payment in the shop."];
                };
            };
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetBuyTrades: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Account ID. If present, list current active buy trades for that account.";
                };
                readonly customerId: {
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Customer ID. If present, list current active buy trades for that customer.";
                };
                readonly pageSize: {
                    readonly type: "number";
                    readonly maximum: 50;
                    readonly minimum: 1;
                    readonly examples: readonly [10];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Max number of items per page is 50.";
                };
                readonly offset: {
                    readonly type: "number";
                    readonly examples: readonly [0];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Offset to obtain next page of the data.";
                };
                readonly pair: {
                    readonly type: "string";
                    readonly minLength: 3;
                    readonly maxLength: 30;
                    readonly pattern: "^[A-a-zZ0-9_\\-]+\\/[A-Za-z0-9_\\-]+$";
                    readonly examples: readonly ["BTC/EUR"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Trade pair. If present, list current active buy trades for that pair.";
                };
                readonly count: {
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Get the total trade pair count based on the filter. Either count or pageSize is accepted.";
                };
                readonly tradeType: {
                    readonly type: "string";
                    readonly enum: readonly ["FUTURE_BUY", "BUY"];
                    readonly examples: readonly ["BUY"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Trade type.";
                };
            };
            readonly required: readonly ["pageSize"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                        readonly description: "ID of the trade";
                        readonly examples: readonly ["7c21ed165e294db78b95f0f1"];
                    };
                    readonly type: {
                        readonly type: "string";
                        readonly description: "Type of the trade, BUY or SELL\n\n`BUY` `SELL`";
                        readonly enum: readonly ["BUY", "SELL"];
                        readonly examples: readonly ["BUY"];
                    };
                    readonly price: {
                        readonly type: "string";
                        readonly description: "Price to buy / sell";
                        readonly examples: readonly ["8650.4"];
                    };
                    readonly amount: {
                        readonly type: "string";
                        readonly description: "Amount of the trade to be bought / sold";
                        readonly examples: readonly ["15000"];
                    };
                    readonly pair: {
                        readonly type: "string";
                        readonly description: "Trading pair";
                        readonly examples: readonly ["BTC/EUR"];
                    };
                    readonly isMaker: {
                        readonly type: "boolean";
                        readonly description: "If closed trade was Maker or Taker trade";
                        readonly examples: readonly [true];
                    };
                    readonly fill: {
                        readonly type: "string";
                        readonly description: "How much of the trade was already filled.";
                        readonly examples: readonly ["1500"];
                    };
                    readonly feeAccountId: {
                        readonly type: "string";
                        readonly description: "ID of the account where fee will be paid, if any. If trade is a BUY or FUTURE_BUY type, feeAccountId must have same currency as a currency of currency2AccountId, and vice versa if trade is a SELL or FUTURE_SELL type, feeAccountId must have same currency as a currency of currency1AccountId.";
                        readonly minLength: 24;
                        readonly maxLength: 24;
                        readonly examples: readonly ["7c21ed165e294db78b95f0f1"];
                    };
                    readonly fee: {
                        readonly type: "number";
                        readonly description: "Percentage of the trade amount to be paid as a fee.";
                        readonly minimum: 0;
                        readonly maximum: 100;
                        readonly examples: readonly [1.5];
                    };
                    readonly currency1AccountId: {
                        readonly type: "string";
                        readonly description: "ID of the account of the currenc 1 trade currency";
                        readonly examples: readonly ["7c21ed165e294db78b95f0f1"];
                    };
                    readonly currency2AccountId: {
                        readonly type: "string";
                        readonly description: "ID of the account of the currenc 2 trade currency";
                        readonly examples: readonly ["7c21ed165e294db78b95f0f1"];
                    };
                    readonly created: {
                        readonly type: "number";
                        readonly description: "Creation date, UTC millis";
                        readonly examples: readonly [1585170363103];
                    };
                    readonly attr: {
                        readonly type: "object";
                        readonly description: "Additional attributes for the future type.";
                        readonly required: readonly ["sealDate"];
                        readonly properties: {
                            readonly sealDate: {
                                readonly type: "number";
                                readonly description: "Time in UTC when the future will be filled.";
                                readonly minimum: 0;
                                readonly examples: readonly [1572031674384];
                            };
                            readonly percentBlock: {
                                readonly description: "Percentage of the future amount which the selling or buying account must have available for the future’s creation. This amount will be blocked until the future is filled or expires.";
                                readonly type: "number";
                                readonly minimum: 0;
                                readonly maximum: 100;
                                readonly examples: readonly [1.5];
                            };
                            readonly percentPenalty: {
                                readonly description: "If one of the parties doesn’t have the full amount of the future at the time of expiration filled, the party will be penalized.";
                                readonly type: "number";
                                readonly minimum: 0;
                                readonly maximum: 100;
                                readonly examples: readonly [1.5];
                            };
                        };
                    };
                };
            };
            readonly type: "array";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetBuyTradesBody: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["pageSize"];
        readonly properties: {
            readonly id: {
                readonly type: "string";
                readonly description: "Account ID. If present, list current active sell trades for that account.";
                readonly examples: readonly ["5e68c66581f2ee32bc354087"];
            };
            readonly customerId: {
                readonly description: "Customer ID. If present, list current active buy trades for that customer.";
                readonly type: "string";
                readonly examples: readonly ["5e68c66581f2ee32bc354087"];
            };
            readonly pageSize: {
                readonly description: "Max number of items per page is 50.";
                readonly type: "number";
                readonly maximum: 50;
                readonly minimum: 1;
                readonly examples: readonly [10];
            };
            readonly offset: {
                readonly description: "Offset to obtain next page of the data.";
                readonly type: "number";
                readonly examples: readonly [0];
            };
            readonly pair: {
                readonly description: "Trade pair. If present, list current active sell trades for that pair.";
                readonly type: "string";
                readonly minLength: 3;
                readonly maxLength: 30;
                readonly pattern: "^[A-a-zZ0-9_\\-]+\\/[A-Za-z0-9_\\-]+$";
                readonly examples: readonly ["BTC/EUR"];
            };
            readonly count: {
                readonly description: "Get the total trade pair count based on the filter. Either count or pageSize is accepted.";
                readonly type: "boolean";
                readonly examples: readonly [true];
            };
            readonly tradeType: {
                readonly description: "Trade type.";
                readonly type: "string";
                readonly enum: readonly ["FUTURE_BUY", "BUY"];
                readonly examples: readonly ["BUY"];
            };
            readonly amount: {
                readonly type: "array";
                readonly description: "Amount of the trade. AND is used between filter options.";
                readonly items: {
                    readonly type: "object";
                    readonly properties: {
                        readonly op: {
                            readonly type: "string";
                            readonly description: "Filtering operation.";
                            readonly enum: readonly ["gte", "lte", "gt", "lt", "eq", "neq"];
                            readonly examples: readonly ["gte"];
                        };
                        readonly value: {
                            readonly type: "string";
                            readonly description: "Value of the operation.";
                            readonly examples: readonly ["1.5"];
                        };
                    };
                    readonly required: readonly ["op", "value"];
                };
            };
            readonly fill: {
                readonly type: "array";
                readonly description: "Fill of the trade. AND is used between filter options.";
                readonly items: {
                    readonly type: "object";
                    readonly properties: {
                        readonly op: {
                            readonly type: "string";
                            readonly description: "Filtering operation.";
                            readonly enum: readonly ["gte", "lte", "gt", "lt", "eq", "neq"];
                            readonly examples: readonly ["gte"];
                        };
                        readonly value: {
                            readonly type: "string";
                            readonly description: "Value of the operation.";
                            readonly examples: readonly ["1.5"];
                        };
                    };
                    readonly required: readonly ["op", "value"];
                };
            };
            readonly price: {
                readonly type: "array";
                readonly description: "Price of the trade. AND is used between filter options.";
                readonly items: {
                    readonly type: "object";
                    readonly properties: {
                        readonly op: {
                            readonly type: "string";
                            readonly description: "Filtering operation.";
                            readonly enum: readonly ["gte", "lte", "gt", "lt", "eq", "neq"];
                            readonly examples: readonly ["gte"];
                        };
                        readonly value: {
                            readonly type: "string";
                            readonly description: "Value of the operation.";
                            readonly examples: readonly ["1.5"];
                        };
                    };
                    readonly required: readonly ["op", "value"];
                };
            };
            readonly created: {
                readonly type: "array";
                readonly description: "Created date of the trade. AND is used between filter options.";
                readonly items: {
                    readonly type: "object";
                    readonly properties: {
                        readonly op: {
                            readonly type: "string";
                            readonly description: "Filtering operation.";
                            readonly enum: readonly ["gte", "lte", "gt", "lt", "eq", "neq"];
                            readonly examples: readonly ["gte"];
                        };
                        readonly value: {
                            readonly type: "string";
                            readonly description: "Value of the operation.";
                            readonly examples: readonly ["1.5"];
                        };
                    };
                    readonly required: readonly ["op", "value"];
                };
            };
            readonly sort: {
                readonly description: "Sorts the result by selected property. The priority of the items is determined by order of the sort properties in array.";
                readonly items: {
                    readonly type: "string";
                    readonly enum: readonly ["PRICE_ASC", "PRICE_DESC", "CREATED_ASC", "CREATED_DESC", "AMOUNT_ASC", "AMOUNT_DESC", "FILL_ASC", "FILL_DESC", "FEE_ASC", "FEE_DESC"];
                    readonly examples: readonly ["PRICE_ASC"];
                };
                readonly type: "array";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                        readonly description: "ID of the trade";
                        readonly examples: readonly ["7c21ed165e294db78b95f0f1"];
                    };
                    readonly type: {
                        readonly type: "string";
                        readonly description: "Type of the trade, BUY or SELL\n\n`BUY` `SELL`";
                        readonly enum: readonly ["BUY", "SELL"];
                        readonly examples: readonly ["BUY"];
                    };
                    readonly price: {
                        readonly type: "string";
                        readonly description: "Price to buy / sell";
                        readonly examples: readonly ["8650.4"];
                    };
                    readonly amount: {
                        readonly type: "string";
                        readonly description: "Amount of the trade to be bought / sold";
                        readonly examples: readonly ["15000"];
                    };
                    readonly pair: {
                        readonly type: "string";
                        readonly description: "Trading pair";
                        readonly examples: readonly ["BTC/EUR"];
                    };
                    readonly isMaker: {
                        readonly type: "boolean";
                        readonly description: "If closed trade was Maker or Taker trade";
                        readonly examples: readonly [true];
                    };
                    readonly fill: {
                        readonly type: "string";
                        readonly description: "How much of the trade was already filled.";
                        readonly examples: readonly ["1500"];
                    };
                    readonly feeAccountId: {
                        readonly type: "string";
                        readonly description: "ID of the account where fee will be paid, if any. If trade is a BUY or FUTURE_BUY type, feeAccountId must have same currency as a currency of currency2AccountId, and vice versa if trade is a SELL or FUTURE_SELL type, feeAccountId must have same currency as a currency of currency1AccountId.";
                        readonly minLength: 24;
                        readonly maxLength: 24;
                        readonly examples: readonly ["7c21ed165e294db78b95f0f1"];
                    };
                    readonly fee: {
                        readonly type: "number";
                        readonly description: "Percentage of the trade amount to be paid as a fee.";
                        readonly minimum: 0;
                        readonly maximum: 100;
                        readonly examples: readonly [1.5];
                    };
                    readonly currency1AccountId: {
                        readonly type: "string";
                        readonly description: "ID of the account of the currenc 1 trade currency";
                        readonly examples: readonly ["7c21ed165e294db78b95f0f1"];
                    };
                    readonly currency2AccountId: {
                        readonly type: "string";
                        readonly description: "ID of the account of the currenc 2 trade currency";
                        readonly examples: readonly ["7c21ed165e294db78b95f0f1"];
                    };
                    readonly created: {
                        readonly type: "number";
                        readonly description: "Creation date, UTC millis";
                        readonly examples: readonly [1585170363103];
                    };
                    readonly attr: {
                        readonly type: "object";
                        readonly description: "Additional attributes for the future type.";
                        readonly required: readonly ["sealDate"];
                        readonly properties: {
                            readonly sealDate: {
                                readonly type: "number";
                                readonly description: "Time in UTC when the future will be filled.";
                                readonly minimum: 0;
                                readonly examples: readonly [1572031674384];
                            };
                            readonly percentBlock: {
                                readonly description: "Percentage of the future amount which the selling or buying account must have available for the future’s creation. This amount will be blocked until the future is filled or expires.";
                                readonly type: "number";
                                readonly minimum: 0;
                                readonly maximum: 100;
                                readonly examples: readonly [1.5];
                            };
                            readonly percentPenalty: {
                                readonly description: "If one of the parties doesn’t have the full amount of the future at the time of expiration filled, the party will be penalized.";
                                readonly type: "number";
                                readonly minimum: 0;
                                readonly maximum: 100;
                                readonly examples: readonly [1.5];
                            };
                        };
                    };
                };
            };
            readonly type: "array";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetCurrency: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly name: {
                    readonly maxLength: 100;
                    readonly minLength: 3;
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["name"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly properties: {
                readonly name: {
                    readonly description: "Virtual currency name. Must be prefixed with 'VC_'.";
                    readonly type: "string";
                    readonly examples: readonly ["VC_VIRTUAL"];
                };
                readonly supply: {
                    readonly description: "Supply of virtual currency.";
                    readonly type: "string";
                    readonly examples: readonly ["1000000"];
                };
                readonly accountId: {
                    readonly description: "Virtual currency account.";
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly baseRate: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly description: "Exchange rate of the base pair. Each unit of the created curency will represent value of baseRate*1 basePair.";
                };
                readonly precision: {
                    readonly type: "number";
                    readonly description: "Number of decimal places of this virtual currency.";
                    readonly examples: readonly [6];
                };
                readonly trcType: {
                    readonly type: "string";
                    readonly description: "Type of Tron token.\n\n`TRC10` `TRC20`";
                    readonly enum: readonly ["TRC10", "TRC20"];
                    readonly examples: readonly ["TRC20"];
                };
                readonly basePair: {
                    readonly description: "Base pair for virtual currency. Transaction value will be calculated according to this base pair. e.g. 1 VC_VIRTUAL is equal to 1 BTC, if basePair is set to BTC.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `ALGO` `ADA` `BAM` `BAT` `BBD` `BCH` `BDT` `BGN` `BHD` `BIF` `BMD` `BNB` `BND` `BOB` `BRL` `BSD` `BTC` `BTN` `BWP` `BYN` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DOGE` `DZD` `EGP` `ERN` `ETB` `ETH` `EUR` `FJD` `FKP` `FLOW` `FUSD` `FREE` `GMC` `GMC_BSC` `RMD` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `IMP` `INR` `IQD` `IRR` `ISK` `JEP` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LEO` `LINK` `LKR` `LRD` `LSL` `LTC` `LTL` `LVL` `LYD` `MAD` `MATIC` `MDL` `MGA` `MKD` `MKR` `MMK` `MMY` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PAX` `PAXG` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TRON` `TUSD` `BUSD` `TWD` `TZS` `UAH` `UGX` `UNI` `USD` `USDC` `USDC_MATIC` `USDC_MATIC_NATIVE` `USDT` `USDT_TRON` `USDT_MATIC` `UYU` `UZS` `VEF` `VND` `VUV` `WBTC` `WST` `XAF` `XAG` `XAU` `XCD` `XCON` `XDR` `XOF` `XPF` `XRP` `YER` `ZAR` `ZMK` `ZMW` `ZWL`";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["BTC"];
                };
                readonly customerId: {
                    readonly description: "ID of customer associated with virtual currency.";
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly description: {
                    readonly description: "Used as a description within Tatum system.";
                    readonly type: "string";
                    readonly examples: readonly ["My Virtual Token description."];
                };
                readonly erc20Address: {
                    readonly description: "Address of ERC20 token, when virtual currency is based on the Ethereum blockchain.";
                    readonly type: "string";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly issuerAccount: {
                    readonly description: "Blockchain account for XLM or XRP based virtual currencies, which is marked as the issuer of the custom blockchain asset.";
                    readonly type: "string";
                    readonly examples: readonly ["GDKYMXOAJ5MK4EVIHHNWRGAAOUZMNZYAETMHFCD6JCVBPZ77TUAZFPKT"];
                };
                readonly chain: {
                    readonly description: "Blockchain, on which this virtual currency is paired on. Not present, when Tatum's private ledger is used as a base ledger.\n\n`ETH` `XRP` `XLM`";
                    readonly type: "string";
                    readonly enum: readonly ["ETH", "XRP", "XLM"];
                    readonly examples: readonly ["ETH"];
                };
                readonly initialAddress: {
                    readonly description: "Ethereum address, where initial supply was minted, when virtual currency is based on the Ethereum blockchain.";
                    readonly type: "string";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
            };
            readonly required: readonly ["basePair", "baseRate", "name", "accountId", "supply"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "vc.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["vc.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such virtual currency.";
                        readonly type: "string";
                        readonly examples: readonly ["No such virtual currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetCustomerByExternalOrInternalId: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Customer external or internal ID";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly required: readonly ["active", "id", "externalId", "enabled"];
            readonly properties: {
                readonly externalId: {
                    readonly description: "Customer external ID.";
                    readonly type: "string";
                    readonly examples: readonly ["651234"];
                };
                readonly id: {
                    readonly description: "Customer internal ID within Tatum.";
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly enabled: {
                    readonly description: "Indicates whether customer is enabled or not";
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                };
                readonly active: {
                    readonly description: "Indicates whether customer is active or not";
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                };
                readonly accountingCurrency: {
                    readonly description: "All transaction will be accounted in this currency for all accounts of the customer. Currency can be overridden per account level. ISO-4217\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYN` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DOGE` `DZD` `EGP` `ERN` `ETB` `ETH` `EUR` `FJD` `FKP` `FLOW` `FUSD` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `IMP` `INR` `IQD` `IRR` `ISK` `JEP` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZMW` `ZWL`";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["USD"];
                };
                readonly customerCountry: {
                    readonly description: "Country customer has to be compliant with";
                    readonly type: "string";
                    readonly examples: readonly ["US"];
                };
                readonly providerCountry: {
                    readonly description: "Country service provider has to be compliant with";
                    readonly type: "string";
                    readonly examples: readonly ["US"];
                };
            };
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "customer.not.exists";
                    readonly type: "string";
                    readonly examples: readonly ["customer.not.exists"];
                };
                readonly message: {
                    readonly description: "No customer with given external ID ${externalId} exists.";
                    readonly type: "string";
                    readonly examples: readonly ["No customer with given external ID ${externalId} exists."];
                };
                readonly statusCode: {
                    readonly description: "403";
                    readonly type: "number";
                    readonly examples: readonly [403];
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetDeposits: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly pageSize: {
                    readonly type: "number";
                    readonly maximum: 50;
                    readonly minimum: 1;
                    readonly examples: readonly [20];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Max number of items per page is 50.";
                };
                readonly page: {
                    readonly type: "number";
                    readonly examples: readonly [0];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Page number";
                };
                readonly sort: {
                    readonly type: "string";
                    readonly enum: readonly ["asc", "desc"];
                    readonly examples: readonly ["asc"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Direction of sorting. Can be asc or desc";
                };
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["Done", "InProgress"];
                    readonly examples: readonly ["Done"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Status of the deposit";
                };
                readonly currency: {
                    readonly type: "string";
                    readonly examples: readonly ["BTC"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Filter by currency";
                };
                readonly txId: {
                    readonly type: "string";
                    readonly maxLength: 80;
                    readonly minLength: 10;
                    readonly examples: readonly [2.0589336591536965e+76];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Filter by txId";
                };
                readonly to: {
                    readonly type: "string";
                    readonly examples: readonly [9.557027372635822e+47];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Filter by to address";
                };
                readonly accountId: {
                    readonly type: "string";
                    readonly examples: readonly ["628bae6095e9ad06b52eb229"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Filter by account id";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly items: {
                readonly required: readonly ["txId", "address", "timestamp", "xpub", "derivationKey", "amount", "status", "accountId", "currency", "reference", "vout", "spent", "blockHeight"];
                readonly properties: {
                    readonly txId: {
                        readonly type: "string";
                        readonly examples: readonly ["6498A3BE7313FEF32C9C0130F321D7808439F7F59D41932122383CC9E109F534"];
                    };
                    readonly address: {
                        readonly description: "Blockchain address.";
                        readonly type: "string";
                        readonly examples: readonly ["7c21ed165e294db78b95f0f181086d6f"];
                    };
                    readonly timestamp: {
                        readonly type: "number";
                        readonly minimum: 0;
                        readonly description: "End interval in UTC millis.";
                        readonly examples: readonly [1613654998398];
                    };
                    readonly xpub: {
                        readonly description: "Extended public key to derive address from.";
                        readonly type: "string";
                        readonly examples: readonly ["xpub6FB4LJzdKNkkpsjggFAGS2p34G48pqjtmSktmK2Ke3k1LKqm9ULsg8bGfDakYUrdhe2EHw5uGKX9DrMbrgYnVfDwrksT4ZVQ3vmgEruo3Ka"];
                    };
                    readonly derivationKey: {
                        readonly description: "Derivation key index for given address.";
                        readonly format: "int32";
                        readonly type: "integer";
                        readonly maximum: 2147483647;
                        readonly minimum: -2147483648;
                    };
                    readonly amount: {
                        readonly type: "string";
                        readonly description: "Amount of the trade";
                        readonly examples: readonly ["15000"];
                    };
                    readonly status: {
                        readonly type: "string";
                        readonly description: "Status of deposit\n\n`InProgress` `Done` `Failed`";
                        readonly enum: readonly ["InProgress", "Done", "Failed"];
                        readonly examples: readonly ["Done"];
                    };
                    readonly accountId: {
                        readonly description: "Account ID.";
                        readonly type: "string";
                        readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    };
                    readonly currency: {
                        readonly type: "string";
                        readonly description: "Currency";
                        readonly examples: readonly ["BTC"];
                    };
                    readonly reference: {
                        readonly type: "string";
                        readonly examples: readonly ["some reference"];
                    };
                    readonly vout: {
                        readonly type: "number";
                        readonly examples: readonly [0];
                    };
                    readonly spent: {
                        readonly type: "boolean";
                    };
                    readonly blockHeight: {
                        readonly type: "number";
                        readonly minimum: 0;
                        readonly description: "Block of deposit";
                        readonly examples: readonly [228232166];
                    };
                    readonly blockHash: {
                        readonly description: "Hash of the block where this transaction was in.";
                        readonly type: "string";
                        readonly examples: readonly ["0xcf2c40f475e78c7c19778e1ae999a0e371c9319b38182ea15dc94536f13f9137"];
                    };
                    readonly from: {
                        readonly description: "Blockchain address.";
                        readonly type: "string";
                        readonly examples: readonly ["7c21ed165e294db78b95f0f181086d6f"];
                    };
                };
                readonly type: "object";
            };
            readonly type: "array";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetDepositsCount: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly pageSize: {
                    readonly type: "number";
                    readonly maximum: 50;
                    readonly minimum: 1;
                    readonly examples: readonly [20];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Max number of items per page is 50.";
                };
                readonly page: {
                    readonly type: "number";
                    readonly examples: readonly [0];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Page number";
                };
                readonly sort: {
                    readonly type: "string";
                    readonly enum: readonly ["asc", "desc"];
                    readonly examples: readonly ["asc"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Direction of sorting. Can be asc or desc";
                };
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["Done", "InProgress"];
                    readonly examples: readonly ["Done"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Type of the deposit";
                };
                readonly currency: {
                    readonly type: "string";
                    readonly examples: readonly ["BTC"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Filter by currency";
                };
                readonly txId: {
                    readonly type: "string";
                    readonly maxLength: 80;
                    readonly minLength: 10;
                    readonly examples: readonly [2.0589336591536965e+76];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Filter by txId";
                };
                readonly to: {
                    readonly type: "string";
                    readonly examples: readonly [9.557027372635822e+47];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Filter by to address";
                };
                readonly accountId: {
                    readonly type: "string";
                    readonly examples: readonly ["628bae6095e9ad06b52eb229"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Filter by account id";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly total: {
                    readonly description: "Total entities";
                    readonly type: "number";
                    readonly examples: readonly [20];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetHistoricalTrades: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Account ID. If present, only closed trades for given account will be present.";
                };
                readonly pair: {
                    readonly type: "string";
                    readonly minLength: 3;
                    readonly maxLength: 30;
                    readonly pattern: "^[A-a-zZ0-9_\\-]+\\/[A-Za-z0-9_\\-]+$";
                    readonly examples: readonly ["BTC/ETH"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Trade pair. If present, only closed trades on given trade pair will be present.";
                };
                readonly pageSize: {
                    readonly type: "number";
                    readonly maximum: 50;
                    readonly minimum: 1;
                    readonly examples: readonly [10];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Max number of items per page is 50.";
                };
                readonly offset: {
                    readonly type: "number";
                    readonly examples: readonly [0];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Offset to obtain next page of the data.";
                };
                readonly count: {
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Get the total trade pair count based on the filter. Either count or pageSize is accepted.";
                };
                readonly types: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["FUTURE_BUY", "FUTURE_SELL", "BUY", "SELL"];
                        readonly examples: readonly ["BUY"];
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Trade types.";
                };
            };
            readonly required: readonly ["pageSize"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                        readonly description: "ID of the trade";
                        readonly examples: readonly ["7c21ed165e294db78b95f0f1"];
                    };
                    readonly type: {
                        readonly type: "string";
                        readonly description: "Type of the trade, BUY or SELL\n\n`BUY` `SELL`";
                        readonly enum: readonly ["BUY", "SELL"];
                        readonly examples: readonly ["BUY"];
                    };
                    readonly price: {
                        readonly type: "string";
                        readonly description: "Price to buy / sell";
                        readonly examples: readonly ["8650.4"];
                    };
                    readonly amount: {
                        readonly type: "string";
                        readonly description: "Amount of the trade to be bought / sold";
                        readonly examples: readonly ["15000"];
                    };
                    readonly pair: {
                        readonly type: "string";
                        readonly description: "Trading pair";
                        readonly examples: readonly ["BTC/EUR"];
                    };
                    readonly isMaker: {
                        readonly type: "boolean";
                        readonly description: "If closed trade was Maker or Taker trade";
                        readonly examples: readonly [true];
                    };
                    readonly fill: {
                        readonly type: "string";
                        readonly description: "How much of the trade was already filled.";
                        readonly examples: readonly ["1500"];
                    };
                    readonly feeAccountId: {
                        readonly type: "string";
                        readonly description: "ID of the account where fee will be paid, if any. If trade is a BUY or FUTURE_BUY type, feeAccountId must have same currency as a currency of currency2AccountId, and vice versa if trade is a SELL or FUTURE_SELL type, feeAccountId must have same currency as a currency of currency1AccountId.";
                        readonly minLength: 24;
                        readonly maxLength: 24;
                        readonly examples: readonly ["7c21ed165e294db78b95f0f1"];
                    };
                    readonly fee: {
                        readonly type: "number";
                        readonly description: "Percentage of the trade amount to be paid as a fee.";
                        readonly minimum: 0;
                        readonly maximum: 100;
                        readonly examples: readonly [1.5];
                    };
                    readonly currency1AccountId: {
                        readonly type: "string";
                        readonly description: "ID of the account of the currenc 1 trade currency";
                        readonly examples: readonly ["7c21ed165e294db78b95f0f1"];
                    };
                    readonly currency2AccountId: {
                        readonly type: "string";
                        readonly description: "ID of the account of the currenc 2 trade currency";
                        readonly examples: readonly ["7c21ed165e294db78b95f0f1"];
                    };
                    readonly created: {
                        readonly type: "number";
                        readonly description: "Creation date, UTC millis";
                        readonly examples: readonly [1585170363103];
                    };
                    readonly attr: {
                        readonly type: "object";
                        readonly description: "Additional attributes for the future type.";
                        readonly required: readonly ["sealDate"];
                        readonly properties: {
                            readonly sealDate: {
                                readonly type: "number";
                                readonly description: "Time in UTC when the future will be filled.";
                                readonly minimum: 0;
                                readonly examples: readonly [1572031674384];
                            };
                            readonly percentBlock: {
                                readonly description: "Percentage of the future amount which the selling or buying account must have available for the future’s creation. This amount will be blocked until the future is filled or expires.";
                                readonly type: "number";
                                readonly minimum: 0;
                                readonly maximum: 100;
                                readonly examples: readonly [1.5];
                            };
                            readonly percentPenalty: {
                                readonly description: "If one of the parties doesn’t have the full amount of the future at the time of expiration filled, the party will be penalized.";
                                readonly type: "number";
                                readonly minimum: 0;
                                readonly maximum: 100;
                                readonly examples: readonly [1.5];
                            };
                        };
                    };
                };
            };
            readonly type: "array";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetHistoricalTradesBody: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["pageSize"];
        readonly properties: {
            readonly id: {
                readonly description: "Account ID. If present, only closed trades for given account will be present.";
                readonly type: "string";
                readonly examples: readonly ["5e68c66581f2ee32bc354087"];
            };
            readonly customerId: {
                readonly description: "Customer ID. If present, only closed trades for given customer will be present.";
                readonly type: "string";
                readonly examples: readonly ["5e68c66581f2ee32bc354087"];
            };
            readonly pageSize: {
                readonly description: "Max number of items per page is 50.";
                readonly type: "number";
                readonly maximum: 50;
                readonly minimum: 1;
                readonly examples: readonly [10];
            };
            readonly offset: {
                readonly description: "Offset to obtain next page of the data.";
                readonly type: "number";
                readonly examples: readonly [0];
            };
            readonly pair: {
                readonly description: "Trade pair. If present, list historical trades for that pair.";
                readonly type: "string";
                readonly minLength: 3;
                readonly maxLength: 30;
                readonly pattern: "^[A-a-zZ0-9_\\-]+\\/[A-Za-z0-9_\\-]+$";
                readonly examples: readonly ["BTC/EUR"];
            };
            readonly count: {
                readonly description: "Get the total trade pair count based on the filter. Either count or pageSize is accepted.";
                readonly type: "boolean";
                readonly examples: readonly [true];
            };
            readonly types: {
                readonly description: "Trade types.";
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                    readonly enum: readonly ["FUTURE_BUY", "FUTURE_SELL", "BUY", "SELL"];
                    readonly examples: readonly ["BUY"];
                };
            };
            readonly amount: {
                readonly type: "array";
                readonly description: "Amount of the trade. AND is used between filter options.";
                readonly items: {
                    readonly type: "object";
                    readonly properties: {
                        readonly op: {
                            readonly type: "string";
                            readonly description: "Filtering operation.";
                            readonly enum: readonly ["gte", "lte", "gt", "lt", "eq", "neq"];
                            readonly examples: readonly ["gte"];
                        };
                        readonly value: {
                            readonly type: "string";
                            readonly description: "Value of the operation.";
                            readonly examples: readonly ["1.5"];
                        };
                    };
                    readonly required: readonly ["op", "value"];
                };
            };
            readonly fill: {
                readonly type: "array";
                readonly description: "Fill of the trade. AND is used between filter options.";
                readonly items: {
                    readonly type: "object";
                    readonly properties: {
                        readonly op: {
                            readonly type: "string";
                            readonly description: "Filtering operation.";
                            readonly enum: readonly ["gte", "lte", "gt", "lt", "eq", "neq"];
                            readonly examples: readonly ["gte"];
                        };
                        readonly value: {
                            readonly type: "string";
                            readonly description: "Value of the operation.";
                            readonly examples: readonly ["1.5"];
                        };
                    };
                    readonly required: readonly ["op", "value"];
                };
            };
            readonly price: {
                readonly type: "array";
                readonly description: "Price of the trade. AND is used between filter options.";
                readonly items: {
                    readonly type: "object";
                    readonly properties: {
                        readonly op: {
                            readonly type: "string";
                            readonly description: "Filtering operation.";
                            readonly enum: readonly ["gte", "lte", "gt", "lt", "eq", "neq"];
                            readonly examples: readonly ["gte"];
                        };
                        readonly value: {
                            readonly type: "string";
                            readonly description: "Value of the operation.";
                            readonly examples: readonly ["1.5"];
                        };
                    };
                    readonly required: readonly ["op", "value"];
                };
            };
            readonly created: {
                readonly type: "array";
                readonly description: "Created date of the trade. AND is used between filter options.";
                readonly items: {
                    readonly type: "object";
                    readonly properties: {
                        readonly op: {
                            readonly type: "string";
                            readonly description: "Filtering operation.";
                            readonly enum: readonly ["gte", "lte", "gt", "lt", "eq", "neq"];
                            readonly examples: readonly ["gte"];
                        };
                        readonly value: {
                            readonly type: "string";
                            readonly description: "Value of the operation.";
                            readonly examples: readonly ["1.5"];
                        };
                    };
                    readonly required: readonly ["op", "value"];
                };
            };
            readonly sort: {
                readonly description: "Sorts the result by selected property. The priority of the items is determined by order of the sort properties in array.";
                readonly items: {
                    readonly type: "string";
                    readonly enum: readonly ["PRICE_ASC", "PRICE_DESC", "CREATED_ASC", "CREATED_DESC", "AMOUNT_ASC", "AMOUNT_DESC", "FILL_ASC", "FILL_DESC", "FEE_ASC", "FEE_DESC"];
                    readonly examples: readonly ["PRICE_ASC"];
                };
                readonly type: "array";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                        readonly description: "ID of the trade";
                        readonly examples: readonly ["7c21ed165e294db78b95f0f1"];
                    };
                    readonly type: {
                        readonly type: "string";
                        readonly description: "Type of the trade, BUY or SELL\n\n`BUY` `SELL`";
                        readonly enum: readonly ["BUY", "SELL"];
                        readonly examples: readonly ["BUY"];
                    };
                    readonly price: {
                        readonly type: "string";
                        readonly description: "Price to buy / sell";
                        readonly examples: readonly ["8650.4"];
                    };
                    readonly amount: {
                        readonly type: "string";
                        readonly description: "Amount of the trade to be bought / sold";
                        readonly examples: readonly ["15000"];
                    };
                    readonly pair: {
                        readonly type: "string";
                        readonly description: "Trading pair";
                        readonly examples: readonly ["BTC/EUR"];
                    };
                    readonly isMaker: {
                        readonly type: "boolean";
                        readonly description: "If closed trade was Maker or Taker trade";
                        readonly examples: readonly [true];
                    };
                    readonly fill: {
                        readonly type: "string";
                        readonly description: "How much of the trade was already filled.";
                        readonly examples: readonly ["1500"];
                    };
                    readonly feeAccountId: {
                        readonly type: "string";
                        readonly description: "ID of the account where fee will be paid, if any. If trade is a BUY or FUTURE_BUY type, feeAccountId must have same currency as a currency of currency2AccountId, and vice versa if trade is a SELL or FUTURE_SELL type, feeAccountId must have same currency as a currency of currency1AccountId.";
                        readonly minLength: 24;
                        readonly maxLength: 24;
                        readonly examples: readonly ["7c21ed165e294db78b95f0f1"];
                    };
                    readonly fee: {
                        readonly type: "number";
                        readonly description: "Percentage of the trade amount to be paid as a fee.";
                        readonly minimum: 0;
                        readonly maximum: 100;
                        readonly examples: readonly [1.5];
                    };
                    readonly currency1AccountId: {
                        readonly type: "string";
                        readonly description: "ID of the account of the currenc 1 trade currency";
                        readonly examples: readonly ["7c21ed165e294db78b95f0f1"];
                    };
                    readonly currency2AccountId: {
                        readonly type: "string";
                        readonly description: "ID of the account of the currenc 2 trade currency";
                        readonly examples: readonly ["7c21ed165e294db78b95f0f1"];
                    };
                    readonly created: {
                        readonly type: "number";
                        readonly description: "Creation date, UTC millis";
                        readonly examples: readonly [1585170363103];
                    };
                    readonly attr: {
                        readonly type: "object";
                        readonly description: "Additional attributes for the future type.";
                        readonly required: readonly ["sealDate"];
                        readonly properties: {
                            readonly sealDate: {
                                readonly type: "number";
                                readonly description: "Time in UTC when the future will be filled.";
                                readonly minimum: 0;
                                readonly examples: readonly [1572031674384];
                            };
                            readonly percentBlock: {
                                readonly description: "Percentage of the future amount which the selling or buying account must have available for the future’s creation. This amount will be blocked until the future is filled or expires.";
                                readonly type: "number";
                                readonly minimum: 0;
                                readonly maximum: 100;
                                readonly examples: readonly [1.5];
                            };
                            readonly percentPenalty: {
                                readonly description: "If one of the parties doesn’t have the full amount of the future at the time of expiration filled, the party will be penalized.";
                                readonly type: "number";
                                readonly minimum: 0;
                                readonly maximum: 100;
                                readonly examples: readonly [1.5];
                            };
                        };
                    };
                };
            };
            readonly type: "array";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetMatchedTrades: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["pageSize"];
        readonly properties: {
            readonly id: {
                readonly type: "string";
                readonly description: "Account ID. If present, list matched FUTURE_BUY/FUTURE_SELL orders trades for that account.";
                readonly examples: readonly ["5e68c66581f2ee32bc354087"];
            };
            readonly customerId: {
                readonly description: "Customer ID. If present, list matched FUTURE_BUY/FUTURE_SELL orders trades for that customer.";
                readonly type: "string";
                readonly examples: readonly ["5e68c66581f2ee32bc354087"];
            };
            readonly pageSize: {
                readonly description: "Max number of items per page is 50.";
                readonly type: "number";
                readonly maximum: 50;
                readonly minimum: 1;
                readonly examples: readonly [10];
            };
            readonly offset: {
                readonly description: "Offset to obtain next page of the data.";
                readonly type: "number";
                readonly examples: readonly [0];
            };
            readonly pair: {
                readonly description: "Trade pair. If present, list matched FUTURE_BUY/FUTURE_SELL orders trades for that pair.";
                readonly type: "string";
                readonly minLength: 3;
                readonly maxLength: 30;
                readonly pattern: "^[A-a-zZ0-9_\\-]+\\/[A-Za-z0-9_\\-]+$";
                readonly examples: readonly ["BTC/EUR"];
            };
            readonly count: {
                readonly description: "Get the total trade pair count based on the filter. Either count or pageSize is accepted.";
                readonly type: "boolean";
                readonly examples: readonly [true];
            };
            readonly type: {
                readonly description: "Trade type.";
                readonly type: "string";
                readonly enum: readonly ["FUTURE_SELL", "FUTURE_BUY"];
                readonly examples: readonly ["FUTURE_SELL"];
            };
            readonly amount: {
                readonly type: "array";
                readonly description: "Amount of the trade. AND is used between filter options.";
                readonly items: {
                    readonly type: "object";
                    readonly properties: {
                        readonly op: {
                            readonly type: "string";
                            readonly description: "Filtering operation.";
                            readonly enum: readonly ["gte", "lte", "gt", "lt", "eq", "neq"];
                            readonly examples: readonly ["gte"];
                        };
                        readonly value: {
                            readonly type: "string";
                            readonly description: "Value of the operation.";
                            readonly examples: readonly ["1.5"];
                        };
                    };
                    readonly required: readonly ["op", "value"];
                };
            };
            readonly fill: {
                readonly type: "array";
                readonly description: "Fill of the trade. AND is used between filter options.";
                readonly items: {
                    readonly type: "object";
                    readonly properties: {
                        readonly op: {
                            readonly type: "string";
                            readonly description: "Filtering operation.";
                            readonly enum: readonly ["gte", "lte", "gt", "lt", "eq", "neq"];
                            readonly examples: readonly ["gte"];
                        };
                        readonly value: {
                            readonly type: "string";
                            readonly description: "Value of the operation.";
                            readonly examples: readonly ["1.5"];
                        };
                    };
                    readonly required: readonly ["op", "value"];
                };
            };
            readonly price: {
                readonly type: "array";
                readonly description: "Price of the trade. AND is used between filter options.";
                readonly items: {
                    readonly type: "object";
                    readonly properties: {
                        readonly op: {
                            readonly type: "string";
                            readonly description: "Filtering operation.";
                            readonly enum: readonly ["gte", "lte", "gt", "lt", "eq", "neq"];
                            readonly examples: readonly ["gte"];
                        };
                        readonly value: {
                            readonly type: "string";
                            readonly description: "Value of the operation.";
                            readonly examples: readonly ["1.5"];
                        };
                    };
                    readonly required: readonly ["op", "value"];
                };
            };
            readonly created: {
                readonly type: "array";
                readonly description: "Created date of the trade. AND is used between filter options.";
                readonly items: {
                    readonly type: "object";
                    readonly properties: {
                        readonly op: {
                            readonly type: "string";
                            readonly description: "Filtering operation.";
                            readonly enum: readonly ["gte", "lte", "gt", "lt", "eq", "neq"];
                            readonly examples: readonly ["gte"];
                        };
                        readonly value: {
                            readonly type: "string";
                            readonly description: "Value of the operation.";
                            readonly examples: readonly ["1.5"];
                        };
                    };
                    readonly required: readonly ["op", "value"];
                };
            };
            readonly sort: {
                readonly description: "Sorts the result by selected property. The priority of the items is determined by order of the sort properties in array.";
                readonly items: {
                    readonly type: "string";
                    readonly enum: readonly ["PRICE_ASC", "PRICE_DESC", "CREATED_ASC", "CREATED_DESC", "AMOUNT_ASC", "AMOUNT_DESC", "FILL_ASC", "FILL_DESC", "FEE_ASC", "FEE_DESC"];
                    readonly examples: readonly ["PRICE_ASC"];
                };
                readonly type: "array";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                        readonly description: "ID of the trade";
                        readonly examples: readonly ["7c21ed165e294db78b95f0f1"];
                    };
                    readonly type: {
                        readonly type: "string";
                        readonly description: "Type of the trade, BUY or SELL\n\n`BUY` `SELL`";
                        readonly enum: readonly ["BUY", "SELL"];
                        readonly examples: readonly ["BUY"];
                    };
                    readonly price: {
                        readonly type: "string";
                        readonly description: "Price to buy / sell";
                        readonly examples: readonly ["8650.4"];
                    };
                    readonly amount: {
                        readonly type: "string";
                        readonly description: "Amount of the trade to be bought / sold";
                        readonly examples: readonly ["15000"];
                    };
                    readonly pair: {
                        readonly type: "string";
                        readonly description: "Trading pair";
                        readonly examples: readonly ["BTC/EUR"];
                    };
                    readonly isMaker: {
                        readonly type: "boolean";
                        readonly description: "If closed trade was Maker or Taker trade";
                        readonly examples: readonly [true];
                    };
                    readonly fill: {
                        readonly type: "string";
                        readonly description: "How much of the trade was already filled.";
                        readonly examples: readonly ["1500"];
                    };
                    readonly feeAccountId: {
                        readonly type: "string";
                        readonly description: "ID of the account where fee will be paid, if any. If trade is a BUY or FUTURE_BUY type, feeAccountId must have same currency as a currency of currency2AccountId, and vice versa if trade is a SELL or FUTURE_SELL type, feeAccountId must have same currency as a currency of currency1AccountId.";
                        readonly minLength: 24;
                        readonly maxLength: 24;
                        readonly examples: readonly ["7c21ed165e294db78b95f0f1"];
                    };
                    readonly fee: {
                        readonly type: "number";
                        readonly description: "Percentage of the trade amount to be paid as a fee.";
                        readonly minimum: 0;
                        readonly maximum: 100;
                        readonly examples: readonly [1.5];
                    };
                    readonly currency1AccountId: {
                        readonly type: "string";
                        readonly description: "ID of the account of the currenc 1 trade currency";
                        readonly examples: readonly ["7c21ed165e294db78b95f0f1"];
                    };
                    readonly currency2AccountId: {
                        readonly type: "string";
                        readonly description: "ID of the account of the currenc 2 trade currency";
                        readonly examples: readonly ["7c21ed165e294db78b95f0f1"];
                    };
                    readonly created: {
                        readonly type: "number";
                        readonly description: "Creation date, UTC millis";
                        readonly examples: readonly [1585170363103];
                    };
                    readonly attr: {
                        readonly type: "object";
                        readonly description: "Additional attributes for the future type.";
                        readonly required: readonly ["sealDate"];
                        readonly properties: {
                            readonly sealDate: {
                                readonly type: "number";
                                readonly description: "Time in UTC when the future will be filled.";
                                readonly minimum: 0;
                                readonly examples: readonly [1572031674384];
                            };
                            readonly percentBlock: {
                                readonly description: "Percentage of the future amount which the selling or buying account must have available for the future’s creation. This amount will be blocked until the future is filled or expires.";
                                readonly type: "number";
                                readonly minimum: 0;
                                readonly maximum: 100;
                                readonly examples: readonly [1.5];
                            };
                            readonly percentPenalty: {
                                readonly description: "If one of the parties doesn’t have the full amount of the future at the time of expiration filled, the party will be penalized.";
                                readonly type: "number";
                                readonly minimum: 0;
                                readonly maximum: 100;
                                readonly examples: readonly [1.5];
                            };
                        };
                    };
                };
            };
            readonly type: "array";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetSellTrades: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Account ID. If present, list current active sell trades for that account.";
                };
                readonly customerId: {
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Customer ID. If present, list current active buy trades for that customer.";
                };
                readonly pageSize: {
                    readonly type: "number";
                    readonly maximum: 50;
                    readonly minimum: 1;
                    readonly examples: readonly [10];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Max number of items per page is 50.";
                };
                readonly offset: {
                    readonly type: "number";
                    readonly examples: readonly [0];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Offset to obtain next page of the data.";
                };
                readonly pair: {
                    readonly type: "string";
                    readonly minLength: 3;
                    readonly maxLength: 30;
                    readonly pattern: "^[A-a-zZ0-9_\\-]+\\/[A-Za-z0-9_\\-]+$";
                    readonly examples: readonly ["BTC/EUR"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Trade pair. If present, list current active sell trades for that pair.";
                };
                readonly count: {
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Get the total trade pair count based on the filter. Either count or pageSize is accepted.";
                };
                readonly tradeType: {
                    readonly type: "string";
                    readonly enum: readonly ["FUTURE_SELL", "SELL"];
                    readonly examples: readonly ["SELL"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Trade type.";
                };
            };
            readonly required: readonly ["pageSize"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                        readonly description: "ID of the trade";
                        readonly examples: readonly ["7c21ed165e294db78b95f0f1"];
                    };
                    readonly type: {
                        readonly type: "string";
                        readonly description: "Type of the trade, BUY or SELL\n\n`BUY` `SELL`";
                        readonly enum: readonly ["BUY", "SELL"];
                        readonly examples: readonly ["BUY"];
                    };
                    readonly price: {
                        readonly type: "string";
                        readonly description: "Price to buy / sell";
                        readonly examples: readonly ["8650.4"];
                    };
                    readonly amount: {
                        readonly type: "string";
                        readonly description: "Amount of the trade to be bought / sold";
                        readonly examples: readonly ["15000"];
                    };
                    readonly pair: {
                        readonly type: "string";
                        readonly description: "Trading pair";
                        readonly examples: readonly ["BTC/EUR"];
                    };
                    readonly isMaker: {
                        readonly type: "boolean";
                        readonly description: "If closed trade was Maker or Taker trade";
                        readonly examples: readonly [true];
                    };
                    readonly fill: {
                        readonly type: "string";
                        readonly description: "How much of the trade was already filled.";
                        readonly examples: readonly ["1500"];
                    };
                    readonly feeAccountId: {
                        readonly type: "string";
                        readonly description: "ID of the account where fee will be paid, if any. If trade is a BUY or FUTURE_BUY type, feeAccountId must have same currency as a currency of currency2AccountId, and vice versa if trade is a SELL or FUTURE_SELL type, feeAccountId must have same currency as a currency of currency1AccountId.";
                        readonly minLength: 24;
                        readonly maxLength: 24;
                        readonly examples: readonly ["7c21ed165e294db78b95f0f1"];
                    };
                    readonly fee: {
                        readonly type: "number";
                        readonly description: "Percentage of the trade amount to be paid as a fee.";
                        readonly minimum: 0;
                        readonly maximum: 100;
                        readonly examples: readonly [1.5];
                    };
                    readonly currency1AccountId: {
                        readonly type: "string";
                        readonly description: "ID of the account of the currenc 1 trade currency";
                        readonly examples: readonly ["7c21ed165e294db78b95f0f1"];
                    };
                    readonly currency2AccountId: {
                        readonly type: "string";
                        readonly description: "ID of the account of the currenc 2 trade currency";
                        readonly examples: readonly ["7c21ed165e294db78b95f0f1"];
                    };
                    readonly created: {
                        readonly type: "number";
                        readonly description: "Creation date, UTC millis";
                        readonly examples: readonly [1585170363103];
                    };
                    readonly attr: {
                        readonly type: "object";
                        readonly description: "Additional attributes for the future type.";
                        readonly required: readonly ["sealDate"];
                        readonly properties: {
                            readonly sealDate: {
                                readonly type: "number";
                                readonly description: "Time in UTC when the future will be filled.";
                                readonly minimum: 0;
                                readonly examples: readonly [1572031674384];
                            };
                            readonly percentBlock: {
                                readonly description: "Percentage of the future amount which the selling or buying account must have available for the future’s creation. This amount will be blocked until the future is filled or expires.";
                                readonly type: "number";
                                readonly minimum: 0;
                                readonly maximum: 100;
                                readonly examples: readonly [1.5];
                            };
                            readonly percentPenalty: {
                                readonly description: "If one of the parties doesn’t have the full amount of the future at the time of expiration filled, the party will be penalized.";
                                readonly type: "number";
                                readonly minimum: 0;
                                readonly maximum: 100;
                                readonly examples: readonly [1.5];
                            };
                        };
                    };
                };
            };
            readonly type: "array";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetSellTradesBody: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["pageSize"];
        readonly properties: {
            readonly id: {
                readonly type: "string";
                readonly description: "Account ID. If present, list current active sell trades for that account.";
                readonly examples: readonly ["5e68c66581f2ee32bc354087"];
            };
            readonly customerId: {
                readonly description: "Customer ID. If present, list current active buy trades for that customer.";
                readonly type: "string";
                readonly examples: readonly ["5e68c66581f2ee32bc354087"];
            };
            readonly pageSize: {
                readonly description: "Max number of items per page is 50.";
                readonly type: "number";
                readonly maximum: 50;
                readonly minimum: 1;
                readonly examples: readonly [10];
            };
            readonly offset: {
                readonly description: "Offset to obtain next page of the data.";
                readonly type: "number";
                readonly examples: readonly [0];
            };
            readonly pair: {
                readonly description: "Trade pair. If present, list current active sell trades for that pair.";
                readonly type: "string";
                readonly minLength: 3;
                readonly maxLength: 30;
                readonly pattern: "^[A-a-zZ0-9_\\-]+\\/[A-Za-z0-9_\\-]+$";
                readonly examples: readonly ["BTC/EUR"];
            };
            readonly count: {
                readonly description: "Get the total trade pair count based on the filter. Either count or pageSize is accepted.";
                readonly type: "boolean";
                readonly examples: readonly [true];
            };
            readonly tradeType: {
                readonly description: "Trade type.";
                readonly type: "string";
                readonly enum: readonly ["FUTURE_SELL", "SELL"];
                readonly examples: readonly ["SELL"];
            };
            readonly amount: {
                readonly type: "array";
                readonly description: "Amount of the trade. AND is used between filter options.";
                readonly items: {
                    readonly type: "object";
                    readonly properties: {
                        readonly op: {
                            readonly type: "string";
                            readonly description: "Filtering operation.";
                            readonly enum: readonly ["gte", "lte", "gt", "lt", "eq", "neq"];
                            readonly examples: readonly ["gte"];
                        };
                        readonly value: {
                            readonly type: "string";
                            readonly description: "Value of the operation.";
                            readonly examples: readonly ["1.5"];
                        };
                    };
                    readonly required: readonly ["op", "value"];
                };
            };
            readonly fill: {
                readonly type: "array";
                readonly description: "Fill of the trade. AND is used between filter options.";
                readonly items: {
                    readonly type: "object";
                    readonly properties: {
                        readonly op: {
                            readonly type: "string";
                            readonly description: "Filtering operation.";
                            readonly enum: readonly ["gte", "lte", "gt", "lt", "eq", "neq"];
                            readonly examples: readonly ["gte"];
                        };
                        readonly value: {
                            readonly type: "string";
                            readonly description: "Value of the operation.";
                            readonly examples: readonly ["1.5"];
                        };
                    };
                    readonly required: readonly ["op", "value"];
                };
            };
            readonly price: {
                readonly type: "array";
                readonly description: "Price of the trade. AND is used between filter options.";
                readonly items: {
                    readonly type: "object";
                    readonly properties: {
                        readonly op: {
                            readonly type: "string";
                            readonly description: "Filtering operation.";
                            readonly enum: readonly ["gte", "lte", "gt", "lt", "eq", "neq"];
                            readonly examples: readonly ["gte"];
                        };
                        readonly value: {
                            readonly type: "string";
                            readonly description: "Value of the operation.";
                            readonly examples: readonly ["1.5"];
                        };
                    };
                    readonly required: readonly ["op", "value"];
                };
            };
            readonly created: {
                readonly type: "array";
                readonly description: "Created date of the trade. AND is used between filter options.";
                readonly items: {
                    readonly type: "object";
                    readonly properties: {
                        readonly op: {
                            readonly type: "string";
                            readonly description: "Filtering operation.";
                            readonly enum: readonly ["gte", "lte", "gt", "lt", "eq", "neq"];
                            readonly examples: readonly ["gte"];
                        };
                        readonly value: {
                            readonly type: "string";
                            readonly description: "Value of the operation.";
                            readonly examples: readonly ["1.5"];
                        };
                    };
                    readonly required: readonly ["op", "value"];
                };
            };
            readonly sort: {
                readonly description: "Sorts the result by selected property. The priority of the items is determined by order of the sort properties in array.";
                readonly items: {
                    readonly type: "string";
                    readonly enum: readonly ["PRICE_ASC", "PRICE_DESC", "CREATED_ASC", "CREATED_DESC", "AMOUNT_ASC", "AMOUNT_DESC", "FILL_ASC", "FILL_DESC", "FEE_ASC", "FEE_DESC"];
                    readonly examples: readonly ["PRICE_ASC"];
                };
                readonly type: "array";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                        readonly description: "ID of the trade";
                        readonly examples: readonly ["7c21ed165e294db78b95f0f1"];
                    };
                    readonly type: {
                        readonly type: "string";
                        readonly description: "Type of the trade, BUY or SELL\n\n`BUY` `SELL`";
                        readonly enum: readonly ["BUY", "SELL"];
                        readonly examples: readonly ["BUY"];
                    };
                    readonly price: {
                        readonly type: "string";
                        readonly description: "Price to buy / sell";
                        readonly examples: readonly ["8650.4"];
                    };
                    readonly amount: {
                        readonly type: "string";
                        readonly description: "Amount of the trade to be bought / sold";
                        readonly examples: readonly ["15000"];
                    };
                    readonly pair: {
                        readonly type: "string";
                        readonly description: "Trading pair";
                        readonly examples: readonly ["BTC/EUR"];
                    };
                    readonly isMaker: {
                        readonly type: "boolean";
                        readonly description: "If closed trade was Maker or Taker trade";
                        readonly examples: readonly [true];
                    };
                    readonly fill: {
                        readonly type: "string";
                        readonly description: "How much of the trade was already filled.";
                        readonly examples: readonly ["1500"];
                    };
                    readonly feeAccountId: {
                        readonly type: "string";
                        readonly description: "ID of the account where fee will be paid, if any. If trade is a BUY or FUTURE_BUY type, feeAccountId must have same currency as a currency of currency2AccountId, and vice versa if trade is a SELL or FUTURE_SELL type, feeAccountId must have same currency as a currency of currency1AccountId.";
                        readonly minLength: 24;
                        readonly maxLength: 24;
                        readonly examples: readonly ["7c21ed165e294db78b95f0f1"];
                    };
                    readonly fee: {
                        readonly type: "number";
                        readonly description: "Percentage of the trade amount to be paid as a fee.";
                        readonly minimum: 0;
                        readonly maximum: 100;
                        readonly examples: readonly [1.5];
                    };
                    readonly currency1AccountId: {
                        readonly type: "string";
                        readonly description: "ID of the account of the currenc 1 trade currency";
                        readonly examples: readonly ["7c21ed165e294db78b95f0f1"];
                    };
                    readonly currency2AccountId: {
                        readonly type: "string";
                        readonly description: "ID of the account of the currenc 2 trade currency";
                        readonly examples: readonly ["7c21ed165e294db78b95f0f1"];
                    };
                    readonly created: {
                        readonly type: "number";
                        readonly description: "Creation date, UTC millis";
                        readonly examples: readonly [1585170363103];
                    };
                    readonly attr: {
                        readonly type: "object";
                        readonly description: "Additional attributes for the future type.";
                        readonly required: readonly ["sealDate"];
                        readonly properties: {
                            readonly sealDate: {
                                readonly type: "number";
                                readonly description: "Time in UTC when the future will be filled.";
                                readonly minimum: 0;
                                readonly examples: readonly [1572031674384];
                            };
                            readonly percentBlock: {
                                readonly description: "Percentage of the future amount which the selling or buying account must have available for the future’s creation. This amount will be blocked until the future is filled or expires.";
                                readonly type: "number";
                                readonly minimum: 0;
                                readonly maximum: 100;
                                readonly examples: readonly [1.5];
                            };
                            readonly percentPenalty: {
                                readonly description: "If one of the parties doesn’t have the full amount of the future at the time of expiration filled, the party will be penalized.";
                                readonly type: "number";
                                readonly minimum: 0;
                                readonly maximum: 100;
                                readonly examples: readonly [1.5];
                            };
                        };
                    };
                };
            };
            readonly type: "array";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetTradeById: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Trade ID";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "ID of the trade";
                    readonly examples: readonly ["7c21ed165e294db78b95f0f1"];
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the trade, BUY or SELL\n\n`BUY` `SELL`";
                    readonly enum: readonly ["BUY", "SELL"];
                    readonly examples: readonly ["BUY"];
                };
                readonly price: {
                    readonly type: "string";
                    readonly description: "Price to buy / sell";
                    readonly examples: readonly ["8650.4"];
                };
                readonly amount: {
                    readonly type: "string";
                    readonly description: "Amount of the trade to be bought / sold";
                    readonly examples: readonly ["15000"];
                };
                readonly pair: {
                    readonly type: "string";
                    readonly description: "Trading pair";
                    readonly examples: readonly ["BTC/EUR"];
                };
                readonly isMaker: {
                    readonly type: "boolean";
                    readonly description: "If closed trade was Maker or Taker trade";
                    readonly examples: readonly [true];
                };
                readonly fill: {
                    readonly type: "string";
                    readonly description: "How much of the trade was already filled.";
                    readonly examples: readonly ["1500"];
                };
                readonly feeAccountId: {
                    readonly type: "string";
                    readonly description: "ID of the account where fee will be paid, if any. If trade is a BUY or FUTURE_BUY type, feeAccountId must have same currency as a currency of currency2AccountId, and vice versa if trade is a SELL or FUTURE_SELL type, feeAccountId must have same currency as a currency of currency1AccountId.";
                    readonly minLength: 24;
                    readonly maxLength: 24;
                    readonly examples: readonly ["7c21ed165e294db78b95f0f1"];
                };
                readonly fee: {
                    readonly type: "number";
                    readonly description: "Percentage of the trade amount to be paid as a fee.";
                    readonly minimum: 0;
                    readonly maximum: 100;
                    readonly examples: readonly [1.5];
                };
                readonly currency1AccountId: {
                    readonly type: "string";
                    readonly description: "ID of the account of the currenc 1 trade currency";
                    readonly examples: readonly ["7c21ed165e294db78b95f0f1"];
                };
                readonly currency2AccountId: {
                    readonly type: "string";
                    readonly description: "ID of the account of the currenc 2 trade currency";
                    readonly examples: readonly ["7c21ed165e294db78b95f0f1"];
                };
                readonly created: {
                    readonly type: "number";
                    readonly description: "Creation date, UTC millis";
                    readonly examples: readonly [1585170363103];
                };
                readonly attr: {
                    readonly type: "object";
                    readonly description: "Additional attributes for the future type.";
                    readonly required: readonly ["sealDate"];
                    readonly properties: {
                        readonly sealDate: {
                            readonly type: "number";
                            readonly description: "Time in UTC when the future will be filled.";
                            readonly minimum: 0;
                            readonly examples: readonly [1572031674384];
                        };
                        readonly percentBlock: {
                            readonly description: "Percentage of the future amount which the selling or buying account must have available for the future’s creation. This amount will be blocked until the future is filled or expires.";
                            readonly type: "number";
                            readonly minimum: 0;
                            readonly maximum: 100;
                            readonly examples: readonly [1.5];
                        };
                        readonly percentPenalty: {
                            readonly description: "If one of the parties doesn’t have the full amount of the future at the time of expiration filled, the party will be penalized.";
                            readonly type: "number";
                            readonly minimum: 0;
                            readonly maximum: 100;
                            readonly examples: readonly [1.5];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetTransactions: {
    readonly body: {
        readonly properties: {
            readonly account: {
                readonly description: "Source account - source of transaction(s).";
                readonly maxLength: 24;
                readonly minLength: 24;
                readonly type: "string";
                readonly examples: readonly ["5e6be8e9e6aa436299950c41"];
            };
            readonly counterAccount: {
                readonly description: "Counter account - transaction(s) destination account.";
                readonly maxLength: 24;
                readonly minLength: 24;
                readonly type: "string";
                readonly examples: readonly ["5e6be8e9e6aa436299950c41"];
            };
            readonly currency: {
                readonly description: "Currency of the transactions.";
                readonly minLength: 1;
                readonly maxLength: 50;
                readonly type: "string";
                readonly examples: readonly ["BTC"];
            };
            readonly from: {
                readonly description: "Starting date to search for transactions from in UTC millis. If not present, search all history.";
                readonly type: "integer";
                readonly format: "int64";
                readonly minimum: 0;
                readonly examples: readonly [1571833231000];
                readonly maximum: 9223372036854776000;
            };
            readonly amount: {
                readonly type: "array";
                readonly description: "Amount of the transaction. AND is used between filter options.";
                readonly items: {
                    readonly type: "object";
                    readonly properties: {
                        readonly op: {
                            readonly type: "string";
                            readonly description: "Filtering operation.";
                            readonly enum: readonly ["gte", "lte", "gt", "lt", "eq", "neq"];
                            readonly examples: readonly ["gte"];
                        };
                        readonly value: {
                            readonly type: "string";
                            readonly description: "Value of the operation.";
                            readonly examples: readonly ["1.5"];
                        };
                    };
                    readonly required: readonly ["op", "value"];
                };
            };
            readonly currencies: {
                readonly description: "List of currencies of the transactions.";
                readonly type: "array";
                readonly items: {
                    readonly minLength: 1;
                    readonly maxLength: 50;
                    readonly type: "string";
                    readonly examples: readonly ["BTC"];
                };
            };
            readonly transactionType: {
                readonly description: "Type of payment";
                readonly enum: readonly ["FAILED", "DEBIT_PAYMENT", "CREDIT_PAYMENT", "CREDIT_DEPOSIT", "DEBIT_WITHDRAWAL", "CANCEL_WITHDRAWAL", "DEBIT_OUTGOING_PAYMENT", "EXCHANGE_BUY", "EXCHANGE_SELL", "DEBIT_TRANSACTION", "CREDIT_INCOMING_PAYMENT"];
            };
            readonly transactionTypes: {
                readonly description: "Types of payment";
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                    readonly enum: readonly ["FAILED", "DEBIT_PAYMENT", "CREDIT_PAYMENT", "CREDIT_DEPOSIT", "DEBIT_WITHDRAWAL", "CANCEL_WITHDRAWAL", "DEBIT_OUTGOING_PAYMENT", "EXCHANGE_BUY", "EXCHANGE_SELL", "DEBIT_TRANSACTION", "CREDIT_INCOMING_PAYMENT"];
                    readonly examples: readonly ["CREDIT_PAYMENT"];
                };
            };
            readonly opType: {
                readonly description: "Type of operation.";
                readonly enum: readonly ["PAYMENT", "WITHDRAWAL", "BLOCKCHAIN_TRANSACTION", "EXCHANGE", "FAILED", "DEPOSIT", "MINT", "REVOKE"];
                readonly type: "string";
                readonly examples: readonly ["PAYMENT"];
            };
            readonly transactionCode: {
                readonly description: "For bookkeeping to distinct transaction purpose.";
                readonly maxLength: 100;
                readonly minLength: 1;
                readonly type: "string";
                readonly examples: readonly ["1_01_EXTERNAL_CODE"];
            };
            readonly paymentId: {
                readonly description: "Payment ID defined in payment order by sender.";
                readonly maxLength: 100;
                readonly minLength: 1;
                readonly type: "string";
                readonly examples: readonly ["65426"];
            };
            readonly recipientNote: {
                readonly description: "Recipient note defined in payment order by sender.";
                readonly maxLength: 500;
                readonly minLength: 1;
                readonly type: "string";
                readonly examples: readonly ["65426"];
            };
            readonly senderNote: {
                readonly description: "Sender note defined in payment order by sender.";
                readonly maxLength: 500;
                readonly minLength: 1;
                readonly type: "string";
                readonly examples: readonly ["65426"];
            };
            readonly to: {
                readonly description: "Date until to search for transactions in UTC millis. If not present, search up till now.";
                readonly type: "integer";
                readonly format: "int64";
                readonly minimum: 0;
                readonly examples: readonly [1571833231000];
                readonly maximum: 9223372036854776000;
            };
        };
        readonly type: "object";
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly pageSize: {
                    readonly type: "number";
                    readonly maximum: 50;
                    readonly minimum: 1;
                    readonly examples: readonly [10];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Max number of items per page is 50. Either count or pageSize is accepted.";
                };
                readonly offset: {
                    readonly type: "number";
                    readonly examples: readonly [0];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Offset to obtain the next page of data.";
                };
                readonly count: {
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Get the total transaction count based on the filter. Either count or pageSize is accepted.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly oneOf: readonly [{
                readonly items: {
                    readonly properties: {
                        readonly accountId: {
                            readonly description: "Source account - source of transaction(s)";
                            readonly type: "string";
                            readonly examples: readonly ["5e6645712b55823de7ea82f1"];
                        };
                        readonly counterAccountId: {
                            readonly description: "Counter account - transaction(s) destination account. In case of blockchain recipient, this is addess of blockchain account.";
                            readonly type: "string";
                            readonly examples: readonly ["5e6645712b55823de7ea82f1"];
                        };
                        readonly currency: {
                            readonly description: "Transaction currency";
                            readonly type: "string";
                            readonly examples: readonly ["BTC"];
                        };
                        readonly amount: {
                            readonly description: "Amount in account's currency";
                            readonly type: "string";
                            readonly examples: readonly ["0.1"];
                        };
                        readonly anonymous: {
                            readonly description: "Whether the transaction is anonymous. If true, counter account owner does not see source account.";
                            readonly type: "boolean";
                            readonly examples: readonly [false];
                        };
                        readonly created: {
                            readonly description: "Time in UTC of transaction.";
                            readonly type: "number";
                            readonly examples: readonly [1572031674384];
                        };
                        readonly marketValue: {
                            readonly description: "FIAT value of transaction.";
                            readonly properties: {
                                readonly amount: {
                                    readonly description: "Value of transaction in given base pair.";
                                    readonly type: "string";
                                    readonly examples: readonly ["1235.56"];
                                };
                                readonly currency: {
                                    readonly description: "Base pair.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `ALGO` `ADA` `BAM` `BAT` `BBD` `BCH` `BDT` `BGN` `BHD` `BIF` `BMD` `BNB` `BND` `BOB` `BRL` `BSD` `BTC` `BTN` `BWP` `BYN` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DOGE` `DZD` `EGP` `ERN` `ETB` `ETH` `EUR` `FJD` `FKP` `FLOW` `FUSD` `FREE` `GMC` `GMC_BSC` `RMD` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `IMP` `INR` `IQD` `IRR` `ISK` `JEP` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LEO` `LINK` `LKR` `LRD` `LSL` `LTC` `LTL` `LVL` `LYD` `MAD` `MATIC` `MDL` `MGA` `MKD` `MKR` `MMK` `MMY` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PAX` `PAXG` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TRON` `TUSD` `BUSD` `TWD` `TZS` `UAH` `UGX` `UNI` `USD` `USDC` `USDC_MATIC` `USDC_MATIC_NATIVE` `USDT` `USDT_TRON` `USDT_MATIC` `UYU` `UZS` `VEF` `VND` `VUV` `WBTC` `WST` `XAF` `XAG` `XAU` `XCD` `XCON` `XDR` `XOF` `XPF` `XRP` `YER` `ZAR` `ZMK` `ZMW` `ZWL`";
                                    readonly type: "string";
                                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                                    readonly examples: readonly ["EUR"];
                                };
                                readonly sourceDate: {
                                    readonly description: "Date of validity of rate in UTC.";
                                    readonly type: "number";
                                    readonly examples: readonly [1572031674384];
                                };
                                readonly source: {
                                    readonly description: "Source of base pair.";
                                    readonly type: "string";
                                    readonly examples: readonly ["fixer.io"];
                                };
                            };
                            readonly type: "object";
                            readonly required: readonly ["amount", "currency", "sourceDate", "source"];
                        };
                        readonly operationType: {
                            readonly description: "Type of operation.\n\n`PAYMENT` `WITHDRAWAL` `BLOCKCHAIN_TRANSACTION` `EXCHANGE` `FAILED` `DEPOSIT` `MINT` `REVOKE`";
                            readonly enum: readonly ["PAYMENT", "WITHDRAWAL", "BLOCKCHAIN_TRANSACTION", "EXCHANGE", "FAILED", "DEPOSIT", "MINT", "REVOKE"];
                            readonly type: "string";
                            readonly examples: readonly ["PAYMENT"];
                        };
                        readonly transactionType: {
                            readonly description: "Type of payment.\n\n`FAILED` `DEBIT_PAYMENT` `CREDIT_PAYMENT` `CREDIT_DEPOSIT` `DEBIT_WITHDRAWAL` `CANCEL_WITHDRAWAL` `DEBIT_OUTGOING_PAYMENT` `CREDIT_INCOMING_PAYMENT` `EXCHANGE_BUY` `EXCHANGE_SELL`";
                            readonly enum: readonly ["FAILED", "DEBIT_PAYMENT", "CREDIT_PAYMENT", "CREDIT_DEPOSIT", "DEBIT_WITHDRAWAL", "CANCEL_WITHDRAWAL", "DEBIT_OUTGOING_PAYMENT", "CREDIT_INCOMING_PAYMENT", "EXCHANGE_BUY", "EXCHANGE_SELL"];
                            readonly type: "string";
                            readonly examples: readonly ["CREDIT_PAYMENT"];
                        };
                        readonly reference: {
                            readonly description: "Transaction internal reference - unique identifier within Tatum ledger. In order of failure, use this value to search for problems.";
                            readonly type: "string";
                            readonly examples: readonly ["5e6be8e9e6aa436299950c41"];
                        };
                        readonly transactionCode: {
                            readonly description: "For bookkeeping to distinct transaction purpose.";
                            readonly type: "string";
                            readonly examples: readonly ["1_01_EXTERNAL_CODE"];
                        };
                        readonly senderNote: {
                            readonly description: "Note visible for sender.";
                            readonly type: "string";
                            readonly examples: readonly ["Sender note"];
                        };
                        readonly recipientNote: {
                            readonly description: "Note visible for both sender and recipient.";
                            readonly type: "string";
                            readonly examples: readonly ["Private note"];
                        };
                        readonly paymentId: {
                            readonly description: "Payment ID defined in payment order by sender.";
                            readonly type: "string";
                            readonly examples: readonly ["65426"];
                        };
                        readonly attr: {
                            readonly description: "Present only for operationType WITHDRAWAL and XLM / XRP based accounts it represents message or destinationTag of the recipient, if present.";
                            readonly type: "string";
                            readonly examples: readonly ["123"];
                        };
                        readonly address: {
                            readonly type: "string";
                            readonly description: "For operationType DEPOSIT it represents address, on which was deposit credited for the account.";
                            readonly examples: readonly ["qrppgud79n5h5ehqt9s7x8uc82pcag82es0w9tada0"];
                        };
                        readonly txId: {
                            readonly type: "string";
                            readonly description: "For operationType DEPOSIT, BLOCKCHAIN_TRANSACTION it represents transaction id, for which deposit occured.";
                            readonly examples: readonly ["c6c176e3f6705596d58963f0ca79b34ffa5b78874a65df9c974e22cf86a7ba67"];
                        };
                    };
                    readonly type: "object";
                    readonly required: readonly ["accountId", "reference", "anonymous", "amount", "marketValue", "created", "operationType", "transactionType", "currency"];
                };
                readonly type: "array";
            }, {
                readonly type: "number";
                readonly description: "Total transaction count.";
                readonly examples: readonly [20];
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetTransactionsByAccountId: {
    readonly body: {
        readonly properties: {
            readonly id: {
                readonly description: "Account ID - source of transaction(s).";
                readonly maxLength: 24;
                readonly minLength: 24;
                readonly type: "string";
                readonly examples: readonly ["5e6be8e9e6aa436299950c41"];
            };
            readonly counterAccount: {
                readonly description: "Counter account - transaction(s) destination account.";
                readonly maxLength: 24;
                readonly minLength: 24;
                readonly type: "string";
                readonly examples: readonly ["5e6be8e9e6aa436299950c41"];
            };
            readonly from: {
                readonly description: "Starting date to search for transactions from in UTC millis. If not present, search all history.";
                readonly type: "integer";
                readonly format: "int64";
                readonly minimum: 0;
                readonly examples: readonly [1571833231000];
                readonly maximum: 9223372036854776000;
            };
            readonly to: {
                readonly description: "Date until to search for transactions in UTC millis. If not present, search up till now.";
                readonly type: "integer";
                readonly format: "int64";
                readonly minimum: 0;
                readonly examples: readonly [1571833231000];
                readonly maximum: 9223372036854776000;
            };
            readonly currency: {
                readonly description: "Currency of the transactions.";
                readonly minLength: 1;
                readonly maxLength: 50;
                readonly type: "string";
                readonly examples: readonly ["BTC"];
            };
            readonly amount: {
                readonly type: "array";
                readonly description: "Amount of the transaction. AND is used between filter options.";
                readonly items: {
                    readonly type: "object";
                    readonly properties: {
                        readonly op: {
                            readonly type: "string";
                            readonly description: "Filtering operation.";
                            readonly enum: readonly ["gte", "lte", "gt", "lt", "eq", "neq"];
                            readonly examples: readonly ["gte"];
                        };
                        readonly value: {
                            readonly type: "string";
                            readonly description: "Value of the operation.";
                            readonly examples: readonly ["1.5"];
                        };
                    };
                    readonly required: readonly ["op", "value"];
                };
            };
            readonly currencies: {
                readonly description: "List of currencies of the transactions.";
                readonly type: "array";
                readonly items: {
                    readonly minLength: 1;
                    readonly maxLength: 50;
                    readonly type: "string";
                    readonly examples: readonly ["BTC"];
                };
            };
            readonly transactionType: {
                readonly description: "Type of payment";
                readonly enum: readonly ["FAILED", "DEBIT_PAYMENT", "CREDIT_PAYMENT", "CREDIT_DEPOSIT", "DEBIT_WITHDRAWAL", "CANCEL_WITHDRAWAL", "DEBIT_OUTGOING_PAYMENT", "EXCHANGE_BUY", "EXCHANGE_SELL", "DEBIT_TRANSACTION", "CREDIT_INCOMING_PAYMENT"];
            };
            readonly transactionTypes: {
                readonly description: "Types of payment";
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                    readonly enum: readonly ["FAILED", "DEBIT_PAYMENT", "CREDIT_PAYMENT", "CREDIT_DEPOSIT", "DEBIT_WITHDRAWAL", "CANCEL_WITHDRAWAL", "DEBIT_OUTGOING_PAYMENT", "EXCHANGE_BUY", "EXCHANGE_SELL", "DEBIT_TRANSACTION", "CREDIT_INCOMING_PAYMENT"];
                    readonly examples: readonly ["CREDIT_PAYMENT"];
                };
            };
            readonly opType: {
                readonly description: "Type of operation";
                readonly enum: readonly ["PAYMENT", "WITHDRAWAL", "BLOCKCHAIN_TRANSACTION", "EXCHANGE", "FAILED", "DEPOSIT", "MINT", "REVOKE"];
                readonly type: "string";
                readonly examples: readonly ["PAYMENT"];
            };
            readonly transactionCode: {
                readonly description: "For bookkeeping to distinct transaction purpose.";
                readonly maxLength: 100;
                readonly minLength: 1;
                readonly type: "string";
                readonly examples: readonly ["1_01_EXTERNAL_CODE"];
            };
            readonly paymentId: {
                readonly description: "Payment ID defined in payment order by sender.";
                readonly maxLength: 100;
                readonly minLength: 1;
                readonly type: "string";
                readonly examples: readonly ["65426"];
            };
            readonly recipientNote: {
                readonly description: "Recipient note defined in payment order by sender.";
                readonly maxLength: 500;
                readonly minLength: 1;
                readonly type: "string";
                readonly examples: readonly ["65426"];
            };
            readonly senderNote: {
                readonly description: "Sender note defined in payment order by sender.";
                readonly maxLength: 500;
                readonly minLength: 1;
                readonly type: "string";
                readonly examples: readonly ["65426"];
            };
        };
        readonly required: readonly ["id"];
        readonly type: "object";
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly pageSize: {
                    readonly type: "number";
                    readonly maximum: 50;
                    readonly minimum: 1;
                    readonly examples: readonly [10];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Max number of items per page is 50. Either count or pageSize is accepted.";
                };
                readonly offset: {
                    readonly type: "number";
                    readonly examples: readonly [0];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Offset to obtain the next page of data.";
                };
                readonly count: {
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Get the total transaction count based on the filter. Either count or pageSize is accepted.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly oneOf: readonly [{
                readonly items: {
                    readonly properties: {
                        readonly accountId: {
                            readonly description: "Source account - source of transaction(s)";
                            readonly type: "string";
                            readonly examples: readonly ["5e6645712b55823de7ea82f1"];
                        };
                        readonly counterAccountId: {
                            readonly description: "Counter account - transaction(s) destination account. In case of blockchain recipient, this is addess of blockchain account.";
                            readonly type: "string";
                            readonly examples: readonly ["5e6645712b55823de7ea82f1"];
                        };
                        readonly currency: {
                            readonly description: "Transaction currency";
                            readonly type: "string";
                            readonly examples: readonly ["BTC"];
                        };
                        readonly amount: {
                            readonly description: "Amount in account's currency";
                            readonly type: "string";
                            readonly examples: readonly ["0.1"];
                        };
                        readonly anonymous: {
                            readonly description: "Whether the transaction is anonymous. If true, counter account owner does not see source account.";
                            readonly type: "boolean";
                            readonly examples: readonly [false];
                        };
                        readonly created: {
                            readonly description: "Time in UTC of transaction.";
                            readonly type: "number";
                            readonly examples: readonly [1572031674384];
                        };
                        readonly marketValue: {
                            readonly description: "FIAT value of transaction.";
                            readonly properties: {
                                readonly amount: {
                                    readonly description: "Value of transaction in given base pair.";
                                    readonly type: "string";
                                    readonly examples: readonly ["1235.56"];
                                };
                                readonly currency: {
                                    readonly description: "Base pair.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `ALGO` `ADA` `BAM` `BAT` `BBD` `BCH` `BDT` `BGN` `BHD` `BIF` `BMD` `BNB` `BND` `BOB` `BRL` `BSD` `BTC` `BTN` `BWP` `BYN` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DOGE` `DZD` `EGP` `ERN` `ETB` `ETH` `EUR` `FJD` `FKP` `FLOW` `FUSD` `FREE` `GMC` `GMC_BSC` `RMD` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `IMP` `INR` `IQD` `IRR` `ISK` `JEP` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LEO` `LINK` `LKR` `LRD` `LSL` `LTC` `LTL` `LVL` `LYD` `MAD` `MATIC` `MDL` `MGA` `MKD` `MKR` `MMK` `MMY` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PAX` `PAXG` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TRON` `TUSD` `BUSD` `TWD` `TZS` `UAH` `UGX` `UNI` `USD` `USDC` `USDC_MATIC` `USDC_MATIC_NATIVE` `USDT` `USDT_TRON` `USDT_MATIC` `UYU` `UZS` `VEF` `VND` `VUV` `WBTC` `WST` `XAF` `XAG` `XAU` `XCD` `XCON` `XDR` `XOF` `XPF` `XRP` `YER` `ZAR` `ZMK` `ZMW` `ZWL`";
                                    readonly type: "string";
                                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                                    readonly examples: readonly ["EUR"];
                                };
                                readonly sourceDate: {
                                    readonly description: "Date of validity of rate in UTC.";
                                    readonly type: "number";
                                    readonly examples: readonly [1572031674384];
                                };
                                readonly source: {
                                    readonly description: "Source of base pair.";
                                    readonly type: "string";
                                    readonly examples: readonly ["fixer.io"];
                                };
                            };
                            readonly type: "object";
                            readonly required: readonly ["amount", "currency", "sourceDate", "source"];
                        };
                        readonly operationType: {
                            readonly description: "Type of operation.\n\n`PAYMENT` `WITHDRAWAL` `BLOCKCHAIN_TRANSACTION` `EXCHANGE` `FAILED` `DEPOSIT` `MINT` `REVOKE`";
                            readonly enum: readonly ["PAYMENT", "WITHDRAWAL", "BLOCKCHAIN_TRANSACTION", "EXCHANGE", "FAILED", "DEPOSIT", "MINT", "REVOKE"];
                            readonly type: "string";
                            readonly examples: readonly ["PAYMENT"];
                        };
                        readonly transactionType: {
                            readonly description: "Type of payment.\n\n`FAILED` `DEBIT_PAYMENT` `CREDIT_PAYMENT` `CREDIT_DEPOSIT` `DEBIT_WITHDRAWAL` `CANCEL_WITHDRAWAL` `DEBIT_OUTGOING_PAYMENT` `CREDIT_INCOMING_PAYMENT` `EXCHANGE_BUY` `EXCHANGE_SELL`";
                            readonly enum: readonly ["FAILED", "DEBIT_PAYMENT", "CREDIT_PAYMENT", "CREDIT_DEPOSIT", "DEBIT_WITHDRAWAL", "CANCEL_WITHDRAWAL", "DEBIT_OUTGOING_PAYMENT", "CREDIT_INCOMING_PAYMENT", "EXCHANGE_BUY", "EXCHANGE_SELL"];
                            readonly type: "string";
                            readonly examples: readonly ["CREDIT_PAYMENT"];
                        };
                        readonly reference: {
                            readonly description: "Transaction internal reference - unique identifier within Tatum ledger. In order of failure, use this value to search for problems.";
                            readonly type: "string";
                            readonly examples: readonly ["5e6be8e9e6aa436299950c41"];
                        };
                        readonly transactionCode: {
                            readonly description: "For bookkeeping to distinct transaction purpose.";
                            readonly type: "string";
                            readonly examples: readonly ["1_01_EXTERNAL_CODE"];
                        };
                        readonly senderNote: {
                            readonly description: "Note visible for sender.";
                            readonly type: "string";
                            readonly examples: readonly ["Sender note"];
                        };
                        readonly recipientNote: {
                            readonly description: "Note visible for both sender and recipient.";
                            readonly type: "string";
                            readonly examples: readonly ["Private note"];
                        };
                        readonly paymentId: {
                            readonly description: "Payment ID defined in payment order by sender.";
                            readonly type: "string";
                            readonly examples: readonly ["65426"];
                        };
                        readonly attr: {
                            readonly description: "Present only for operationType WITHDRAWAL and XLM / XRP based accounts it represents message or destinationTag of the recipient, if present.";
                            readonly type: "string";
                            readonly examples: readonly ["123"];
                        };
                        readonly address: {
                            readonly type: "string";
                            readonly description: "For operationType DEPOSIT it represents address, on which was deposit credited for the account.";
                            readonly examples: readonly ["qrppgud79n5h5ehqt9s7x8uc82pcag82es0w9tada0"];
                        };
                        readonly txId: {
                            readonly type: "string";
                            readonly description: "For operationType DEPOSIT, BLOCKCHAIN_TRANSACTION it represents transaction id, for which deposit occured.";
                            readonly examples: readonly ["c6c176e3f6705596d58963f0ca79b34ffa5b78874a65df9c974e22cf86a7ba67"];
                        };
                    };
                    readonly type: "object";
                    readonly required: readonly ["accountId", "reference", "anonymous", "amount", "marketValue", "created", "operationType", "transactionType", "currency"];
                };
                readonly type: "array";
            }, {
                readonly type: "number";
                readonly description: "Total transaction count.";
                readonly examples: readonly [20];
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetTransactionsByCustomerId: {
    readonly body: {
        readonly properties: {
            readonly id: {
                readonly description: "Customer internal ID to search for.";
                readonly maxLength: 24;
                readonly minLength: 24;
                readonly type: "string";
                readonly examples: readonly ["5e6be8e9e6aa436299950c41"];
            };
            readonly account: {
                readonly description: "Source account - source of transaction(s).";
                readonly maxLength: 24;
                readonly minLength: 24;
                readonly type: "string";
                readonly examples: readonly ["5e6be8e9e6aa436299950c41"];
            };
            readonly counterAccount: {
                readonly description: "Counter account - transaction(s) destination account.";
                readonly maxLength: 24;
                readonly minLength: 24;
                readonly type: "string";
                readonly examples: readonly ["5e6be8e9e6aa436299950c41"];
            };
            readonly currency: {
                readonly description: "Currency of the transactions.";
                readonly minLength: 1;
                readonly maxLength: 50;
                readonly type: "string";
                readonly examples: readonly ["BTC"];
            };
            readonly from: {
                readonly description: "Starting date to search for transactions from in UTC millis. If not present, search all history.";
                readonly type: "integer";
                readonly format: "int64";
                readonly minimum: 0;
                readonly examples: readonly [1571833231000];
                readonly maximum: 9223372036854776000;
            };
            readonly to: {
                readonly description: "Date until to search for transactions in UTC millis. If not present, search up till now.";
                readonly type: "integer";
                readonly format: "int64";
                readonly minimum: 0;
                readonly examples: readonly [1571833231000];
                readonly maximum: 9223372036854776000;
            };
            readonly amount: {
                readonly type: "array";
                readonly description: "Amount of the transaction. AND is used between filter options.";
                readonly items: {
                    readonly type: "object";
                    readonly properties: {
                        readonly op: {
                            readonly type: "string";
                            readonly description: "Filtering operation.";
                            readonly enum: readonly ["gte", "lte", "gt", "lt", "eq", "neq"];
                            readonly examples: readonly ["gte"];
                        };
                        readonly value: {
                            readonly type: "string";
                            readonly description: "Value of the operation.";
                            readonly examples: readonly ["1.5"];
                        };
                    };
                    readonly required: readonly ["op", "value"];
                };
            };
            readonly currencies: {
                readonly description: "List of currencies of the transactions.";
                readonly type: "array";
                readonly items: {
                    readonly minLength: 1;
                    readonly maxLength: 50;
                    readonly type: "string";
                    readonly examples: readonly ["BTC"];
                };
            };
            readonly transactionType: {
                readonly description: "Type of payment";
                readonly enum: readonly ["FAILED", "DEBIT_PAYMENT", "CREDIT_PAYMENT", "CREDIT_DEPOSIT", "DEBIT_WITHDRAWAL", "CANCEL_WITHDRAWAL", "DEBIT_OUTGOING_PAYMENT", "EXCHANGE_BUY", "EXCHANGE_SELL", "DEBIT_TRANSACTION", "CREDIT_INCOMING_PAYMENT"];
            };
            readonly transactionTypes: {
                readonly description: "Types of payment";
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                    readonly enum: readonly ["FAILED", "DEBIT_PAYMENT", "CREDIT_PAYMENT", "CREDIT_DEPOSIT", "DEBIT_WITHDRAWAL", "CANCEL_WITHDRAWAL", "DEBIT_OUTGOING_PAYMENT", "EXCHANGE_BUY", "EXCHANGE_SELL", "DEBIT_TRANSACTION", "CREDIT_INCOMING_PAYMENT"];
                    readonly examples: readonly ["CREDIT_PAYMENT"];
                };
            };
            readonly opType: {
                readonly description: "Type of operation.";
                readonly enum: readonly ["PAYMENT", "WITHDRAWAL", "BLOCKCHAIN_TRANSACTION", "EXCHANGE", "FAILED", "DEPOSIT", "MINT", "REVOKE"];
                readonly type: "string";
                readonly examples: readonly ["PAYMENT"];
            };
            readonly transactionCode: {
                readonly description: "For bookkeeping to distinct transaction purpose.";
                readonly maxLength: 100;
                readonly minLength: 1;
                readonly type: "string";
                readonly examples: readonly ["1_01_EXTERNAL_CODE"];
            };
            readonly paymentId: {
                readonly description: "Payment ID defined in payment order by sender.";
                readonly maxLength: 100;
                readonly minLength: 1;
                readonly type: "string";
                readonly examples: readonly ["65426"];
            };
            readonly recipientNote: {
                readonly description: "Recipient note defined in payment order by sender.";
                readonly maxLength: 500;
                readonly minLength: 1;
                readonly type: "string";
                readonly examples: readonly ["65426"];
            };
            readonly senderNote: {
                readonly description: "Sender note defined in payment order by sender.";
                readonly maxLength: 500;
                readonly minLength: 1;
                readonly type: "string";
                readonly examples: readonly ["65426"];
            };
        };
        readonly required: readonly ["id"];
        readonly type: "object";
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly pageSize: {
                    readonly type: "number";
                    readonly maximum: 50;
                    readonly minimum: 1;
                    readonly examples: readonly [10];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Max number of items per page is 50. Either count or pageSize is accepted.";
                };
                readonly offset: {
                    readonly type: "number";
                    readonly examples: readonly [0];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Offset to obtain the next page of data.";
                };
                readonly count: {
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Get total transaction count based on the filter. Either count or pageSize is accepted.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly oneOf: readonly [{
                readonly items: {
                    readonly properties: {
                        readonly accountId: {
                            readonly description: "Source account - source of transaction(s)";
                            readonly type: "string";
                            readonly examples: readonly ["5e6645712b55823de7ea82f1"];
                        };
                        readonly counterAccountId: {
                            readonly description: "Counter account - transaction(s) destination account. In case of blockchain recipient, this is addess of blockchain account.";
                            readonly type: "string";
                            readonly examples: readonly ["5e6645712b55823de7ea82f1"];
                        };
                        readonly currency: {
                            readonly description: "Transaction currency";
                            readonly type: "string";
                            readonly examples: readonly ["BTC"];
                        };
                        readonly amount: {
                            readonly description: "Amount in account's currency";
                            readonly type: "string";
                            readonly examples: readonly ["0.1"];
                        };
                        readonly anonymous: {
                            readonly description: "Whether the transaction is anonymous. If true, counter account owner does not see source account.";
                            readonly type: "boolean";
                            readonly examples: readonly [false];
                        };
                        readonly created: {
                            readonly description: "Time in UTC of transaction.";
                            readonly type: "number";
                            readonly examples: readonly [1572031674384];
                        };
                        readonly marketValue: {
                            readonly description: "FIAT value of transaction.";
                            readonly properties: {
                                readonly amount: {
                                    readonly description: "Value of transaction in given base pair.";
                                    readonly type: "string";
                                    readonly examples: readonly ["1235.56"];
                                };
                                readonly currency: {
                                    readonly description: "Base pair.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `ALGO` `ADA` `BAM` `BAT` `BBD` `BCH` `BDT` `BGN` `BHD` `BIF` `BMD` `BNB` `BND` `BOB` `BRL` `BSD` `BTC` `BTN` `BWP` `BYN` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DOGE` `DZD` `EGP` `ERN` `ETB` `ETH` `EUR` `FJD` `FKP` `FLOW` `FUSD` `FREE` `GMC` `GMC_BSC` `RMD` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `IMP` `INR` `IQD` `IRR` `ISK` `JEP` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LEO` `LINK` `LKR` `LRD` `LSL` `LTC` `LTL` `LVL` `LYD` `MAD` `MATIC` `MDL` `MGA` `MKD` `MKR` `MMK` `MMY` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PAX` `PAXG` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TRON` `TUSD` `BUSD` `TWD` `TZS` `UAH` `UGX` `UNI` `USD` `USDC` `USDC_MATIC` `USDC_MATIC_NATIVE` `USDT` `USDT_TRON` `USDT_MATIC` `UYU` `UZS` `VEF` `VND` `VUV` `WBTC` `WST` `XAF` `XAG` `XAU` `XCD` `XCON` `XDR` `XOF` `XPF` `XRP` `YER` `ZAR` `ZMK` `ZMW` `ZWL`";
                                    readonly type: "string";
                                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                                    readonly examples: readonly ["EUR"];
                                };
                                readonly sourceDate: {
                                    readonly description: "Date of validity of rate in UTC.";
                                    readonly type: "number";
                                    readonly examples: readonly [1572031674384];
                                };
                                readonly source: {
                                    readonly description: "Source of base pair.";
                                    readonly type: "string";
                                    readonly examples: readonly ["fixer.io"];
                                };
                            };
                            readonly type: "object";
                            readonly required: readonly ["amount", "currency", "sourceDate", "source"];
                        };
                        readonly operationType: {
                            readonly description: "Type of operation.\n\n`PAYMENT` `WITHDRAWAL` `BLOCKCHAIN_TRANSACTION` `EXCHANGE` `FAILED` `DEPOSIT` `MINT` `REVOKE`";
                            readonly enum: readonly ["PAYMENT", "WITHDRAWAL", "BLOCKCHAIN_TRANSACTION", "EXCHANGE", "FAILED", "DEPOSIT", "MINT", "REVOKE"];
                            readonly type: "string";
                            readonly examples: readonly ["PAYMENT"];
                        };
                        readonly transactionType: {
                            readonly description: "Type of payment.\n\n`FAILED` `DEBIT_PAYMENT` `CREDIT_PAYMENT` `CREDIT_DEPOSIT` `DEBIT_WITHDRAWAL` `CANCEL_WITHDRAWAL` `DEBIT_OUTGOING_PAYMENT` `CREDIT_INCOMING_PAYMENT` `EXCHANGE_BUY` `EXCHANGE_SELL`";
                            readonly enum: readonly ["FAILED", "DEBIT_PAYMENT", "CREDIT_PAYMENT", "CREDIT_DEPOSIT", "DEBIT_WITHDRAWAL", "CANCEL_WITHDRAWAL", "DEBIT_OUTGOING_PAYMENT", "CREDIT_INCOMING_PAYMENT", "EXCHANGE_BUY", "EXCHANGE_SELL"];
                            readonly type: "string";
                            readonly examples: readonly ["CREDIT_PAYMENT"];
                        };
                        readonly reference: {
                            readonly description: "Transaction internal reference - unique identifier within Tatum ledger. In order of failure, use this value to search for problems.";
                            readonly type: "string";
                            readonly examples: readonly ["5e6be8e9e6aa436299950c41"];
                        };
                        readonly transactionCode: {
                            readonly description: "For bookkeeping to distinct transaction purpose.";
                            readonly type: "string";
                            readonly examples: readonly ["1_01_EXTERNAL_CODE"];
                        };
                        readonly senderNote: {
                            readonly description: "Note visible for sender.";
                            readonly type: "string";
                            readonly examples: readonly ["Sender note"];
                        };
                        readonly recipientNote: {
                            readonly description: "Note visible for both sender and recipient.";
                            readonly type: "string";
                            readonly examples: readonly ["Private note"];
                        };
                        readonly paymentId: {
                            readonly description: "Payment ID defined in payment order by sender.";
                            readonly type: "string";
                            readonly examples: readonly ["65426"];
                        };
                        readonly attr: {
                            readonly description: "Present only for operationType WITHDRAWAL and XLM / XRP based accounts it represents message or destinationTag of the recipient, if present.";
                            readonly type: "string";
                            readonly examples: readonly ["123"];
                        };
                        readonly address: {
                            readonly type: "string";
                            readonly description: "For operationType DEPOSIT it represents address, on which was deposit credited for the account.";
                            readonly examples: readonly ["qrppgud79n5h5ehqt9s7x8uc82pcag82es0w9tada0"];
                        };
                        readonly txId: {
                            readonly type: "string";
                            readonly description: "For operationType DEPOSIT, BLOCKCHAIN_TRANSACTION it represents transaction id, for which deposit occured.";
                            readonly examples: readonly ["c6c176e3f6705596d58963f0ca79b34ffa5b78874a65df9c974e22cf86a7ba67"];
                        };
                    };
                    readonly type: "object";
                    readonly required: readonly ["accountId", "reference", "anonymous", "amount", "marketValue", "created", "operationType", "transactionType", "currency"];
                };
                readonly type: "array";
            }, {
                readonly type: "number";
                readonly description: "Total transaction count.";
                readonly examples: readonly [20];
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetTransactionsByReference: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly reference: {
                    readonly maxLength: 100;
                    readonly minLength: 20;
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["reference"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly items: {
                readonly properties: {
                    readonly accountId: {
                        readonly description: "Source account - source of transaction(s)";
                        readonly type: "string";
                        readonly examples: readonly ["5e6645712b55823de7ea82f1"];
                    };
                    readonly counterAccountId: {
                        readonly description: "Counter account - transaction(s) destination account. In case of blockchain recipient, this is addess of blockchain account.";
                        readonly type: "string";
                        readonly examples: readonly ["5e6645712b55823de7ea82f1"];
                    };
                    readonly currency: {
                        readonly description: "Transaction currency";
                        readonly type: "string";
                        readonly examples: readonly ["BTC"];
                    };
                    readonly amount: {
                        readonly description: "Amount in account's currency";
                        readonly type: "string";
                        readonly examples: readonly ["0.1"];
                    };
                    readonly anonymous: {
                        readonly description: "Whether the transaction is anonymous. If true, counter account owner does not see source account.";
                        readonly type: "boolean";
                        readonly examples: readonly [false];
                    };
                    readonly created: {
                        readonly description: "Time in UTC of transaction.";
                        readonly type: "number";
                        readonly examples: readonly [1572031674384];
                    };
                    readonly marketValue: {
                        readonly description: "FIAT value of transaction.";
                        readonly properties: {
                            readonly amount: {
                                readonly description: "Value of transaction in given base pair.";
                                readonly type: "string";
                                readonly examples: readonly ["1235.56"];
                            };
                            readonly currency: {
                                readonly description: "Base pair.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `ALGO` `ADA` `BAM` `BAT` `BBD` `BCH` `BDT` `BGN` `BHD` `BIF` `BMD` `BNB` `BND` `BOB` `BRL` `BSD` `BTC` `BTN` `BWP` `BYN` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DOGE` `DZD` `EGP` `ERN` `ETB` `ETH` `EUR` `FJD` `FKP` `FLOW` `FUSD` `FREE` `GMC` `GMC_BSC` `RMD` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `IMP` `INR` `IQD` `IRR` `ISK` `JEP` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LEO` `LINK` `LKR` `LRD` `LSL` `LTC` `LTL` `LVL` `LYD` `MAD` `MATIC` `MDL` `MGA` `MKD` `MKR` `MMK` `MMY` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PAX` `PAXG` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TRON` `TUSD` `BUSD` `TWD` `TZS` `UAH` `UGX` `UNI` `USD` `USDC` `USDC_MATIC` `USDC_MATIC_NATIVE` `USDT` `USDT_TRON` `USDT_MATIC` `UYU` `UZS` `VEF` `VND` `VUV` `WBTC` `WST` `XAF` `XAG` `XAU` `XCD` `XCON` `XDR` `XOF` `XPF` `XRP` `YER` `ZAR` `ZMK` `ZMW` `ZWL`";
                                readonly type: "string";
                                readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                                readonly examples: readonly ["EUR"];
                            };
                            readonly sourceDate: {
                                readonly description: "Date of validity of rate in UTC.";
                                readonly type: "number";
                                readonly examples: readonly [1572031674384];
                            };
                            readonly source: {
                                readonly description: "Source of base pair.";
                                readonly type: "string";
                                readonly examples: readonly ["fixer.io"];
                            };
                        };
                        readonly type: "object";
                        readonly required: readonly ["amount", "currency", "sourceDate", "source"];
                    };
                    readonly operationType: {
                        readonly description: "Type of operation.\n\n`PAYMENT` `WITHDRAWAL` `BLOCKCHAIN_TRANSACTION` `EXCHANGE` `FAILED` `DEPOSIT` `MINT` `REVOKE`";
                        readonly enum: readonly ["PAYMENT", "WITHDRAWAL", "BLOCKCHAIN_TRANSACTION", "EXCHANGE", "FAILED", "DEPOSIT", "MINT", "REVOKE"];
                        readonly type: "string";
                        readonly examples: readonly ["PAYMENT"];
                    };
                    readonly transactionType: {
                        readonly description: "Type of payment.\n\n`FAILED` `DEBIT_PAYMENT` `CREDIT_PAYMENT` `CREDIT_DEPOSIT` `DEBIT_WITHDRAWAL` `CANCEL_WITHDRAWAL` `DEBIT_OUTGOING_PAYMENT` `CREDIT_INCOMING_PAYMENT` `EXCHANGE_BUY` `EXCHANGE_SELL`";
                        readonly enum: readonly ["FAILED", "DEBIT_PAYMENT", "CREDIT_PAYMENT", "CREDIT_DEPOSIT", "DEBIT_WITHDRAWAL", "CANCEL_WITHDRAWAL", "DEBIT_OUTGOING_PAYMENT", "CREDIT_INCOMING_PAYMENT", "EXCHANGE_BUY", "EXCHANGE_SELL"];
                        readonly type: "string";
                        readonly examples: readonly ["CREDIT_PAYMENT"];
                    };
                    readonly reference: {
                        readonly description: "Transaction internal reference - unique identifier within Tatum ledger. In order of failure, use this value to search for problems.";
                        readonly type: "string";
                        readonly examples: readonly ["5e6be8e9e6aa436299950c41"];
                    };
                    readonly transactionCode: {
                        readonly description: "For bookkeeping to distinct transaction purpose.";
                        readonly type: "string";
                        readonly examples: readonly ["1_01_EXTERNAL_CODE"];
                    };
                    readonly senderNote: {
                        readonly description: "Note visible for sender.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender note"];
                    };
                    readonly recipientNote: {
                        readonly description: "Note visible for both sender and recipient.";
                        readonly type: "string";
                        readonly examples: readonly ["Private note"];
                    };
                    readonly paymentId: {
                        readonly description: "Payment ID defined in payment order by sender.";
                        readonly type: "string";
                        readonly examples: readonly ["65426"];
                    };
                    readonly attr: {
                        readonly description: "Present only for operationType WITHDRAWAL and XLM / XRP based accounts it represents message or destinationTag of the recipient, if present.";
                        readonly type: "string";
                        readonly examples: readonly ["123"];
                    };
                    readonly address: {
                        readonly type: "string";
                        readonly description: "For operationType DEPOSIT it represents address, on which was deposit credited for the account.";
                        readonly examples: readonly ["qrppgud79n5h5ehqt9s7x8uc82pcag82es0w9tada0"];
                    };
                    readonly txId: {
                        readonly type: "string";
                        readonly description: "For operationType DEPOSIT, BLOCKCHAIN_TRANSACTION it represents transaction id, for which deposit occured.";
                        readonly examples: readonly ["c6c176e3f6705596d58963f0ca79b34ffa5b78874a65df9c974e22cf86a7ba67"];
                    };
                };
                readonly type: "object";
                readonly required: readonly ["accountId", "reference", "anonymous", "amount", "marketValue", "created", "operationType", "transactionType", "currency"];
            };
            readonly type: "array";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetWithdrawals: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly currency: {
                    readonly minLength: 2;
                    readonly maxLength: 30;
                    readonly type: "string";
                    readonly examples: readonly ["BTC"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Currency of the withdrawal";
                };
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["InProgress", "Done", "Cancelled"];
                    readonly examples: readonly ["Done"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Status of the withdrawal";
                };
                readonly pageSize: {
                    readonly type: "number";
                    readonly maximum: 50;
                    readonly minimum: 1;
                    readonly examples: readonly [10];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Max number of items per page is 50.";
                };
                readonly offset: {
                    readonly type: "number";
                    readonly examples: readonly [0];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Offset to obtain next page of the data.";
                };
            };
            readonly required: readonly ["pageSize"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly items: {
                readonly properties: {
                    readonly id: {
                        readonly description: "ID of the withdrawal";
                        readonly type: "string";
                        readonly examples: readonly ["5e68c66581f2ee32bc354088"];
                    };
                    readonly txId: {
                        readonly description: "Transaction ID of broadcast transaction";
                        readonly type: "string";
                        readonly examples: readonly ["62BD544D1B9031EFC330A3E855CC3A0D51CA5131455C1AB3BCAC6D243F65460D"];
                    };
                    readonly accountId: {
                        readonly description: "Sender account ID";
                        readonly type: "string";
                        readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    };
                    readonly status: {
                        readonly description: "Status of the withdrawal\n\n`InProgress` `Done` `Cancelled`";
                        readonly type: "string";
                        readonly enum: readonly ["InProgress", "Done", "Cancelled"];
                        readonly examples: readonly ["InProgress"];
                    };
                    readonly address: {
                        readonly description: "Blockchain address to send assets to. For BTC, LTC, DOGE and BCH, it is possible to enter list of multiple recipient blockchain addresses as a comma separated string.";
                        readonly maxLength: 10000;
                        readonly minLength: 1;
                        readonly type: "string";
                        readonly examples: readonly ["mpTwPdF8up9kidgcAStriUPwRdnE9MRAg7"];
                    };
                    readonly reference: {
                        readonly description: "Transaction internal reference - unique identifier within Tatum ledger. In order of failure, use this value to search for problems.";
                        readonly type: "string";
                        readonly examples: readonly ["0c64cc04-5412-4e57-a51c-ee5727939bcb"];
                    };
                    readonly amount: {
                        readonly description: "Amount to be withdrawn to blockchain.";
                        readonly maxLength: 38;
                        readonly type: "string";
                        readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                        readonly examples: readonly ["0.001"];
                    };
                    readonly attr: {
                        readonly description: "<p>Used to parametrize withdrawal. Used for XRP withdrawal to define destination tag of recipient, or XLM memo of the recipient, if needed.<br/>\nFor Bitcoin, Litecoin, Bitcoin Cash, used as a change address for left coins from transaction.</p>\n";
                        readonly maxLength: 64;
                        readonly minLength: 1;
                        readonly type: "string";
                        readonly examples: readonly ["12345"];
                    };
                    readonly fee: {
                        readonly description: "Fee to be submitted as a transaction fee to blockchain.";
                        readonly type: "string";
                        readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                        readonly examples: readonly ["0.0005"];
                    };
                    readonly multipleAmounts: {
                        readonly description: "For BTC, LTC, DOGE and BCH, it is possible to enter list of multiple recipient blockchain amounts. List of recipient addresses must be present in the address field and total sum of amounts must be equal to the amount field.";
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                            readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                            readonly examples: readonly ["0.1"];
                        };
                    };
                    readonly paymentId: {
                        readonly description: "Identifier of the payment, shown for created Transaction within Tatum sender account.";
                        readonly maxLength: 100;
                        readonly minLength: 1;
                        readonly type: "string";
                        readonly examples: readonly ["12345"];
                    };
                    readonly senderNote: {
                        readonly description: "Note visible to owner of withdrawing account";
                        readonly maxLength: 500;
                        readonly minLength: 1;
                        readonly type: "string";
                        readonly examples: readonly ["Sender note"];
                    };
                };
                readonly required: readonly ["amount", "id", "accountId", "address", "reference", "fee"];
                readonly type: "object";
            };
            readonly type: "array";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const KcsDeployErc20Ledger: {
    readonly body: {
        readonly oneOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly symbol: {
                    readonly description: "The name of the token; used as an identifier within the Tatum platform and as a currency symbol on the blockchain";
                    readonly maxLength: 30;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                };
                readonly supply: {
                    readonly description: "The supply of the token";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["10000000"];
                };
                readonly description: {
                    readonly description: "The description of the token; used as a description within the Tatum platform and as a currency name on the blockchain";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["My Public Token"];
                };
                readonly address: {
                    readonly description: "The blockchain address to be assigned to the virtual account as a deposit address";
                    readonly maxLength: 42;
                    readonly minLength: 42;
                    readonly type: "string";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly mnemonic: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "The mnemonic to generate the private key for the blockchain address from which the fee for deploying the smart contract will be deducted; is used together with the derivation index of this address";
                    readonly type: "string";
                    readonly examples: readonly ["urge pulp usage sister evidence arrest palm math please chief egg abuse"];
                };
                readonly index: {
                    readonly description: "The derivation index of the blockchain address from which the fee for deploying the smart contract will be deducted; is used together with the mnemonic to generate the private key for this address";
                    readonly type: "integer";
                    readonly maximum: 2147483647;
                    readonly examples: readonly [0];
                };
                readonly basePair: {
                    readonly description: "The base pair for the virtual currency that represents the token; used to calculate the value of a transaction";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["EUR"];
                };
                readonly baseRate: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly minimum: 0;
                    readonly description: "The exchange rate for the base pair; one unit of the created virtual currency equals 1 unit of <code>basePair</code>*<code>baseRate</code>";
                    readonly examples: readonly [1];
                };
                readonly nonce: {
                    readonly type: "number";
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                    readonly minimum: 0;
                };
                readonly customer: {
                    readonly properties: {
                        readonly externalId: {
                            readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123654"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                            readonly default: "EUR";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly customerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                        readonly providerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                    };
                    readonly required: readonly ["externalId"];
                    readonly type: "object";
                    readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                };
            };
            readonly required: readonly ["description", "supply", "symbol", "basePair", "address", "mnemonic", "index"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly symbol: {
                    readonly description: "The name of the token; used as an identifier within the Tatum platform and as a currency symbol on the blockchain";
                    readonly maxLength: 30;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                };
                readonly supply: {
                    readonly description: "The supply of the token";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["10000000"];
                };
                readonly description: {
                    readonly description: "The description of the token; used as a description within the Tatum platform and as a currency name on the blockchain";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["My Public Token"];
                };
                readonly xpub: {
                    readonly description: "The extended public key from which a deposit address for the virtual account will be generated";
                    readonly maxLength: 150;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["xpub6EsCk1uU6cJzqvP9CdsTiJwT2rF748YkPnhv5Qo8q44DG7nn2vbyt48YRsNSUYS44jFCW9gwvD9kLQu9AuqXpTpM1c5hgg9PsuBLdeNncid"];
                };
                readonly derivationIndex: {
                    readonly description: "The derivation index to use together with the extended public key to generate the deposit address";
                    readonly format: "int32";
                    readonly type: "integer";
                    readonly maximum: 2147483647;
                    readonly examples: readonly [0];
                    readonly minimum: -2147483648;
                };
                readonly mnemonic: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "The mnemonic to generate the private key for the blockchain address from which the fee for deploying the smart contract will be deducted; is used together with the derivation index of this address";
                    readonly type: "string";
                    readonly examples: readonly ["urge pulp usage sister evidence arrest palm math please chief egg abuse"];
                };
                readonly index: {
                    readonly description: "The derivation index of the blockchain address from which the fee for deploying the smart contract will be deducted; is used together with the mnemonic to generate the private key for this address";
                    readonly type: "integer";
                    readonly maximum: 2147483647;
                    readonly examples: readonly [0];
                };
                readonly basePair: {
                    readonly description: "The base pair for the virtual currency that represents the token; used to calculate the value of a transaction";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["EUR"];
                };
                readonly baseRate: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly minimum: 0;
                    readonly description: "The exchange rate for the base pair; one unit of the created virtual currency equals 1 unit of <code>basePair</code>*<code>baseRate</code>";
                    readonly examples: readonly [1];
                };
                readonly nonce: {
                    readonly type: "number";
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                    readonly minimum: 0;
                };
                readonly customer: {
                    readonly properties: {
                        readonly externalId: {
                            readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123654"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                            readonly default: "EUR";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly customerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                        readonly providerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                    };
                    readonly required: readonly ["externalId"];
                    readonly type: "object";
                    readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                };
            };
            readonly required: readonly ["description", "supply", "symbol", "basePair", "xpub", "derivationIndex", "mnemonic", "index"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly symbol: {
                    readonly description: "The name of the token; used as an identifier within the Tatum platform and as a currency symbol on the blockchain";
                    readonly maxLength: 30;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                };
                readonly supply: {
                    readonly description: "The supply of the token";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["10000000"];
                };
                readonly description: {
                    readonly description: "The description of the token; used as a description within the Tatum platform and as a currency name on the blockchain";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["My Public Token"];
                };
                readonly address: {
                    readonly description: "The blockchain address to be assigned to the virtual account as a deposit address";
                    readonly maxLength: 42;
                    readonly minLength: 42;
                    readonly type: "string";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly privateKey: {
                    readonly description: "The private key of the blockchain address from which the fee for deploying the smart contract will be deducted";
                    readonly type: "string";
                    readonly maxLength: 66;
                    readonly minLength: 66;
                    readonly examples: readonly ["0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2"];
                };
                readonly basePair: {
                    readonly description: "The base pair for the virtual currency that represents the token; used to calculate the value of a transaction";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["EUR"];
                };
                readonly baseRate: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly minimum: 0;
                    readonly description: "The exchange rate for the base pair; one unit of the created virtual currency equals 1 unit of <code>basePair</code>*<code>baseRate</code>";
                    readonly examples: readonly [1];
                };
                readonly nonce: {
                    readonly type: "number";
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                    readonly minimum: 0;
                };
                readonly customer: {
                    readonly properties: {
                        readonly externalId: {
                            readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123654"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                            readonly default: "EUR";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly customerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                        readonly providerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                    };
                    readonly required: readonly ["externalId"];
                    readonly type: "object";
                    readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                };
            };
            readonly required: readonly ["description", "supply", "symbol", "basePair", "privateKey", "address"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly symbol: {
                    readonly description: "The name of the token; used as an identifier within the Tatum platform and as a currency symbol on the blockchain";
                    readonly maxLength: 30;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                };
                readonly supply: {
                    readonly description: "The supply of the token";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["10000000"];
                };
                readonly description: {
                    readonly description: "The description of the token; used as a description within the Tatum platform and as a currency name on the blockchain";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["My Public Token"];
                };
                readonly xpub: {
                    readonly description: "The extended public key from which a deposit address for the virtual account will be generated";
                    readonly maxLength: 150;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["xpub6EsCk1uU6cJzqvP9CdsTiJwT2rF748YkPnhv5Qo8q44DG7nn2vbyt48YRsNSUYS44jFCW9gwvD9kLQu9AuqXpTpM1c5hgg9PsuBLdeNncid"];
                };
                readonly derivationIndex: {
                    readonly description: "The derivation index to use together with the extended public key to generate the deposit address";
                    readonly format: "int32";
                    readonly type: "integer";
                    readonly maximum: 2147483647;
                    readonly examples: readonly [0];
                    readonly minimum: -2147483648;
                };
                readonly privateKey: {
                    readonly description: "The private key of the blockchain address from which the fee for deploying the smart contract will be deducted";
                    readonly type: "string";
                    readonly maxLength: 66;
                    readonly minLength: 66;
                    readonly examples: readonly ["0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2"];
                };
                readonly basePair: {
                    readonly description: "The base pair for the virtual currency that represents the token; used to calculate the value of a transaction";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["EUR"];
                };
                readonly baseRate: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly minimum: 0;
                    readonly description: "The exchange rate for the base pair; one unit of the created virtual currency equals 1 unit of <code>basePair</code>*<code>baseRate</code>";
                    readonly examples: readonly [1];
                };
                readonly nonce: {
                    readonly type: "number";
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                    readonly minimum: 0;
                };
                readonly customer: {
                    readonly properties: {
                        readonly externalId: {
                            readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123654"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                            readonly default: "EUR";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly customerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                        readonly providerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                    };
                    readonly required: readonly ["externalId"];
                    readonly type: "object";
                    readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                };
            };
            readonly required: readonly ["description", "supply", "symbol", "basePair", "xpub", "derivationIndex", "privateKey"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly symbol: {
                    readonly description: "The name of the token; used as an identifier within the Tatum platform and as a currency symbol on the blockchain";
                    readonly maxLength: 30;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                };
                readonly supply: {
                    readonly description: "The supply of the token";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["10000000"];
                };
                readonly description: {
                    readonly description: "The description of the token; used as a description within the Tatum platform and as a currency name on the blockchain";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["My Public Token"];
                };
                readonly address: {
                    readonly description: "The blockchain address to be assigned to the virtual account as a deposit address";
                    readonly maxLength: 42;
                    readonly minLength: 42;
                    readonly type: "string";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly signatureId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly description: "The KMS identifier of either the <b>private key</b> of the blockchain address from which the fee for deploying the smart contract will be deducted, or the <b>mnemonic</b> to generate the private key for the blockchain address from which the fee will be deducted";
                    readonly examples: readonly ["26d3883e-4e17-48b3-a0ee-09a3e484ac83"];
                };
                readonly index: {
                    readonly type: "number";
                    readonly minimum: 0;
                    readonly description: "(Only if the signature ID is mnemonic-based) The index of the address from which the fee will be deducted that was generated from the mnemonic";
                };
                readonly basePair: {
                    readonly description: "The base pair for the virtual currency that represents the token; used to calculate the value of a transaction";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["EUR"];
                };
                readonly baseRate: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly minimum: 0;
                    readonly description: "The exchange rate for the base pair; one unit of the created virtual currency equals 1 unit of <code>basePair</code>*<code>baseRate</code>";
                    readonly examples: readonly [1];
                };
                readonly nonce: {
                    readonly type: "number";
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                    readonly minimum: 0;
                };
                readonly customer: {
                    readonly properties: {
                        readonly externalId: {
                            readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123654"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                            readonly default: "EUR";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly customerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                        readonly providerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                    };
                    readonly required: readonly ["externalId"];
                    readonly type: "object";
                    readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                };
            };
            readonly required: readonly ["description", "supply", "symbol", "basePair", "address", "signatureId"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly symbol: {
                    readonly description: "The name of the token; used as an identifier within the Tatum platform and as a currency symbol on the blockchain";
                    readonly maxLength: 30;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                };
                readonly supply: {
                    readonly description: "The supply of the token";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["10000000"];
                };
                readonly description: {
                    readonly description: "The description of the token; used as a description within the Tatum platform and as a currency name on the blockchain";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["My Public Token"];
                };
                readonly xpub: {
                    readonly description: "The extended public key from which a deposit address for the virtual account will be generated";
                    readonly maxLength: 150;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["xpub6EsCk1uU6cJzqvP9CdsTiJwT2rF748YkPnhv5Qo8q44DG7nn2vbyt48YRsNSUYS44jFCW9gwvD9kLQu9AuqXpTpM1c5hgg9PsuBLdeNncid"];
                };
                readonly derivationIndex: {
                    readonly description: "The derivation index to use together with the extended public key to generate the deposit address";
                    readonly format: "int32";
                    readonly type: "integer";
                    readonly maximum: 2147483647;
                    readonly examples: readonly [0];
                    readonly minimum: -2147483648;
                };
                readonly signatureId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly description: "The KMS identifier of either the <b>private key</b> of the blockchain address from which the fee for deploying the smart contract will be deducted, or the <b>mnemonic</b> to generate the private key for the blockchain address from which the fee will be deducted";
                    readonly examples: readonly ["26d3883e-4e17-48b3-a0ee-09a3e484ac83"];
                };
                readonly index: {
                    readonly type: "number";
                    readonly minimum: 0;
                    readonly description: "(Only if the signature ID is mnemonic-based) The index of the address from which the fee will be deducted that was generated from the mnemonic";
                };
                readonly basePair: {
                    readonly description: "The base pair for the virtual currency that represents the token; used to calculate the value of a transaction";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["EUR"];
                };
                readonly baseRate: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly minimum: 0;
                    readonly description: "The exchange rate for the base pair; one unit of the created virtual currency equals 1 unit of <code>basePair</code>*<code>baseRate</code>";
                    readonly examples: readonly [1];
                };
                readonly nonce: {
                    readonly type: "number";
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                    readonly minimum: 0;
                };
                readonly customer: {
                    readonly properties: {
                        readonly externalId: {
                            readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123654"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                            readonly default: "EUR";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly customerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                        readonly providerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                    };
                    readonly required: readonly ["externalId"];
                    readonly type: "object";
                    readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                };
            };
            readonly required: readonly ["description", "supply", "symbol", "basePair", "xpub", "derivationIndex", "signatureId"];
        }];
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly accountId: {
                        readonly description: "Account ID with the type of currency as created ERC20/BEP20 token symbol. Account will be unfrozen when ERC20/BEP20 contract address will be set.";
                        readonly type: "string";
                        readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    };
                    readonly txId: {
                        readonly description: "TX hash of successful transaction. From this transaction receipt contract address can be obtained.";
                        readonly type: "string";
                        readonly examples: readonly ["c83f8818db43d9ba4accfe454aa44fc33123d47a4f89d47b314d6748eb0e9bc9"];
                    };
                };
                readonly type: "object";
                readonly required: readonly ["accountId", "txId"];
            }, {
                readonly properties: {
                    readonly accountId: {
                        readonly description: "Account ID with the type of currency as created ERC20/BEP20 token symbol. Account will be unfrozen when ERC20/BEP20 contract address will be set.";
                        readonly type: "string";
                        readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    };
                    readonly signatureId: {
                        readonly description: "ID of prepared payment template to sign. This is should be stored on a client side to retrieve ID of the blockchain transaction, when signing application signs the transaction and broadcasts it to the blockchain.";
                        readonly format: "uuid";
                        readonly type: "string";
                        readonly examples: readonly ["1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6"];
                    };
                };
                readonly type: "object";
                readonly required: readonly ["accountId", "signatureId"];
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.symbol.prefix";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.symbol.prefix"];
                    };
                    readonly message: {
                        readonly description: "ERC20 token cannot start with VC_.";
                        readonly type: "string";
                        readonly examples: readonly ["ERC20 token cannot start with VC_."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.address.xpub.both";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.address.xpub.both"];
                    };
                    readonly message: {
                        readonly description: "Either xpub or address must be present, not both.";
                        readonly type: "string";
                        readonly examples: readonly ["Either xpub or address must be present, not both."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.address.xpub.missing";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.address.xpub.missing"];
                    };
                    readonly message: {
                        readonly description: "Either xpub or address must be present.";
                        readonly type: "string";
                        readonly examples: readonly ["Either xpub or address must be present."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.duplicate.name";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.duplicate.name"];
                    };
                    readonly message: {
                        readonly description: "ERC20 token with given name already exists.";
                        readonly type: "string";
                        readonly examples: readonly ["ERC20 token with given name already exists."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "customer.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["customer.not.active"];
                    };
                    readonly message: {
                        readonly description: "Customer not active.";
                        readonly type: "string";
                        readonly examples: readonly ["Customer not active."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "virtual.creation.error";
                        readonly type: "string";
                        readonly examples: readonly ["virtual.creation.error"];
                    };
                    readonly message: {
                        readonly description: "It is not possible to create virtual currency.";
                        readonly type: "string";
                        readonly examples: readonly ["It is not possible to create virtual currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["account.not.exists"];
                    };
                    readonly message: {
                        readonly description: "No such account.";
                        readonly type: "string";
                        readonly examples: readonly ["No such account."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.missing";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.missing"];
                    };
                    readonly message: {
                        readonly description: "No xpub assigned to account, it is not possible to generate address. Use assignAddress method instead.";
                        readonly type: "string";
                        readonly examples: readonly ["No xpub assigned to account, it is not possible to generate address. Use assignAddress method instead."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "xpub.used";
                        readonly type: "string";
                        readonly examples: readonly ["xpub.used"];
                    };
                    readonly message: {
                        readonly description: "XPub already used registered within Tatum";
                        readonly type: "string";
                        readonly examples: readonly ["XPub already used registered within Tatum"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "Address.index.used";
                        readonly type: "string";
                        readonly examples: readonly ["address.index.used"];
                    };
                    readonly message: {
                        readonly description: "Unable to create address, derivation index is already used.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to create address, derivation index is already used."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "offchain.not.supported";
                        readonly type: "string";
                        readonly examples: readonly ["offchain.not.supported"];
                    };
                    readonly message: {
                        readonly description: "Offchain not supported for account with ${account.currency} currency.";
                        readonly type: "string";
                        readonly examples: readonly ["Offchain not supported for account with ${account.currency} currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.incompatible";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.incompatible"];
                    };
                    readonly message: {
                        readonly description: "Xpub not compatible with account currency.";
                        readonly type: "string";
                        readonly examples: readonly ["Xpub not compatible with account currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.present";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.present"];
                    };
                    readonly message: {
                        readonly description: "Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead.";
                        readonly type: "string";
                        readonly examples: readonly ["Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                    readonly required: {
                        readonly "0": "errorCode";
                        readonly "1": "message";
                        readonly "2": "statusCode";
                    };
                    readonly type: "object";
                };
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "vc.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["vc.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such virtual currency.";
                        readonly type: "string";
                        readonly examples: readonly ["No such virtual currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "Address.used";
                        readonly type: "string";
                        readonly examples: readonly ["address.used"];
                    };
                    readonly message: {
                        readonly description: "Address and currency already in use.";
                        readonly type: "string";
                        readonly examples: readonly ["Address and currency already in use."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.present";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.present"];
                    };
                    readonly message: {
                        readonly description: "Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead.";
                        readonly type: "string";
                        readonly examples: readonly ["Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                    readonly required: {
                        readonly "0": "errorCode";
                        readonly "1": "message";
                        readonly "2": "statusCode";
                    };
                    readonly type: "object";
                };
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.erc20.unsupported";
                        readonly type: "string";
                        readonly examples: readonly ["eth.erc20.unsupported"];
                    };
                    readonly message: {
                        readonly description: "Unsupported ETH ERC20 blockchain.";
                        readonly type: "string";
                        readonly examples: readonly ["Unsupported ETH ERC20 blockchain."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "ethereum.broadcast.failed";
                        readonly type: "string";
                        readonly examples: readonly ["ethereum.broadcast.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to broadcast transaction due to ${error}.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to broadcast transaction due to ${error}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "gas.price.failed";
                        readonly type: "string";
                        readonly examples: readonly ["gas.price.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to obtain current GAS price.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to obtain current GAS price."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "ethereum.transaction.body";
                        readonly type: "string";
                        readonly examples: readonly ["ethereum.transaction.body"];
                    };
                    readonly message: {
                        readonly description: "Either currency, or tokenAddress must be defined.";
                        readonly type: "string";
                        readonly examples: readonly ["Either currency, or tokenAddress must be defined."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.transaction.gas";
                        readonly type: "string";
                        readonly examples: readonly ["eth.transaction.gas"];
                    };
                    readonly message: {
                        readonly description: "Unable to calculate gas limit for transaction. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to calculate gas limit for transaction. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.transaction.hash";
                        readonly type: "string";
                        readonly examples: readonly ["eth.transaction.hash"];
                    };
                    readonly message: {
                        readonly description: "Unable to calculate transaction hash. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to calculate transaction hash. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.transaction.sign";
                        readonly type: "string";
                        readonly examples: readonly ["eth.transaction.sign"];
                    };
                    readonly message: {
                        readonly description: "Unable to sign transaction. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to sign transaction. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const KcsTransfer: {
    readonly body: {
        readonly oneOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly nonce: {
                    readonly type: "number";
                    readonly minimum: 0;
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                };
                readonly address: {
                    readonly description: "Blockchain address to send assets";
                    readonly maxLength: 42;
                    readonly minLength: 42;
                    readonly type: "string";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly amount: {
                    readonly description: "Amount to be sent in KCS.";
                    readonly maxLength: 38;
                    readonly type: "string";
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly examples: readonly ["100000"];
                };
                readonly compliant: {
                    readonly description: "Compliance check, if withdrawal is not compliant, it will not be processed.";
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                };
                readonly fromPrivateKey: {
                    readonly type: "string";
                    readonly maxLength: 66;
                    readonly minLength: 66;
                    readonly description: "Private key of sender address. Either mnemonic and index, privateKey or signature Id must be present - depends on the type of account and xpub.";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly paymentId: {
                    readonly description: "Identifier of the payment, shown for created Transaction within Tatum sender account.";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["1234"];
                };
                readonly senderAccountId: {
                    readonly maxLength: 24;
                    readonly minLength: 24;
                    readonly description: "Sender account ID";
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly senderNote: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "Note visible to owner of withdrawing account";
                    readonly type: "string";
                    readonly examples: readonly ["Sender note"];
                };
                readonly gasLimit: {
                    readonly type: "string";
                    readonly description: "Gas limit for transaction in gas price. If not set, automatic calculation will be used.";
                    readonly pattern: "^[+]?\\d+$";
                    readonly examples: readonly ["40000"];
                };
                readonly gasPrice: {
                    readonly type: "string";
                    readonly description: "Gas price in Gwei. If not set, automatic calculation will be used.";
                    readonly pattern: "^[+]?\\d+$";
                    readonly examples: readonly ["20"];
                };
            };
            readonly required: readonly ["senderAccountId", "address", "amount", "fromPrivateKey"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly nonce: {
                    readonly type: "number";
                    readonly minimum: 0;
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                };
                readonly address: {
                    readonly description: "Blockchain address to send assets";
                    readonly maxLength: 42;
                    readonly minLength: 42;
                    readonly type: "string";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly amount: {
                    readonly description: "Amount to be sent in KCS.";
                    readonly maxLength: 38;
                    readonly type: "string";
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly examples: readonly ["100000"];
                };
                readonly compliant: {
                    readonly description: "Compliance check, if withdrawal is not compliant, it will not be processed.";
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                };
                readonly index: {
                    readonly description: "Derivation index of sender address.";
                    readonly maximum: 2147483647;
                    readonly type: "integer";
                    readonly examples: readonly [0];
                };
                readonly gasLimit: {
                    readonly type: "string";
                    readonly description: "Gas limit for transaction in gas price. If not set, automatic calculation will be used.";
                    readonly pattern: "^[+]?\\d+$";
                    readonly examples: readonly ["40000"];
                };
                readonly gasPrice: {
                    readonly type: "string";
                    readonly description: "Gas price in Gwei. If not set, automatic calculation will be used.";
                    readonly pattern: "^[+]?\\d+$";
                    readonly examples: readonly ["20"];
                };
                readonly mnemonic: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "Mnemonic to generate private key for sender address. Either mnemonic and index, privateKey or signature Id must be present - depends on the type of account and xpub.";
                    readonly type: "string";
                    readonly examples: readonly ["urge pulp usage sister evidence arrest palm math please chief egg abuse"];
                };
                readonly paymentId: {
                    readonly description: "Identifier of the payment, shown for created Transaction within Tatum sender account.";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["1234"];
                };
                readonly senderAccountId: {
                    readonly maxLength: 24;
                    readonly minLength: 24;
                    readonly description: "Sender account ID";
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly senderNote: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "Note visible to owner of withdrawing account";
                    readonly type: "string";
                    readonly examples: readonly ["Sender note"];
                };
            };
            readonly required: readonly ["senderAccountId", "address", "amount", "mnemonic", "index"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly nonce: {
                    readonly type: "number";
                    readonly minimum: 0;
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                };
                readonly address: {
                    readonly description: "Blockchain address to send assets";
                    readonly maxLength: 42;
                    readonly minLength: 42;
                    readonly type: "string";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly amount: {
                    readonly description: "Amount to be sent in KCS.";
                    readonly maxLength: 38;
                    readonly type: "string";
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly examples: readonly ["100000"];
                };
                readonly compliant: {
                    readonly description: "Compliance check, if withdrawal is not compliant, it will not be processed.";
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                };
                readonly signatureId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly description: "Identifier of the mnemonic / private key associated in signing application.\nWhen hash identifies mnemonic, index must be present to represent specific account to pay from.\nPrivate key, mnemonic or signature Id must be present.\n";
                    readonly examples: readonly ["26d3883e-4e17-48b3-a0ee-09a3e484ac83"];
                };
                readonly index: {
                    readonly description: "Derivation index of sender address.";
                    readonly maximum: 2147483647;
                    readonly type: "integer";
                    readonly examples: readonly [0];
                };
                readonly paymentId: {
                    readonly description: "Identifier of the payment, shown for created Transaction within Tatum sender account.";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["1234"];
                };
                readonly senderAccountId: {
                    readonly maxLength: 24;
                    readonly minLength: 24;
                    readonly description: "Sender account ID";
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly senderNote: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "Note visible to owner of withdrawing account";
                    readonly type: "string";
                    readonly examples: readonly ["Sender note"];
                };
                readonly gasLimit: {
                    readonly type: "string";
                    readonly description: "Gas limit for transaction in gas price. If not set, automatic calculation will be used.";
                    readonly pattern: "^[+]?\\d+$";
                    readonly examples: readonly ["40000"];
                };
                readonly gasPrice: {
                    readonly type: "string";
                    readonly description: "Gas price in Gwei. If not set, automatic calculation will be used.";
                    readonly pattern: "^[+]?\\d+$";
                    readonly examples: readonly ["20"];
                };
            };
            readonly required: readonly ["senderAccountId", "address", "signatureId", "amount"];
        }];
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly oneOf: readonly [{
                readonly type: "object";
                readonly properties: {
                    readonly id: {
                        readonly description: "ID of withdrawal. If transaction is not valid in blockchain, use this id to cancel withdrawal.";
                        readonly type: "string";
                        readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    };
                    readonly txId: {
                        readonly description: "TX hash of successful transaction.";
                        readonly type: "string";
                        readonly examples: readonly ["c83f8818db43d9ba4accfe454aa44fc33123d47a4f89d47b314d6748eb0e9bc9"];
                    };
                    readonly completed: {
                        readonly description: "If set to \"true\", the withdrawal has been completed in the virtual account; if set to \"false\", the withdrawal has not been completed and you have to <a href=\"https://apidoc.tatum.io/tag/Withdrawal#operation/completeWithdrawal\" target=\"_blank\">complete it manually</a>";
                        readonly type: "boolean";
                        readonly examples: readonly [true];
                    };
                };
                readonly required: readonly ["txId", "id", "completed"];
            }, {
                readonly type: "object";
                readonly properties: {
                    readonly signatureId: {
                        readonly description: "ID of prepared payment template to sign. This is should be stored on a client side to retrieve ID of the blockchain transaction, when signing application signs the transaction and broadcasts it to the blockchain.";
                        readonly format: "uuid";
                        readonly type: "string";
                        readonly examples: readonly ["1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6"];
                    };
                };
                readonly required: readonly ["id", "signatureId"];
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.missing";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.missing"];
                    };
                    readonly message: {
                        readonly description: "No such withdrawal.";
                        readonly type: "string";
                        readonly examples: readonly ["No such withdrawal."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "rate.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["rate.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such currency rate.";
                        readonly type: "string";
                        readonly examples: readonly ["No such currency rate."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "vc.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["vc.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such virtual currency.";
                        readonly type: "string";
                        readonly examples: readonly ["No such virtual currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.recipient.format";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.recipient.format"];
                    };
                    readonly message: {
                        readonly description: "Recipient blockchain address has incorrect format.";
                        readonly type: "string";
                        readonly examples: readonly ["Recipient blockchain address has incorrect format."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.failed.transaction.failed";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.failed.transaction.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to store withdrawal, it is impossible to create transaction.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to store withdrawal, it is impossible to create transaction."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.account.virtual";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.account.virtual"];
                    };
                    readonly message: {
                        readonly description: "Sender account cannot be virtual.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender account cannot be virtual."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "offchain.not.supported";
                        readonly type: "string";
                        readonly examples: readonly ["offchain.not.supported"];
                    };
                    readonly message: {
                        readonly description: "Offchain not supported for account with ${account.currency} currency.";
                        readonly type: "string";
                        readonly examples: readonly ["Offchain not supported for account with ${account.currency} currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "amount.format";
                        readonly type: "string";
                        readonly examples: readonly ["amount.format"];
                    };
                    readonly message: {
                        readonly description: "Amount has incorrect format.";
                        readonly type: "string";
                        readonly examples: readonly ["Amount has incorrect format."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "fee.format";
                        readonly type: "string";
                        readonly examples: readonly ["fee.format"];
                    };
                    readonly message: {
                        readonly description: "Fee has incorrect format.";
                        readonly type: "string";
                        readonly examples: readonly ["Fee has incorrect format."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.not.cancelled.transaction.failed";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.not.cancelled.transaction.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to broadcast transaction, and impossible to cancel withdrawal. ID is attached, \"${withdrawalId}\", cancel it manually.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to broadcast transaction, and impossible to cancel withdrawal. ID is attached, \"${withdrawalId}\", cancel it manually."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.prepare.failed";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.prepare.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to prepare transaction, withdrawal cancelled.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to prepare transaction, withdrawal cancelled."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.not.exists"];
                    };
                    readonly message: {
                        readonly description: "Unable to find sender account ${transaction.senderAccountId}.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find sender account ${transaction.senderAccountId}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.customer.disabled";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.customer.disabled"];
                    };
                    readonly message: {
                        readonly description: "Sender accounts customer ${senderAccount.customerId} is disabled, unable to perform payment.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender accounts customer ${senderAccount.customerId} is disabled, unable to perform payment."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "balance.insufficient";
                        readonly type: "string";
                        readonly examples: readonly ["balance.insufficient"];
                    };
                    readonly message: {
                        readonly description: "Insufficient balance for account ${transaction.senderAccountId} and payment amount ${transaction.amount}. Sender balance is ${senderAccount.balance.availableBalance as string}, amount is ${amount}";
                        readonly type: "string";
                        readonly examples: readonly ["Insufficient balance for account ${transaction.senderAccountId} and payment amount ${transaction.amount}. Sender balance is ${senderAccount.balance.availableBalance as string}, amount is ${amount}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "amount.btc";
                        readonly type: "string";
                        readonly examples: readonly ["amount.btc"];
                    };
                    readonly message: {
                        readonly description: "BTC|LTC|BCH|DOGE payment amount must be at least 0.00000001, not ${transaction.amount}.";
                        readonly type: "string";
                        readonly examples: readonly ["BTC|LTC|BCH|DOGE payment amount must be at least 0.00000001, not ${transaction.amount}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "amount.eth";
                        readonly type: "string";
                        readonly examples: readonly ["amount.eth"];
                    };
                    readonly message: {
                        readonly description: "ETH payment amount must be at least 0.000000000001, not ${transaction.amount}.";
                        readonly type: "string";
                        readonly examples: readonly ["ETH payment amount must be at least 0.000000000001, not ${transaction.amount}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.frozen";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.frozen"];
                    };
                    readonly message: {
                        readonly description: "Sender account ${transaction.senderAccountId} is frozen, unable to perform payment.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender account ${transaction.senderAccountId} is frozen, unable to perform payment."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.pending";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.pending"];
                    };
                    readonly message: {
                        readonly description: "Unable to prepare withdrawal, last withdrawal with id ${id} is not yet processed by blockchain.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to prepare withdrawal, last withdrawal with id ${id} is not yet processed by blockchain."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "private.mnemonic.missing";
                        readonly type: "string";
                        readonly examples: readonly ["private.mnemonic.missing"];
                    };
                    readonly message: {
                        readonly description: "Either mnemonic and index or private key must be present.";
                        readonly type: "string";
                        readonly examples: readonly ["Either mnemonic and index or private key must be present."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.erc20.unsupported";
                        readonly type: "string";
                        readonly examples: readonly ["eth.erc20.unsupported"];
                    };
                    readonly message: {
                        readonly description: "Unsupported ETH ERC20 blockchain.";
                        readonly type: "string";
                        readonly examples: readonly ["Unsupported ETH ERC20 blockchain."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "ethereum.broadcast.failed";
                        readonly type: "string";
                        readonly examples: readonly ["ethereum.broadcast.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to broadcast transaction due to ${error}.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to broadcast transaction due to ${error}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "gas.price.failed";
                        readonly type: "string";
                        readonly examples: readonly ["gas.price.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to obtain current GAS price.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to obtain current GAS price."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "ethereum.transaction.body";
                        readonly type: "string";
                        readonly examples: readonly ["ethereum.transaction.body"];
                    };
                    readonly message: {
                        readonly description: "Either currency, or tokenAddress must be defined.";
                        readonly type: "string";
                        readonly examples: readonly ["Either currency, or tokenAddress must be defined."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.transaction.gas";
                        readonly type: "string";
                        readonly examples: readonly ["eth.transaction.gas"];
                    };
                    readonly message: {
                        readonly description: "Unable to calculate gas limit for transaction. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to calculate gas limit for transaction. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.transaction.hash";
                        readonly type: "string";
                        readonly examples: readonly ["eth.transaction.hash"];
                    };
                    readonly message: {
                        readonly description: "Unable to calculate transaction hash. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to calculate transaction hash. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.transaction.sign";
                        readonly type: "string";
                        readonly examples: readonly ["eth.transaction.sign"];
                    };
                    readonly message: {
                        readonly description: "Unable to sign transaction. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to sign transaction. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const KlayDeployErc20: {
    readonly body: {
        readonly oneOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly symbol: {
                    readonly description: "The name of the token; used as an identifier within the Tatum platform and as a currency symbol on the blockchain";
                    readonly maxLength: 30;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                };
                readonly supply: {
                    readonly description: "The supply of the token";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["10000000"];
                };
                readonly description: {
                    readonly description: "The description of the token; used as a description within the Tatum platform and as a currency name on the blockchain";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["My Public Token"];
                };
                readonly address: {
                    readonly description: "The blockchain address to be assigned to the virtual account as a deposit address";
                    readonly maxLength: 42;
                    readonly minLength: 42;
                    readonly type: "string";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly mnemonic: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "The mnemonic to generate the private key for the blockchain address from which the fee for deploying the smart contract will be deducted; is used together with the derivation index of this address";
                    readonly type: "string";
                    readonly examples: readonly ["urge pulp usage sister evidence arrest palm math please chief egg abuse"];
                };
                readonly index: {
                    readonly description: "The derivation index of the blockchain address from which the fee for deploying the smart contract will be deducted; is used together with the mnemonic to generate the private key for this address";
                    readonly type: "integer";
                    readonly maximum: 2147483647;
                    readonly examples: readonly [0];
                };
                readonly basePair: {
                    readonly description: "The base pair for the virtual currency that represents the token; used to calculate the value of a transaction";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["EUR"];
                };
                readonly baseRate: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly minimum: 0;
                    readonly description: "The exchange rate for the base pair; one unit of the created virtual currency equals 1 unit of <code>basePair</code>*<code>baseRate</code>";
                    readonly examples: readonly [1];
                };
                readonly nonce: {
                    readonly type: "number";
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                    readonly minimum: 0;
                };
                readonly customer: {
                    readonly properties: {
                        readonly externalId: {
                            readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123654"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                            readonly default: "EUR";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly customerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                        readonly providerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                    };
                    readonly required: readonly ["externalId"];
                    readonly type: "object";
                    readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                };
            };
            readonly required: readonly ["description", "supply", "symbol", "basePair", "address", "mnemonic", "index"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly symbol: {
                    readonly description: "The name of the token; used as an identifier within the Tatum platform and as a currency symbol on the blockchain";
                    readonly maxLength: 30;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                };
                readonly supply: {
                    readonly description: "The supply of the token";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["10000000"];
                };
                readonly description: {
                    readonly description: "The description of the token; used as a description within the Tatum platform and as a currency name on the blockchain";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["My Public Token"];
                };
                readonly xpub: {
                    readonly description: "The extended public key from which a deposit address for the virtual account will be generated";
                    readonly maxLength: 150;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["xpub6EsCk1uU6cJzqvP9CdsTiJwT2rF748YkPnhv5Qo8q44DG7nn2vbyt48YRsNSUYS44jFCW9gwvD9kLQu9AuqXpTpM1c5hgg9PsuBLdeNncid"];
                };
                readonly derivationIndex: {
                    readonly description: "The derivation index to use together with the extended public key to generate the deposit address";
                    readonly format: "int32";
                    readonly type: "integer";
                    readonly maximum: 2147483647;
                    readonly examples: readonly [0];
                    readonly minimum: -2147483648;
                };
                readonly mnemonic: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "The mnemonic to generate the private key for the blockchain address from which the fee for deploying the smart contract will be deducted; is used together with the derivation index of this address";
                    readonly type: "string";
                    readonly examples: readonly ["urge pulp usage sister evidence arrest palm math please chief egg abuse"];
                };
                readonly index: {
                    readonly description: "The derivation index of the blockchain address from which the fee for deploying the smart contract will be deducted; is used together with the mnemonic to generate the private key for this address";
                    readonly type: "integer";
                    readonly maximum: 2147483647;
                    readonly examples: readonly [0];
                };
                readonly basePair: {
                    readonly description: "The base pair for the virtual currency that represents the token; used to calculate the value of a transaction";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["EUR"];
                };
                readonly baseRate: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly minimum: 0;
                    readonly description: "The exchange rate for the base pair; one unit of the created virtual currency equals 1 unit of <code>basePair</code>*<code>baseRate</code>";
                    readonly examples: readonly [1];
                };
                readonly nonce: {
                    readonly type: "number";
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                    readonly minimum: 0;
                };
                readonly customer: {
                    readonly properties: {
                        readonly externalId: {
                            readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123654"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                            readonly default: "EUR";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly customerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                        readonly providerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                    };
                    readonly required: readonly ["externalId"];
                    readonly type: "object";
                    readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                };
            };
            readonly required: readonly ["description", "supply", "symbol", "basePair", "xpub", "derivationIndex", "mnemonic", "index"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly symbol: {
                    readonly description: "The name of the token; used as an identifier within the Tatum platform and as a currency symbol on the blockchain";
                    readonly maxLength: 30;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                };
                readonly supply: {
                    readonly description: "The supply of the token";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["10000000"];
                };
                readonly description: {
                    readonly description: "The description of the token; used as a description within the Tatum platform and as a currency name on the blockchain";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["My Public Token"];
                };
                readonly address: {
                    readonly description: "The blockchain address to be assigned to the virtual account as a deposit address";
                    readonly maxLength: 42;
                    readonly minLength: 42;
                    readonly type: "string";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly privateKey: {
                    readonly description: "The private key of the blockchain address from which the fee for deploying the smart contract will be deducted";
                    readonly type: "string";
                    readonly maxLength: 66;
                    readonly minLength: 66;
                    readonly examples: readonly ["0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2"];
                };
                readonly basePair: {
                    readonly description: "The base pair for the virtual currency that represents the token; used to calculate the value of a transaction";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["EUR"];
                };
                readonly baseRate: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly minimum: 0;
                    readonly description: "The exchange rate for the base pair; one unit of the created virtual currency equals 1 unit of <code>basePair</code>*<code>baseRate</code>";
                    readonly examples: readonly [1];
                };
                readonly nonce: {
                    readonly type: "number";
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                    readonly minimum: 0;
                };
                readonly customer: {
                    readonly properties: {
                        readonly externalId: {
                            readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123654"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                            readonly default: "EUR";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly customerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                        readonly providerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                    };
                    readonly required: readonly ["externalId"];
                    readonly type: "object";
                    readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                };
            };
            readonly required: readonly ["description", "supply", "symbol", "basePair", "privateKey", "address"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly symbol: {
                    readonly description: "The name of the token; used as an identifier within the Tatum platform and as a currency symbol on the blockchain";
                    readonly maxLength: 30;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                };
                readonly supply: {
                    readonly description: "The supply of the token";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["10000000"];
                };
                readonly description: {
                    readonly description: "The description of the token; used as a description within the Tatum platform and as a currency name on the blockchain";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["My Public Token"];
                };
                readonly xpub: {
                    readonly description: "The extended public key from which a deposit address for the virtual account will be generated";
                    readonly maxLength: 150;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["xpub6EsCk1uU6cJzqvP9CdsTiJwT2rF748YkPnhv5Qo8q44DG7nn2vbyt48YRsNSUYS44jFCW9gwvD9kLQu9AuqXpTpM1c5hgg9PsuBLdeNncid"];
                };
                readonly derivationIndex: {
                    readonly description: "The derivation index to use together with the extended public key to generate the deposit address";
                    readonly format: "int32";
                    readonly type: "integer";
                    readonly maximum: 2147483647;
                    readonly examples: readonly [0];
                    readonly minimum: -2147483648;
                };
                readonly privateKey: {
                    readonly description: "The private key of the blockchain address from which the fee for deploying the smart contract will be deducted";
                    readonly type: "string";
                    readonly maxLength: 66;
                    readonly minLength: 66;
                    readonly examples: readonly ["0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2"];
                };
                readonly basePair: {
                    readonly description: "The base pair for the virtual currency that represents the token; used to calculate the value of a transaction";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["EUR"];
                };
                readonly baseRate: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly minimum: 0;
                    readonly description: "The exchange rate for the base pair; one unit of the created virtual currency equals 1 unit of <code>basePair</code>*<code>baseRate</code>";
                    readonly examples: readonly [1];
                };
                readonly nonce: {
                    readonly type: "number";
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                    readonly minimum: 0;
                };
                readonly customer: {
                    readonly properties: {
                        readonly externalId: {
                            readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123654"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                            readonly default: "EUR";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly customerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                        readonly providerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                    };
                    readonly required: readonly ["externalId"];
                    readonly type: "object";
                    readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                };
            };
            readonly required: readonly ["description", "supply", "symbol", "basePair", "xpub", "derivationIndex", "privateKey"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly symbol: {
                    readonly description: "The name of the token; used as an identifier within the Tatum platform and as a currency symbol on the blockchain";
                    readonly maxLength: 30;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                };
                readonly supply: {
                    readonly description: "The supply of the token";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["10000000"];
                };
                readonly description: {
                    readonly description: "The description of the token; used as a description within the Tatum platform and as a currency name on the blockchain";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["My Public Token"];
                };
                readonly address: {
                    readonly description: "The blockchain address to be assigned to the virtual account as a deposit address";
                    readonly maxLength: 42;
                    readonly minLength: 42;
                    readonly type: "string";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly signatureId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly description: "The KMS identifier of either the <b>private key</b> of the blockchain address from which the fee for deploying the smart contract will be deducted, or the <b>mnemonic</b> to generate the private key for the blockchain address from which the fee will be deducted";
                    readonly examples: readonly ["26d3883e-4e17-48b3-a0ee-09a3e484ac83"];
                };
                readonly index: {
                    readonly type: "number";
                    readonly minimum: 0;
                    readonly description: "(Only if the signature ID is mnemonic-based) The index of the address from which the fee will be deducted that was generated from the mnemonic";
                };
                readonly basePair: {
                    readonly description: "The base pair for the virtual currency that represents the token; used to calculate the value of a transaction";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["EUR"];
                };
                readonly baseRate: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly minimum: 0;
                    readonly description: "The exchange rate for the base pair; one unit of the created virtual currency equals 1 unit of <code>basePair</code>*<code>baseRate</code>";
                    readonly examples: readonly [1];
                };
                readonly nonce: {
                    readonly type: "number";
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                    readonly minimum: 0;
                };
                readonly customer: {
                    readonly properties: {
                        readonly externalId: {
                            readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123654"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                            readonly default: "EUR";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly customerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                        readonly providerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                    };
                    readonly required: readonly ["externalId"];
                    readonly type: "object";
                    readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                };
            };
            readonly required: readonly ["description", "supply", "symbol", "basePair", "address", "signatureId"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly symbol: {
                    readonly description: "The name of the token; used as an identifier within the Tatum platform and as a currency symbol on the blockchain";
                    readonly maxLength: 30;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                };
                readonly supply: {
                    readonly description: "The supply of the token";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["10000000"];
                };
                readonly description: {
                    readonly description: "The description of the token; used as a description within the Tatum platform and as a currency name on the blockchain";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["My Public Token"];
                };
                readonly xpub: {
                    readonly description: "The extended public key from which a deposit address for the virtual account will be generated";
                    readonly maxLength: 150;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["xpub6EsCk1uU6cJzqvP9CdsTiJwT2rF748YkPnhv5Qo8q44DG7nn2vbyt48YRsNSUYS44jFCW9gwvD9kLQu9AuqXpTpM1c5hgg9PsuBLdeNncid"];
                };
                readonly derivationIndex: {
                    readonly description: "The derivation index to use together with the extended public key to generate the deposit address";
                    readonly format: "int32";
                    readonly type: "integer";
                    readonly maximum: 2147483647;
                    readonly examples: readonly [0];
                    readonly minimum: -2147483648;
                };
                readonly signatureId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly description: "The KMS identifier of either the <b>private key</b> of the blockchain address from which the fee for deploying the smart contract will be deducted, or the <b>mnemonic</b> to generate the private key for the blockchain address from which the fee will be deducted";
                    readonly examples: readonly ["26d3883e-4e17-48b3-a0ee-09a3e484ac83"];
                };
                readonly index: {
                    readonly type: "number";
                    readonly minimum: 0;
                    readonly description: "(Only if the signature ID is mnemonic-based) The index of the address from which the fee will be deducted that was generated from the mnemonic";
                };
                readonly basePair: {
                    readonly description: "The base pair for the virtual currency that represents the token; used to calculate the value of a transaction";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["EUR"];
                };
                readonly baseRate: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly minimum: 0;
                    readonly description: "The exchange rate for the base pair; one unit of the created virtual currency equals 1 unit of <code>basePair</code>*<code>baseRate</code>";
                    readonly examples: readonly [1];
                };
                readonly nonce: {
                    readonly type: "number";
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                    readonly minimum: 0;
                };
                readonly customer: {
                    readonly properties: {
                        readonly externalId: {
                            readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123654"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                            readonly default: "EUR";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly customerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                        readonly providerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                    };
                    readonly required: readonly ["externalId"];
                    readonly type: "object";
                    readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                };
            };
            readonly required: readonly ["description", "supply", "symbol", "basePair", "xpub", "derivationIndex", "signatureId"];
        }];
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly accountId: {
                        readonly description: "Account ID with the type of currency as created ERC20/BEP20 token symbol. Account will be unfrozen when ERC20/BEP20 contract address will be set.";
                        readonly type: "string";
                        readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    };
                    readonly txId: {
                        readonly description: "TX hash of successful transaction. From this transaction receipt contract address can be obtained.";
                        readonly type: "string";
                        readonly examples: readonly ["c83f8818db43d9ba4accfe454aa44fc33123d47a4f89d47b314d6748eb0e9bc9"];
                    };
                };
                readonly type: "object";
                readonly required: readonly ["accountId", "txId"];
            }, {
                readonly properties: {
                    readonly accountId: {
                        readonly description: "Account ID with the type of currency as created ERC20/BEP20 token symbol. Account will be unfrozen when ERC20/BEP20 contract address will be set.";
                        readonly type: "string";
                        readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    };
                    readonly signatureId: {
                        readonly description: "ID of prepared payment template to sign. This is should be stored on a client side to retrieve ID of the blockchain transaction, when signing application signs the transaction and broadcasts it to the blockchain.";
                        readonly format: "uuid";
                        readonly type: "string";
                        readonly examples: readonly ["1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6"];
                    };
                };
                readonly type: "object";
                readonly required: readonly ["accountId", "signatureId"];
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.symbol.prefix";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.symbol.prefix"];
                    };
                    readonly message: {
                        readonly description: "ERC20 token cannot start with VC_.";
                        readonly type: "string";
                        readonly examples: readonly ["ERC20 token cannot start with VC_."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.address.xpub.both";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.address.xpub.both"];
                    };
                    readonly message: {
                        readonly description: "Either xpub or address must be present, not both.";
                        readonly type: "string";
                        readonly examples: readonly ["Either xpub or address must be present, not both."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.address.xpub.missing";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.address.xpub.missing"];
                    };
                    readonly message: {
                        readonly description: "Either xpub or address must be present.";
                        readonly type: "string";
                        readonly examples: readonly ["Either xpub or address must be present."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.duplicate.name";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.duplicate.name"];
                    };
                    readonly message: {
                        readonly description: "ERC20 token with given name already exists.";
                        readonly type: "string";
                        readonly examples: readonly ["ERC20 token with given name already exists."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "customer.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["customer.not.active"];
                    };
                    readonly message: {
                        readonly description: "Customer not active.";
                        readonly type: "string";
                        readonly examples: readonly ["Customer not active."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "virtual.creation.error";
                        readonly type: "string";
                        readonly examples: readonly ["virtual.creation.error"];
                    };
                    readonly message: {
                        readonly description: "It is not possible to create virtual currency.";
                        readonly type: "string";
                        readonly examples: readonly ["It is not possible to create virtual currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["account.not.exists"];
                    };
                    readonly message: {
                        readonly description: "No such account.";
                        readonly type: "string";
                        readonly examples: readonly ["No such account."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.missing";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.missing"];
                    };
                    readonly message: {
                        readonly description: "No xpub assigned to account, it is not possible to generate address. Use assignAddress method instead.";
                        readonly type: "string";
                        readonly examples: readonly ["No xpub assigned to account, it is not possible to generate address. Use assignAddress method instead."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "xpub.used";
                        readonly type: "string";
                        readonly examples: readonly ["xpub.used"];
                    };
                    readonly message: {
                        readonly description: "XPub already used registered within Tatum";
                        readonly type: "string";
                        readonly examples: readonly ["XPub already used registered within Tatum"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "Address.index.used";
                        readonly type: "string";
                        readonly examples: readonly ["address.index.used"];
                    };
                    readonly message: {
                        readonly description: "Unable to create address, derivation index is already used.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to create address, derivation index is already used."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "offchain.not.supported";
                        readonly type: "string";
                        readonly examples: readonly ["offchain.not.supported"];
                    };
                    readonly message: {
                        readonly description: "Offchain not supported for account with ${account.currency} currency.";
                        readonly type: "string";
                        readonly examples: readonly ["Offchain not supported for account with ${account.currency} currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.incompatible";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.incompatible"];
                    };
                    readonly message: {
                        readonly description: "Xpub not compatible with account currency.";
                        readonly type: "string";
                        readonly examples: readonly ["Xpub not compatible with account currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.present";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.present"];
                    };
                    readonly message: {
                        readonly description: "Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead.";
                        readonly type: "string";
                        readonly examples: readonly ["Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                    readonly required: {
                        readonly "0": "errorCode";
                        readonly "1": "message";
                        readonly "2": "statusCode";
                    };
                    readonly type: "object";
                };
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "vc.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["vc.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such virtual currency.";
                        readonly type: "string";
                        readonly examples: readonly ["No such virtual currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "Address.used";
                        readonly type: "string";
                        readonly examples: readonly ["address.used"];
                    };
                    readonly message: {
                        readonly description: "Address and currency already in use.";
                        readonly type: "string";
                        readonly examples: readonly ["Address and currency already in use."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.present";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.present"];
                    };
                    readonly message: {
                        readonly description: "Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead.";
                        readonly type: "string";
                        readonly examples: readonly ["Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                    readonly required: {
                        readonly "0": "errorCode";
                        readonly "1": "message";
                        readonly "2": "statusCode";
                    };
                    readonly type: "object";
                };
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.erc20.unsupported";
                        readonly type: "string";
                        readonly examples: readonly ["eth.erc20.unsupported"];
                    };
                    readonly message: {
                        readonly description: "Unsupported ETH ERC20 blockchain.";
                        readonly type: "string";
                        readonly examples: readonly ["Unsupported ETH ERC20 blockchain."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "ethereum.broadcast.failed";
                        readonly type: "string";
                        readonly examples: readonly ["ethereum.broadcast.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to broadcast transaction due to ${error}.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to broadcast transaction due to ${error}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "gas.price.failed";
                        readonly type: "string";
                        readonly examples: readonly ["gas.price.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to obtain current GAS price.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to obtain current GAS price."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "ethereum.transaction.body";
                        readonly type: "string";
                        readonly examples: readonly ["ethereum.transaction.body"];
                    };
                    readonly message: {
                        readonly description: "Either currency, or tokenAddress must be defined.";
                        readonly type: "string";
                        readonly examples: readonly ["Either currency, or tokenAddress must be defined."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.transaction.gas";
                        readonly type: "string";
                        readonly examples: readonly ["eth.transaction.gas"];
                    };
                    readonly message: {
                        readonly description: "Unable to calculate gas limit for transaction. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to calculate gas limit for transaction. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.transaction.hash";
                        readonly type: "string";
                        readonly examples: readonly ["eth.transaction.hash"];
                    };
                    readonly message: {
                        readonly description: "Unable to calculate transaction hash. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to calculate transaction hash. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.transaction.sign";
                        readonly type: "string";
                        readonly examples: readonly ["eth.transaction.sign"];
                    };
                    readonly message: {
                        readonly description: "Unable to sign transaction. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to sign transaction. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const KlayTransfer: {
    readonly body: {
        readonly oneOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly nonce: {
                    readonly type: "number";
                    readonly minimum: 0;
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                };
                readonly address: {
                    readonly description: "Blockchain address to send assets";
                    readonly maxLength: 42;
                    readonly minLength: 42;
                    readonly type: "string";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly amount: {
                    readonly description: "Amount to be sent in Ether | MATIC | XDC | KCS.";
                    readonly maxLength: 38;
                    readonly type: "string";
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly examples: readonly ["100000"];
                };
                readonly compliant: {
                    readonly description: "Compliance check, if withdrawal is not compliant, it will not be processed.";
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                };
                readonly privateKey: {
                    readonly type: "string";
                    readonly maxLength: 66;
                    readonly minLength: 66;
                    readonly description: "Private key of sender address. Either mnemonic and index, privateKey or signature Id must be present - depends on the type of account and xpub.";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly paymentId: {
                    readonly description: "Identifier of the payment, shown for created Transaction within Tatum sender account.";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["1234"];
                };
                readonly senderAccountId: {
                    readonly maxLength: 24;
                    readonly minLength: 24;
                    readonly description: "Sender account ID";
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly senderNote: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "Note visible to owner of withdrawing account";
                    readonly type: "string";
                    readonly examples: readonly ["Sender note"];
                };
                readonly gasLimit: {
                    readonly type: "string";
                    readonly description: "Gas limit for transaction in gas price. If not set, automatic calculation will be used.";
                    readonly pattern: "^[+]?\\d+$";
                    readonly examples: readonly ["40000"];
                };
                readonly gasPrice: {
                    readonly type: "string";
                    readonly description: "Gas price in Gwei. If not set, automatic calculation will be used.";
                    readonly pattern: "^[+]?\\d+$";
                    readonly examples: readonly ["20"];
                };
            };
            readonly required: readonly ["senderAccountId", "address", "amount", "privateKey"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly nonce: {
                    readonly type: "number";
                    readonly minimum: 0;
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                };
                readonly address: {
                    readonly description: "Blockchain address to send assets";
                    readonly maxLength: 42;
                    readonly minLength: 42;
                    readonly type: "string";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly amount: {
                    readonly description: "Amount to be sent in Ether | MATIC | XDC | KCS.";
                    readonly maxLength: 38;
                    readonly type: "string";
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly examples: readonly ["100000"];
                };
                readonly compliant: {
                    readonly description: "Compliance check, if withdrawal is not compliant, it will not be processed.";
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                };
                readonly index: {
                    readonly description: "Derivation index of sender address.";
                    readonly maximum: 2147483647;
                    readonly type: "integer";
                    readonly examples: readonly [0];
                };
                readonly gasLimit: {
                    readonly type: "string";
                    readonly description: "Gas limit for transaction in gas price. If not set, automatic calculation will be used.";
                    readonly pattern: "^[+]?\\d+$";
                    readonly examples: readonly ["40000"];
                };
                readonly gasPrice: {
                    readonly type: "string";
                    readonly description: "Gas price in Gwei. If not set, automatic calculation will be used.";
                    readonly pattern: "^[+]?\\d+$";
                    readonly examples: readonly ["20"];
                };
                readonly mnemonic: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "Mnemonic to generate private key for sender address. Either mnemonic and index, privateKey or signature Id must be present - depends on the type of account and xpub.";
                    readonly type: "string";
                    readonly examples: readonly ["urge pulp usage sister evidence arrest palm math please chief egg abuse"];
                };
                readonly paymentId: {
                    readonly description: "Identifier of the payment, shown for created Transaction within Tatum sender account.";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["1234"];
                };
                readonly senderAccountId: {
                    readonly maxLength: 24;
                    readonly minLength: 24;
                    readonly description: "Sender account ID";
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly senderNote: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "Note visible to owner of withdrawing account";
                    readonly type: "string";
                    readonly examples: readonly ["Sender note"];
                };
            };
            readonly required: readonly ["senderAccountId", "address", "amount", "mnemonic", "index"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly nonce: {
                    readonly type: "number";
                    readonly minimum: 0;
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                };
                readonly address: {
                    readonly description: "Blockchain address to send assets";
                    readonly maxLength: 42;
                    readonly minLength: 42;
                    readonly type: "string";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly amount: {
                    readonly description: "Amount to be sent in Ether | MATIC | XDC | KCS.";
                    readonly maxLength: 38;
                    readonly type: "string";
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly examples: readonly ["100000"];
                };
                readonly compliant: {
                    readonly description: "Compliance check, if withdrawal is not compliant, it will not be processed.";
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                };
                readonly signatureId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly description: "Identifier of the mnemonic / private key associated in signing application.\nWhen hash identifies mnemonic, index must be present to represent specific account to pay from.\nPrivate key, mnemonic or signature Id must be present.\n";
                    readonly examples: readonly ["26d3883e-4e17-48b3-a0ee-09a3e484ac83"];
                };
                readonly index: {
                    readonly description: "Derivation index of sender address.";
                    readonly maximum: 2147483647;
                    readonly type: "integer";
                    readonly examples: readonly [0];
                };
                readonly paymentId: {
                    readonly description: "Identifier of the payment, shown for created Transaction within Tatum sender account.";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["1234"];
                };
                readonly senderAccountId: {
                    readonly maxLength: 24;
                    readonly minLength: 24;
                    readonly description: "Sender account ID";
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly senderNote: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "Note visible to owner of withdrawing account";
                    readonly type: "string";
                    readonly examples: readonly ["Sender note"];
                };
                readonly gasLimit: {
                    readonly type: "string";
                    readonly description: "Gas limit for transaction in gas price. If not set, automatic calculation will be used.";
                    readonly pattern: "^[+]?\\d+$";
                    readonly examples: readonly ["40000"];
                };
                readonly gasPrice: {
                    readonly type: "string";
                    readonly description: "Gas price in Gwei. If not set, automatic calculation will be used.";
                    readonly pattern: "^[+]?\\d+$";
                    readonly examples: readonly ["20"];
                };
            };
            readonly required: readonly ["senderAccountId", "address", "signatureId", "amount"];
        }];
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly oneOf: readonly [{
                readonly type: "object";
                readonly properties: {
                    readonly id: {
                        readonly description: "ID of withdrawal. If transaction is not valid in blockchain, use this id to cancel withdrawal.";
                        readonly type: "string";
                        readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    };
                    readonly txId: {
                        readonly description: "TX hash of successful transaction.";
                        readonly type: "string";
                        readonly examples: readonly ["c83f8818db43d9ba4accfe454aa44fc33123d47a4f89d47b314d6748eb0e9bc9"];
                    };
                    readonly completed: {
                        readonly description: "If set to \"true\", the withdrawal has been completed in the virtual account; if set to \"false\", the withdrawal has not been completed and you have to <a href=\"https://apidoc.tatum.io/tag/Withdrawal#operation/completeWithdrawal\" target=\"_blank\">complete it manually</a>";
                        readonly type: "boolean";
                        readonly examples: readonly [true];
                    };
                };
                readonly required: readonly ["txId", "id", "completed"];
            }, {
                readonly type: "object";
                readonly properties: {
                    readonly signatureId: {
                        readonly description: "ID of prepared payment template to sign. This is should be stored on a client side to retrieve ID of the blockchain transaction, when signing application signs the transaction and broadcasts it to the blockchain.";
                        readonly format: "uuid";
                        readonly type: "string";
                        readonly examples: readonly ["1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6"];
                    };
                };
                readonly required: readonly ["id", "signatureId"];
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.missing";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.missing"];
                    };
                    readonly message: {
                        readonly description: "No such withdrawal.";
                        readonly type: "string";
                        readonly examples: readonly ["No such withdrawal."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "rate.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["rate.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such currency rate.";
                        readonly type: "string";
                        readonly examples: readonly ["No such currency rate."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "vc.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["vc.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such virtual currency.";
                        readonly type: "string";
                        readonly examples: readonly ["No such virtual currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.recipient.format";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.recipient.format"];
                    };
                    readonly message: {
                        readonly description: "Recipient blockchain address has incorrect format.";
                        readonly type: "string";
                        readonly examples: readonly ["Recipient blockchain address has incorrect format."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.failed.transaction.failed";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.failed.transaction.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to store withdrawal, it is impossible to create transaction.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to store withdrawal, it is impossible to create transaction."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.account.virtual";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.account.virtual"];
                    };
                    readonly message: {
                        readonly description: "Sender account cannot be virtual.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender account cannot be virtual."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "offchain.not.supported";
                        readonly type: "string";
                        readonly examples: readonly ["offchain.not.supported"];
                    };
                    readonly message: {
                        readonly description: "Offchain not supported for account with ${account.currency} currency.";
                        readonly type: "string";
                        readonly examples: readonly ["Offchain not supported for account with ${account.currency} currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "amount.format";
                        readonly type: "string";
                        readonly examples: readonly ["amount.format"];
                    };
                    readonly message: {
                        readonly description: "Amount has incorrect format.";
                        readonly type: "string";
                        readonly examples: readonly ["Amount has incorrect format."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "fee.format";
                        readonly type: "string";
                        readonly examples: readonly ["fee.format"];
                    };
                    readonly message: {
                        readonly description: "Fee has incorrect format.";
                        readonly type: "string";
                        readonly examples: readonly ["Fee has incorrect format."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.not.cancelled.transaction.failed";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.not.cancelled.transaction.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to broadcast transaction, and impossible to cancel withdrawal. ID is attached, \"${withdrawalId}\", cancel it manually.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to broadcast transaction, and impossible to cancel withdrawal. ID is attached, \"${withdrawalId}\", cancel it manually."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.prepare.failed";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.prepare.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to prepare transaction, withdrawal cancelled.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to prepare transaction, withdrawal cancelled."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.not.exists"];
                    };
                    readonly message: {
                        readonly description: "Unable to find sender account ${transaction.senderAccountId}.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find sender account ${transaction.senderAccountId}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.customer.disabled";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.customer.disabled"];
                    };
                    readonly message: {
                        readonly description: "Sender accounts customer ${senderAccount.customerId} is disabled, unable to perform payment.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender accounts customer ${senderAccount.customerId} is disabled, unable to perform payment."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "balance.insufficient";
                        readonly type: "string";
                        readonly examples: readonly ["balance.insufficient"];
                    };
                    readonly message: {
                        readonly description: "Insufficient balance for account ${transaction.senderAccountId} and payment amount ${transaction.amount}. Sender balance is ${senderAccount.balance.availableBalance as string}, amount is ${amount}";
                        readonly type: "string";
                        readonly examples: readonly ["Insufficient balance for account ${transaction.senderAccountId} and payment amount ${transaction.amount}. Sender balance is ${senderAccount.balance.availableBalance as string}, amount is ${amount}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "amount.btc";
                        readonly type: "string";
                        readonly examples: readonly ["amount.btc"];
                    };
                    readonly message: {
                        readonly description: "BTC|LTC|BCH|DOGE payment amount must be at least 0.00000001, not ${transaction.amount}.";
                        readonly type: "string";
                        readonly examples: readonly ["BTC|LTC|BCH|DOGE payment amount must be at least 0.00000001, not ${transaction.amount}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "amount.eth";
                        readonly type: "string";
                        readonly examples: readonly ["amount.eth"];
                    };
                    readonly message: {
                        readonly description: "ETH payment amount must be at least 0.000000000001, not ${transaction.amount}.";
                        readonly type: "string";
                        readonly examples: readonly ["ETH payment amount must be at least 0.000000000001, not ${transaction.amount}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.frozen";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.frozen"];
                    };
                    readonly message: {
                        readonly description: "Sender account ${transaction.senderAccountId} is frozen, unable to perform payment.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender account ${transaction.senderAccountId} is frozen, unable to perform payment."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.pending";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.pending"];
                    };
                    readonly message: {
                        readonly description: "Unable to prepare withdrawal, last withdrawal with id ${id} is not yet processed by blockchain.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to prepare withdrawal, last withdrawal with id ${id} is not yet processed by blockchain."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "private.mnemonic.missing";
                        readonly type: "string";
                        readonly examples: readonly ["private.mnemonic.missing"];
                    };
                    readonly message: {
                        readonly description: "Either mnemonic and index or private key must be present.";
                        readonly type: "string";
                        readonly examples: readonly ["Either mnemonic and index or private key must be present."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.erc20.unsupported";
                        readonly type: "string";
                        readonly examples: readonly ["eth.erc20.unsupported"];
                    };
                    readonly message: {
                        readonly description: "Unsupported ETH ERC20 blockchain.";
                        readonly type: "string";
                        readonly examples: readonly ["Unsupported ETH ERC20 blockchain."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "ethereum.broadcast.failed";
                        readonly type: "string";
                        readonly examples: readonly ["ethereum.broadcast.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to broadcast transaction due to ${error}.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to broadcast transaction due to ${error}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "gas.price.failed";
                        readonly type: "string";
                        readonly examples: readonly ["gas.price.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to obtain current GAS price.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to obtain current GAS price."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "ethereum.transaction.body";
                        readonly type: "string";
                        readonly examples: readonly ["ethereum.transaction.body"];
                    };
                    readonly message: {
                        readonly description: "Either currency, or tokenAddress must be defined.";
                        readonly type: "string";
                        readonly examples: readonly ["Either currency, or tokenAddress must be defined."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.transaction.gas";
                        readonly type: "string";
                        readonly examples: readonly ["eth.transaction.gas"];
                    };
                    readonly message: {
                        readonly description: "Unable to calculate gas limit for transaction. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to calculate gas limit for transaction. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.transaction.hash";
                        readonly type: "string";
                        readonly examples: readonly ["eth.transaction.hash"];
                    };
                    readonly message: {
                        readonly description: "Unable to calculate transaction hash. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to calculate transaction hash. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.transaction.sign";
                        readonly type: "string";
                        readonly examples: readonly ["eth.transaction.sign"];
                    };
                    readonly message: {
                        readonly description: "Unable to sign transaction. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to sign transaction. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const LtcTransfer: {
    readonly body: {
        readonly oneOf: readonly [{
            readonly properties: {
                readonly senderAccountId: {
                    readonly description: "Sender account ID";
                    readonly maxLength: 24;
                    readonly minLength: 24;
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly address: {
                    readonly description: "Blockchain address to send assets to. For BTC, LTC, DOGE and BCH, it is possible to enter list of multiple recipient blockchain addresses as a comma separated string.";
                    readonly maxLength: 10000;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["mpTwPdF8up9kidgcAStriUPwRdnE9MRAg7"];
                };
                readonly amount: {
                    readonly description: "Amount to be withdrawn to blockchain.";
                    readonly maxLength: 38;
                    readonly type: "string";
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly examples: readonly ["0.001"];
                };
                readonly compliant: {
                    readonly description: "Compliance check, if withdrawal is not compliant, it will not be processed.";
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                };
                readonly fee: {
                    readonly description: "Fee to be submitted as a transaction fee to blockchain. If none is set, default value of 0.0005 LTC is used. Minimum fee is 0.00001 LTC.";
                    readonly type: "string";
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly examples: readonly ["0.0005"];
                };
                readonly multipleAmounts: {
                    readonly description: "For BTC, LTC, DOGE and BCH, it is possible to enter list of multiple recipient blockchain amounts. List of recipient addresses must be present in the address field and total sum of amounts must be equal to the amount field.";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                        readonly examples: readonly ["0.1"];
                    };
                };
                readonly mnemonic: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "Mnemonic seed - usually 12-24 words with access to whole wallet.\nEither mnemonic, keyPair or signature Id must be present - depends on the type of account and xpub.\nTatum KMS does not support keyPair type of off-chain transaction, only mnemonic based.\n";
                    readonly type: "string";
                    readonly examples: readonly ["urge pulp usage sister evidence arrest palm math please chief egg abuse"];
                };
                readonly xpub: {
                    readonly description: "Extended public key (xpub) of the wallet associated with the accounts. Should be present, when mnemonic is used.";
                    readonly maxLength: 150;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["xpub6EsCk1uU6cJzqvP9CdsTiJwT2rF748YkPnhv5Qo8q44DG7nn2vbyt48YRsNSUYS44jFCW9gwvD9kLQu9AuqXpTpM1c5hgg9PsuBLdeNncid"];
                };
                readonly paymentId: {
                    readonly description: "Identifier of the payment, shown for created Transaction within Tatum sender account.";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["1234"];
                };
                readonly senderNote: {
                    readonly description: "Note visible to owner of withdrawing account";
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["Sender note"];
                };
            };
            readonly required: readonly ["amount", "senderAccountId", "address", "mnemonic", "xpub"];
            readonly type: "object";
        }, {
            readonly properties: {
                readonly senderAccountId: {
                    readonly description: "Sender account ID";
                    readonly maxLength: 24;
                    readonly minLength: 24;
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly address: {
                    readonly description: "Blockchain address to send assets to. For BTC, LTC, DOGE and BCH, it is possible to enter list of multiple recipient blockchain addresses as a comma separated string.";
                    readonly maxLength: 10000;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["mpTwPdF8up9kidgcAStriUPwRdnE9MRAg7"];
                };
                readonly amount: {
                    readonly description: "Amount to be withdrawn to blockchain.";
                    readonly maxLength: 38;
                    readonly type: "string";
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly examples: readonly ["0.001"];
                };
                readonly compliant: {
                    readonly description: "Compliance check, if withdrawal is not compliant, it will not be processed.";
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                };
                readonly fee: {
                    readonly description: "Fee to be submitted as a transaction fee to blockchain. If none is set, default value of 0.0005 LTC is used. Minimum fee is 0.00001 LTC.";
                    readonly type: "string";
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly examples: readonly ["0.0005"];
                };
                readonly multipleAmounts: {
                    readonly description: "For BTC, LTC, DOGE and BCH, it is possible to enter list of multiple recipient blockchain amounts. List of recipient addresses must be present in the address field and total sum of amounts must be equal to the amount field.";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                        readonly examples: readonly ["0.1"];
                    };
                };
                readonly keyPair: {
                    readonly description: "Array of assigned blockchain addresses with their private keys.\nEither mnemonic, keyPair or signature Id must be present - depends on the type of account and xpub.\nTatum KMS does not support keyPair type of off-chain transaction, only mnemonic based.\n";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly address: {
                                readonly type: "string";
                                readonly description: "Blockchain address assigned to account withdrawal is made from.";
                                readonly maxLength: 50;
                                readonly minLength: 30;
                            };
                            readonly privateKey: {
                                readonly type: "string";
                                readonly description: "Private key of blockchain address.";
                                readonly maxLength: 52;
                                readonly minLength: 52;
                                readonly examples: readonly ["cTmS2jBWXgFaXZ2xG9jhn67TiyTshnMp3UedamzEhGm6BZV1vLgQ"];
                            };
                        };
                    };
                };
                readonly attr: {
                    readonly description: "Used to parametrize withdrawal as a change address for left coins from transaction.";
                    readonly maxLength: 256;
                    readonly minLength: 1;
                    readonly type: "string";
                };
                readonly paymentId: {
                    readonly description: "Identifier of the payment, shown for created Transaction within Tatum sender account.";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["1234"];
                };
                readonly senderNote: {
                    readonly description: "Note visible to owner of withdrawing account";
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["Sender note"];
                };
            };
            readonly required: readonly ["amount", "senderAccountId", "address", "keyPair", "attr"];
            readonly type: "object";
        }, {
            readonly properties: {
                readonly senderAccountId: {
                    readonly description: "Sender account ID";
                    readonly maxLength: 24;
                    readonly minLength: 24;
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly address: {
                    readonly description: "Blockchain address to send assets to. For BTC, LTC, DOGE and BCH, it is possible to enter list of multiple recipient blockchain addresses as a comma separated string.";
                    readonly maxLength: 10000;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["mpTwPdF8up9kidgcAStriUPwRdnE9MRAg7"];
                };
                readonly amount: {
                    readonly description: "Amount to be withdrawn to blockchain.";
                    readonly maxLength: 38;
                    readonly type: "string";
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly examples: readonly ["0.001"];
                };
                readonly compliant: {
                    readonly description: "Compliance check, if withdrawal is not compliant, it will not be processed.";
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                };
                readonly fee: {
                    readonly description: "Fee to be submitted as a transaction fee to blockchain. If none is set, default value of 0.0005 LTC is used. Minimum fee is 0.00001 LTC.";
                    readonly type: "string";
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly examples: readonly ["0.0005"];
                };
                readonly multipleAmounts: {
                    readonly description: "For BTC, LTC, DOGE and BCH, it is possible to enter list of multiple recipient blockchain amounts. List of recipient addresses must be present in the address field and total sum of amounts must be equal to the amount field.";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                        readonly examples: readonly ["0.1"];
                    };
                };
                readonly signatureId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly description: "Signature hash of the mnemonic, which will be used to sign transactions locally.\nAll signature Ids should be present, which might be used to sign transaction.\nTatum KMS does not support keyPair type of off-chain transaction, only mnemonic based.\n";
                    readonly examples: readonly ["26d3883e-4e17-48b3-a0ee-09a3e484ac83"];
                };
                readonly xpub: {
                    readonly description: "Extended public key (xpub) of the wallet associated with the accounts. Should be present, when mnemonic is used.";
                    readonly maxLength: 150;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["xpub6EsCk1uU6cJzqvP9CdsTiJwT2rF748YkPnhv5Qo8q44DG7nn2vbyt48YRsNSUYS44jFCW9gwvD9kLQu9AuqXpTpM1c5hgg9PsuBLdeNncid"];
                };
                readonly paymentId: {
                    readonly description: "Identifier of the payment, shown for created Transaction within Tatum sender account.";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["1234"];
                };
                readonly senderNote: {
                    readonly description: "Note visible to owner of withdrawing account";
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["Sender note"];
                };
            };
            readonly required: readonly ["amount", "senderAccountId", "address", "signatureId", "xpub"];
            readonly type: "object";
        }];
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly oneOf: readonly [{
                readonly type: "object";
                readonly properties: {
                    readonly id: {
                        readonly description: "ID of withdrawal. If transaction is not valid in blockchain, use this id to cancel withdrawal.";
                        readonly type: "string";
                        readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    };
                    readonly txId: {
                        readonly description: "TX hash of successful transaction.";
                        readonly type: "string";
                        readonly examples: readonly ["c83f8818db43d9ba4accfe454aa44fc33123d47a4f89d47b314d6748eb0e9bc9"];
                    };
                    readonly completed: {
                        readonly description: "If set to \"true\", the withdrawal has been completed in the virtual account; if set to \"false\", the withdrawal has not been completed and you have to <a href=\"https://apidoc.tatum.io/tag/Withdrawal#operation/completeWithdrawal\" target=\"_blank\">complete it manually</a>";
                        readonly type: "boolean";
                        readonly examples: readonly [true];
                    };
                };
                readonly required: readonly ["txId", "id", "completed"];
            }, {
                readonly type: "object";
                readonly properties: {
                    readonly signatureId: {
                        readonly description: "ID of prepared payment template to sign. This is should be stored on a client side to retrieve ID of the blockchain transaction, when signing application signs the transaction and broadcasts it to the blockchain.";
                        readonly format: "uuid";
                        readonly type: "string";
                        readonly examples: readonly ["1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6"];
                    };
                };
                readonly required: readonly ["id", "signatureId"];
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "transaction.invalid.body";
                        readonly type: "string";
                        readonly examples: readonly ["transaction.invalid.body"];
                    };
                    readonly message: {
                        readonly description: "Either UTXO, or addresses must be present.";
                        readonly type: "string";
                        readonly examples: readonly ["Either UTXO, or addresses must be present."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.missing";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.missing"];
                    };
                    readonly message: {
                        readonly description: "No such withdrawal.";
                        readonly type: "string";
                        readonly examples: readonly ["No such withdrawal."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "rate.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["rate.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such currency rate.";
                        readonly type: "string";
                        readonly examples: readonly ["No such currency rate."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "vc.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["vc.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such virtual currency.";
                        readonly type: "string";
                        readonly examples: readonly ["No such virtual currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.failed.transaction.failed";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.failed.transaction.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to store withdrawal, it is impossible to create transaction.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to store withdrawal, it is impossible to create transaction."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "blockchain.error.code";
                        readonly type: "string";
                        readonly examples: readonly ["blockchain.error.code"];
                    };
                    readonly message: {
                        readonly description: "${error.message} Code: ${error.code}";
                        readonly type: "string";
                        readonly examples: readonly ["${error.message} Code: ${error.code}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "tx.hash.index.spent";
                        readonly type: "string";
                        readonly examples: readonly ["tx.hash.index.spent"];
                    };
                    readonly message: {
                        readonly description: "No such UTXO for transaction and index.";
                        readonly type: "string";
                        readonly examples: readonly ["No such UTXO for transaction and index."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "blockchain.broadcast.error";
                        readonly type: "string";
                        readonly examples: readonly ["blockchain.broadcast.error"];
                    };
                    readonly message: {
                        readonly description: "Unable to broadcast transaction, wrong input data.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to broadcast transaction, wrong input data."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "transaction.preparation.failed";
                        readonly type: "string";
                        readonly examples: readonly ["transaction.preparation.failed"];
                    };
                    readonly message: {
                        readonly description: "Impossible to prepare transaction. Either mnemonic or keyPair and attr must be present.";
                        readonly type: "string";
                        readonly examples: readonly ["Impossible to prepare transaction. Either mnemonic or keyPair and attr must be present."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.account.virtual";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.account.virtual"];
                    };
                    readonly message: {
                        readonly description: "Sender account cannot be virtual.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender account cannot be virtual."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "offchain.not.supported";
                        readonly type: "string";
                        readonly examples: readonly ["offchain.not.supported"];
                    };
                    readonly message: {
                        readonly description: "Offchain not supported for account with ${account.currency} currency.";
                        readonly type: "string";
                        readonly examples: readonly ["Offchain not supported for account with ${account.currency} currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "amount.format";
                        readonly type: "string";
                        readonly examples: readonly ["amount.format"];
                    };
                    readonly message: {
                        readonly description: "Amount has incorrect format.";
                        readonly type: "string";
                        readonly examples: readonly ["Amount has incorrect format."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "fee.format";
                        readonly type: "string";
                        readonly examples: readonly ["fee.format"];
                    };
                    readonly message: {
                        readonly description: "Fee has incorrect format.";
                        readonly type: "string";
                        readonly examples: readonly ["Fee has incorrect format."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "transaction.preparation.failed.utxo";
                        readonly type: "string";
                        readonly examples: readonly ["transaction.preparation.failed.utxo"];
                    };
                    readonly message: {
                        readonly description: "Impossible to find last UTXO.";
                        readonly type: "string";
                        readonly examples: readonly ["Impossible to find last UTXO."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "transaction.failed";
                        readonly type: "string";
                        readonly examples: readonly ["transaction.failed"];
                    };
                    readonly message: {
                        readonly description: "No spendable inputs.";
                        readonly type: "string";
                        readonly examples: readonly ["No spendable inputs."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "key.generation.failed.wrong.mnemonic";
                        readonly type: "string";
                        readonly examples: readonly ["key.generation.failed.wrong.mnemonic"];
                    };
                    readonly message: {
                        readonly description: "Unable to generate address, wrong mnemonic and index.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to generate address, wrong mnemonic and index."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.not.cancelled.transaction.failed";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.not.cancelled.transaction.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to broadcast transaction, and impossible to cancel withdrawal. ID is attached, \"${withdrawalId}\", cancel it manually.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to broadcast transaction, and impossible to cancel withdrawal. ID is attached, \"${withdrawalId}\", cancel it manually."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.prepare.failed";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.prepare.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to prepare transaction, withdrawal cancelled.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to prepare transaction, withdrawal cancelled."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.not.exists"];
                    };
                    readonly message: {
                        readonly description: "Unable to find sender account ${transaction.senderAccountId}.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find sender account ${transaction.senderAccountId}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.customer.disabled";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.customer.disabled"];
                    };
                    readonly message: {
                        readonly description: "Sender accounts customer ${senderAccount.customerId} is disabled, unable to perform payment.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender accounts customer ${senderAccount.customerId} is disabled, unable to perform payment."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "balance.insufficient";
                        readonly type: "string";
                        readonly examples: readonly ["balance.insufficient"];
                    };
                    readonly message: {
                        readonly description: "Insufficient balance for account ${transaction.senderAccountId} and payment amount ${transaction.amount}. Sender balance is ${senderAccount.balance.availableBalance as string}, amount is ${amount}";
                        readonly type: "string";
                        readonly examples: readonly ["Insufficient balance for account ${transaction.senderAccountId} and payment amount ${transaction.amount}. Sender balance is ${senderAccount.balance.availableBalance as string}, amount is ${amount}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "amount.btc";
                        readonly type: "string";
                        readonly examples: readonly ["amount.btc"];
                    };
                    readonly message: {
                        readonly description: "BTC|LTC|BCH|DOGE payment amount must be at least 0.00000001, not ${transaction.amount}.";
                        readonly type: "string";
                        readonly examples: readonly ["BTC|LTC|BCH|DOGE payment amount must be at least 0.00000001, not ${transaction.amount}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "amount.eth";
                        readonly type: "string";
                        readonly examples: readonly ["amount.eth"];
                    };
                    readonly message: {
                        readonly description: "ETH payment amount must be at least 0.000000000001, not ${transaction.amount}.";
                        readonly type: "string";
                        readonly examples: readonly ["ETH payment amount must be at least 0.000000000001, not ${transaction.amount}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.frozen";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.frozen"];
                    };
                    readonly message: {
                        readonly description: "Sender account ${transaction.senderAccountId} is frozen, unable to perform payment.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender account ${transaction.senderAccountId} is frozen, unable to perform payment."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.pending";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.pending"];
                    };
                    readonly message: {
                        readonly description: "Unable to prepare withdrawal, last withdrawal with id ${id} is not yet processed by blockchain.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to prepare withdrawal, last withdrawal with id ${id} is not yet processed by blockchain."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const MintCurrency: {
    readonly body: {
        readonly properties: {
            readonly accountId: {
                readonly description: "Ledger account with currency of the virtual currency, on which the operation will be performed.";
                readonly maxLength: 24;
                readonly minLength: 24;
                readonly type: "string";
                readonly examples: readonly ["5e68c66581f2ee32bc354087"];
            };
            readonly amount: {
                readonly description: "Amount of virtual currency to operate within this operation.";
                readonly maxLength: 38;
                readonly type: "string";
                readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                readonly examples: readonly ["1.5"];
            };
            readonly paymentId: {
                readonly description: "Identifier of the payment, shown for created Transaction within Tatum sender account.";
                readonly maxLength: 100;
                readonly minLength: 1;
                readonly type: "string";
                readonly examples: readonly ["My Payment"];
            };
            readonly reference: {
                readonly description: "Reference of the payment.";
                readonly maxLength: 100;
                readonly minLength: 1;
                readonly type: "string";
                readonly examples: readonly ["akjsndakjsdn-asd-kjasnd-asdkn-asdjnasjkdn"];
            };
            readonly transactionCode: {
                readonly description: "For bookkeeping to distinct transaction purpose.";
                readonly maxLength: 100;
                readonly minLength: 1;
                readonly type: "string";
                readonly examples: readonly ["1_01_EXTERNAL_CODE"];
            };
            readonly recipientNote: {
                readonly description: "Note visible to both, sender and recipient. Available for both Mint and Revoke operations";
                readonly maxLength: 500;
                readonly minLength: 1;
                readonly type: "string";
                readonly examples: readonly ["Private note"];
            };
            readonly counterAccount: {
                readonly description: "External account identifier. By default, there is no counterAccount present in the transaction.";
                readonly maxLength: 24;
                readonly minLength: 24;
                readonly type: "string";
                readonly examples: readonly ["5e6645712b55823de7ea82f1"];
            };
            readonly senderNote: {
                readonly description: "Note visible to sender. Available in Revoke operation.";
                readonly maxLength: 500;
                readonly minLength: 1;
                readonly type: "string";
                readonly examples: readonly ["Sender note"];
            };
        };
        readonly required: readonly ["accountId", "amount"];
        readonly type: "object";
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly properties: {
                readonly reference: {
                    readonly description: "The internal reference to the transaction (a unique identifier of the transaction within the virtual account); if the transaction fails, use this reference to search through the logs";
                    readonly type: "string";
                    readonly examples: readonly ["0c64cc04-5412-4e57-a51c-ee5727939bcb"];
                };
            };
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "virtual.account.notValid";
                        readonly type: "string";
                        readonly examples: readonly ["virtual.account.notValid"];
                    };
                    readonly message: {
                        readonly description: "Unable to perform operation on virtual currency, account does not exists.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to perform operation on virtual currency, account does not exists."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "virtual.tx.failed";
                        readonly type: "string";
                        readonly examples: readonly ["virtual.tx.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to perform operation on virtual currency, impossible to store transaction.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to perform operation on virtual currency, impossible to store transaction."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "vc.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["vc.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such virtual currency.";
                        readonly type: "string";
                        readonly examples: readonly ["No such virtual currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "rate.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["rate.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such currency rate.";
                        readonly type: "string";
                        readonly examples: readonly ["No such currency rate."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["account.not.exists"];
                    };
                    readonly message: {
                        readonly description: "No such account.";
                        readonly type: "string";
                        readonly examples: readonly ["No such account."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const OneDeployHrm20: {
    readonly body: {
        readonly oneOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly symbol: {
                    readonly description: "The name of the token; used as an identifier within the Tatum platform and as a currency symbol on the blockchain";
                    readonly maxLength: 30;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                };
                readonly supply: {
                    readonly description: "The supply of the token";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["10000000"];
                };
                readonly description: {
                    readonly description: "The description of the token; used as a description within the Tatum platform and as a currency name on the blockchain";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["My Public Token"];
                };
                readonly address: {
                    readonly description: "The blockchain address to be assigned to the virtual account as a deposit address";
                    readonly maxLength: 42;
                    readonly minLength: 42;
                    readonly type: "string";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly mnemonic: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "The mnemonic to generate the private key for the blockchain address from which the fee for deploying the smart contract will be deducted; is used together with the derivation index of this address";
                    readonly type: "string";
                    readonly examples: readonly ["urge pulp usage sister evidence arrest palm math please chief egg abuse"];
                };
                readonly index: {
                    readonly description: "The derivation index of the blockchain address from which the fee for deploying the smart contract will be deducted; is used together with the mnemonic to generate the private key for this address";
                    readonly type: "integer";
                    readonly maximum: 2147483647;
                    readonly examples: readonly [0];
                };
                readonly basePair: {
                    readonly description: "The base pair for the virtual currency that represents the token; used to calculate the value of a transaction";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["EUR"];
                };
                readonly baseRate: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly minimum: 0;
                    readonly description: "The exchange rate for the base pair; one unit of the created virtual currency equals 1 unit of <code>basePair</code>*<code>baseRate</code>";
                    readonly examples: readonly [1];
                };
                readonly nonce: {
                    readonly type: "number";
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                    readonly minimum: 0;
                };
                readonly customer: {
                    readonly properties: {
                        readonly externalId: {
                            readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123654"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                            readonly default: "EUR";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly customerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                        readonly providerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                    };
                    readonly required: readonly ["externalId"];
                    readonly type: "object";
                    readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                };
            };
            readonly required: readonly ["description", "supply", "symbol", "basePair", "address", "mnemonic", "index"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly symbol: {
                    readonly description: "The name of the token; used as an identifier within the Tatum platform and as a currency symbol on the blockchain";
                    readonly maxLength: 30;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                };
                readonly supply: {
                    readonly description: "The supply of the token";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["10000000"];
                };
                readonly description: {
                    readonly description: "The description of the token; used as a description within the Tatum platform and as a currency name on the blockchain";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["My Public Token"];
                };
                readonly xpub: {
                    readonly description: "The extended public key from which a deposit address for the virtual account will be generated";
                    readonly maxLength: 150;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["xpub6EsCk1uU6cJzqvP9CdsTiJwT2rF748YkPnhv5Qo8q44DG7nn2vbyt48YRsNSUYS44jFCW9gwvD9kLQu9AuqXpTpM1c5hgg9PsuBLdeNncid"];
                };
                readonly derivationIndex: {
                    readonly description: "The derivation index to use together with the extended public key to generate the deposit address";
                    readonly format: "int32";
                    readonly type: "integer";
                    readonly maximum: 2147483647;
                    readonly examples: readonly [0];
                    readonly minimum: -2147483648;
                };
                readonly mnemonic: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "The mnemonic to generate the private key for the blockchain address from which the fee for deploying the smart contract will be deducted; is used together with the derivation index of this address";
                    readonly type: "string";
                    readonly examples: readonly ["urge pulp usage sister evidence arrest palm math please chief egg abuse"];
                };
                readonly index: {
                    readonly description: "The derivation index of the blockchain address from which the fee for deploying the smart contract will be deducted; is used together with the mnemonic to generate the private key for this address";
                    readonly type: "integer";
                    readonly maximum: 2147483647;
                    readonly examples: readonly [0];
                };
                readonly basePair: {
                    readonly description: "The base pair for the virtual currency that represents the token; used to calculate the value of a transaction";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["EUR"];
                };
                readonly baseRate: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly minimum: 0;
                    readonly description: "The exchange rate for the base pair; one unit of the created virtual currency equals 1 unit of <code>basePair</code>*<code>baseRate</code>";
                    readonly examples: readonly [1];
                };
                readonly nonce: {
                    readonly type: "number";
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                    readonly minimum: 0;
                };
                readonly customer: {
                    readonly properties: {
                        readonly externalId: {
                            readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123654"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                            readonly default: "EUR";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly customerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                        readonly providerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                    };
                    readonly required: readonly ["externalId"];
                    readonly type: "object";
                    readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                };
            };
            readonly required: readonly ["description", "supply", "symbol", "basePair", "xpub", "derivationIndex", "mnemonic", "index"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly symbol: {
                    readonly description: "The name of the token; used as an identifier within the Tatum platform and as a currency symbol on the blockchain";
                    readonly maxLength: 30;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                };
                readonly supply: {
                    readonly description: "The supply of the token";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["10000000"];
                };
                readonly description: {
                    readonly description: "The description of the token; used as a description within the Tatum platform and as a currency name on the blockchain";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["My Public Token"];
                };
                readonly address: {
                    readonly description: "The blockchain address to be assigned to the virtual account as a deposit address";
                    readonly maxLength: 42;
                    readonly minLength: 42;
                    readonly type: "string";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly privateKey: {
                    readonly description: "The private key of the blockchain address from which the fee for deploying the smart contract will be deducted";
                    readonly type: "string";
                    readonly maxLength: 66;
                    readonly minLength: 66;
                    readonly examples: readonly ["0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2"];
                };
                readonly basePair: {
                    readonly description: "The base pair for the virtual currency that represents the token; used to calculate the value of a transaction";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["EUR"];
                };
                readonly baseRate: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly minimum: 0;
                    readonly description: "The exchange rate for the base pair; one unit of the created virtual currency equals 1 unit of <code>basePair</code>*<code>baseRate</code>";
                    readonly examples: readonly [1];
                };
                readonly nonce: {
                    readonly type: "number";
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                    readonly minimum: 0;
                };
                readonly customer: {
                    readonly properties: {
                        readonly externalId: {
                            readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123654"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                            readonly default: "EUR";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly customerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                        readonly providerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                    };
                    readonly required: readonly ["externalId"];
                    readonly type: "object";
                    readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                };
            };
            readonly required: readonly ["description", "supply", "symbol", "basePair", "privateKey", "address"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly symbol: {
                    readonly description: "The name of the token; used as an identifier within the Tatum platform and as a currency symbol on the blockchain";
                    readonly maxLength: 30;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                };
                readonly supply: {
                    readonly description: "The supply of the token";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["10000000"];
                };
                readonly description: {
                    readonly description: "The description of the token; used as a description within the Tatum platform and as a currency name on the blockchain";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["My Public Token"];
                };
                readonly xpub: {
                    readonly description: "The extended public key from which a deposit address for the virtual account will be generated";
                    readonly maxLength: 150;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["xpub6EsCk1uU6cJzqvP9CdsTiJwT2rF748YkPnhv5Qo8q44DG7nn2vbyt48YRsNSUYS44jFCW9gwvD9kLQu9AuqXpTpM1c5hgg9PsuBLdeNncid"];
                };
                readonly derivationIndex: {
                    readonly description: "The derivation index to use together with the extended public key to generate the deposit address";
                    readonly format: "int32";
                    readonly type: "integer";
                    readonly maximum: 2147483647;
                    readonly examples: readonly [0];
                    readonly minimum: -2147483648;
                };
                readonly privateKey: {
                    readonly description: "The private key of the blockchain address from which the fee for deploying the smart contract will be deducted";
                    readonly type: "string";
                    readonly maxLength: 66;
                    readonly minLength: 66;
                    readonly examples: readonly ["0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2"];
                };
                readonly basePair: {
                    readonly description: "The base pair for the virtual currency that represents the token; used to calculate the value of a transaction";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["EUR"];
                };
                readonly baseRate: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly minimum: 0;
                    readonly description: "The exchange rate for the base pair; one unit of the created virtual currency equals 1 unit of <code>basePair</code>*<code>baseRate</code>";
                    readonly examples: readonly [1];
                };
                readonly nonce: {
                    readonly type: "number";
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                    readonly minimum: 0;
                };
                readonly customer: {
                    readonly properties: {
                        readonly externalId: {
                            readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123654"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                            readonly default: "EUR";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly customerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                        readonly providerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                    };
                    readonly required: readonly ["externalId"];
                    readonly type: "object";
                    readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                };
            };
            readonly required: readonly ["description", "supply", "symbol", "basePair", "xpub", "derivationIndex", "privateKey"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly symbol: {
                    readonly description: "The name of the token; used as an identifier within the Tatum platform and as a currency symbol on the blockchain";
                    readonly maxLength: 30;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                };
                readonly supply: {
                    readonly description: "The supply of the token";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["10000000"];
                };
                readonly description: {
                    readonly description: "The description of the token; used as a description within the Tatum platform and as a currency name on the blockchain";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["My Public Token"];
                };
                readonly address: {
                    readonly description: "The blockchain address to be assigned to the virtual account as a deposit address";
                    readonly maxLength: 42;
                    readonly minLength: 42;
                    readonly type: "string";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly signatureId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly description: "The KMS identifier of either the <b>private key</b> of the blockchain address from which the fee for deploying the smart contract will be deducted, or the <b>mnemonic</b> to generate the private key for the blockchain address from which the fee will be deducted";
                    readonly examples: readonly ["26d3883e-4e17-48b3-a0ee-09a3e484ac83"];
                };
                readonly index: {
                    readonly type: "number";
                    readonly minimum: 0;
                    readonly description: "(Only if the signature ID is mnemonic-based) The index of the address from which the fee will be deducted that was generated from the mnemonic";
                };
                readonly basePair: {
                    readonly description: "The base pair for the virtual currency that represents the token; used to calculate the value of a transaction";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["EUR"];
                };
                readonly baseRate: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly minimum: 0;
                    readonly description: "The exchange rate for the base pair; one unit of the created virtual currency equals 1 unit of <code>basePair</code>*<code>baseRate</code>";
                    readonly examples: readonly [1];
                };
                readonly nonce: {
                    readonly type: "number";
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                    readonly minimum: 0;
                };
                readonly customer: {
                    readonly properties: {
                        readonly externalId: {
                            readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123654"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                            readonly default: "EUR";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly customerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                        readonly providerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                    };
                    readonly required: readonly ["externalId"];
                    readonly type: "object";
                    readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                };
            };
            readonly required: readonly ["description", "supply", "symbol", "basePair", "address", "signatureId"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly symbol: {
                    readonly description: "The name of the token; used as an identifier within the Tatum platform and as a currency symbol on the blockchain";
                    readonly maxLength: 30;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                };
                readonly supply: {
                    readonly description: "The supply of the token";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["10000000"];
                };
                readonly description: {
                    readonly description: "The description of the token; used as a description within the Tatum platform and as a currency name on the blockchain";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["My Public Token"];
                };
                readonly xpub: {
                    readonly description: "The extended public key from which a deposit address for the virtual account will be generated";
                    readonly maxLength: 150;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["xpub6EsCk1uU6cJzqvP9CdsTiJwT2rF748YkPnhv5Qo8q44DG7nn2vbyt48YRsNSUYS44jFCW9gwvD9kLQu9AuqXpTpM1c5hgg9PsuBLdeNncid"];
                };
                readonly derivationIndex: {
                    readonly description: "The derivation index to use together with the extended public key to generate the deposit address";
                    readonly format: "int32";
                    readonly type: "integer";
                    readonly maximum: 2147483647;
                    readonly examples: readonly [0];
                    readonly minimum: -2147483648;
                };
                readonly signatureId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly description: "The KMS identifier of either the <b>private key</b> of the blockchain address from which the fee for deploying the smart contract will be deducted, or the <b>mnemonic</b> to generate the private key for the blockchain address from which the fee will be deducted";
                    readonly examples: readonly ["26d3883e-4e17-48b3-a0ee-09a3e484ac83"];
                };
                readonly index: {
                    readonly type: "number";
                    readonly minimum: 0;
                    readonly description: "(Only if the signature ID is mnemonic-based) The index of the address from which the fee will be deducted that was generated from the mnemonic";
                };
                readonly basePair: {
                    readonly description: "The base pair for the virtual currency that represents the token; used to calculate the value of a transaction";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["EUR"];
                };
                readonly baseRate: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly minimum: 0;
                    readonly description: "The exchange rate for the base pair; one unit of the created virtual currency equals 1 unit of <code>basePair</code>*<code>baseRate</code>";
                    readonly examples: readonly [1];
                };
                readonly nonce: {
                    readonly type: "number";
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                    readonly minimum: 0;
                };
                readonly customer: {
                    readonly properties: {
                        readonly externalId: {
                            readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123654"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                            readonly default: "EUR";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly customerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                        readonly providerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                    };
                    readonly required: readonly ["externalId"];
                    readonly type: "object";
                    readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                };
            };
            readonly required: readonly ["description", "supply", "symbol", "basePair", "xpub", "derivationIndex", "signatureId"];
        }];
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly shardID: {
                    readonly default: 0;
                    readonly type: "number";
                    readonly examples: readonly [0];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "The ID of the shard to operate";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly accountId: {
                        readonly description: "Account ID with the type of currency as created ERC20/BEP20 token symbol. Account will be unfrozen when ERC20/BEP20 contract address will be set.";
                        readonly type: "string";
                        readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    };
                    readonly txId: {
                        readonly description: "TX hash of successful transaction. From this transaction receipt contract address can be obtained.";
                        readonly type: "string";
                        readonly examples: readonly ["c83f8818db43d9ba4accfe454aa44fc33123d47a4f89d47b314d6748eb0e9bc9"];
                    };
                };
                readonly type: "object";
                readonly required: readonly ["accountId", "txId"];
            }, {
                readonly properties: {
                    readonly accountId: {
                        readonly description: "Account ID with the type of currency as created ERC20/BEP20 token symbol. Account will be unfrozen when ERC20/BEP20 contract address will be set.";
                        readonly type: "string";
                        readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    };
                    readonly signatureId: {
                        readonly description: "ID of prepared payment template to sign. This is should be stored on a client side to retrieve ID of the blockchain transaction, when signing application signs the transaction and broadcasts it to the blockchain.";
                        readonly format: "uuid";
                        readonly type: "string";
                        readonly examples: readonly ["1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6"];
                    };
                };
                readonly type: "object";
                readonly required: readonly ["accountId", "signatureId"];
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.symbol.prefix";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.symbol.prefix"];
                    };
                    readonly message: {
                        readonly description: "ERC20 token cannot start with VC_.";
                        readonly type: "string";
                        readonly examples: readonly ["ERC20 token cannot start with VC_."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.address.xpub.both";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.address.xpub.both"];
                    };
                    readonly message: {
                        readonly description: "Either xpub or address must be present, not both.";
                        readonly type: "string";
                        readonly examples: readonly ["Either xpub or address must be present, not both."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.address.xpub.missing";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.address.xpub.missing"];
                    };
                    readonly message: {
                        readonly description: "Either xpub or address must be present.";
                        readonly type: "string";
                        readonly examples: readonly ["Either xpub or address must be present."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.duplicate.name";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.duplicate.name"];
                    };
                    readonly message: {
                        readonly description: "ERC20 token with given name already exists.";
                        readonly type: "string";
                        readonly examples: readonly ["ERC20 token with given name already exists."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "customer.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["customer.not.active"];
                    };
                    readonly message: {
                        readonly description: "Customer not active.";
                        readonly type: "string";
                        readonly examples: readonly ["Customer not active."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "virtual.creation.error";
                        readonly type: "string";
                        readonly examples: readonly ["virtual.creation.error"];
                    };
                    readonly message: {
                        readonly description: "It is not possible to create virtual currency.";
                        readonly type: "string";
                        readonly examples: readonly ["It is not possible to create virtual currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["account.not.exists"];
                    };
                    readonly message: {
                        readonly description: "No such account.";
                        readonly type: "string";
                        readonly examples: readonly ["No such account."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.missing";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.missing"];
                    };
                    readonly message: {
                        readonly description: "No xpub assigned to account, it is not possible to generate address. Use assignAddress method instead.";
                        readonly type: "string";
                        readonly examples: readonly ["No xpub assigned to account, it is not possible to generate address. Use assignAddress method instead."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "xpub.used";
                        readonly type: "string";
                        readonly examples: readonly ["xpub.used"];
                    };
                    readonly message: {
                        readonly description: "XPub already used registered within Tatum";
                        readonly type: "string";
                        readonly examples: readonly ["XPub already used registered within Tatum"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "Address.index.used";
                        readonly type: "string";
                        readonly examples: readonly ["address.index.used"];
                    };
                    readonly message: {
                        readonly description: "Unable to create address, derivation index is already used.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to create address, derivation index is already used."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "offchain.not.supported";
                        readonly type: "string";
                        readonly examples: readonly ["offchain.not.supported"];
                    };
                    readonly message: {
                        readonly description: "Offchain not supported for account with ${account.currency} currency.";
                        readonly type: "string";
                        readonly examples: readonly ["Offchain not supported for account with ${account.currency} currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.incompatible";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.incompatible"];
                    };
                    readonly message: {
                        readonly description: "Xpub not compatible with account currency.";
                        readonly type: "string";
                        readonly examples: readonly ["Xpub not compatible with account currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.present";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.present"];
                    };
                    readonly message: {
                        readonly description: "Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead.";
                        readonly type: "string";
                        readonly examples: readonly ["Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                    readonly required: {
                        readonly "0": "errorCode";
                        readonly "1": "message";
                        readonly "2": "statusCode";
                    };
                    readonly type: "object";
                };
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "vc.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["vc.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such virtual currency.";
                        readonly type: "string";
                        readonly examples: readonly ["No such virtual currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "Address.used";
                        readonly type: "string";
                        readonly examples: readonly ["address.used"];
                    };
                    readonly message: {
                        readonly description: "Address and currency already in use.";
                        readonly type: "string";
                        readonly examples: readonly ["Address and currency already in use."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.present";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.present"];
                    };
                    readonly message: {
                        readonly description: "Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead.";
                        readonly type: "string";
                        readonly examples: readonly ["Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                    readonly required: {
                        readonly "0": "errorCode";
                        readonly "1": "message";
                        readonly "2": "statusCode";
                    };
                    readonly type: "object";
                };
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.erc20.unsupported";
                        readonly type: "string";
                        readonly examples: readonly ["eth.erc20.unsupported"];
                    };
                    readonly message: {
                        readonly description: "Unsupported ETH ERC20 blockchain.";
                        readonly type: "string";
                        readonly examples: readonly ["Unsupported ETH ERC20 blockchain."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "ethereum.broadcast.failed";
                        readonly type: "string";
                        readonly examples: readonly ["ethereum.broadcast.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to broadcast transaction due to ${error}.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to broadcast transaction due to ${error}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "gas.price.failed";
                        readonly type: "string";
                        readonly examples: readonly ["gas.price.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to obtain current GAS price.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to obtain current GAS price."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "ethereum.transaction.body";
                        readonly type: "string";
                        readonly examples: readonly ["ethereum.transaction.body"];
                    };
                    readonly message: {
                        readonly description: "Either currency, or tokenAddress must be defined.";
                        readonly type: "string";
                        readonly examples: readonly ["Either currency, or tokenAddress must be defined."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.transaction.gas";
                        readonly type: "string";
                        readonly examples: readonly ["eth.transaction.gas"];
                    };
                    readonly message: {
                        readonly description: "Unable to calculate gas limit for transaction. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to calculate gas limit for transaction. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.transaction.hash";
                        readonly type: "string";
                        readonly examples: readonly ["eth.transaction.hash"];
                    };
                    readonly message: {
                        readonly description: "Unable to calculate transaction hash. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to calculate transaction hash. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.transaction.sign";
                        readonly type: "string";
                        readonly examples: readonly ["eth.transaction.sign"];
                    };
                    readonly message: {
                        readonly description: "Unable to sign transaction. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to sign transaction. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const OneTransfer: {
    readonly body: {
        readonly oneOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly nonce: {
                    readonly type: "number";
                    readonly minimum: 0;
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                };
                readonly address: {
                    readonly description: "Blockchain address to send assets";
                    readonly maxLength: 42;
                    readonly minLength: 42;
                    readonly type: "string";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly amount: {
                    readonly description: "Amount to be sent in Ether | MATIC | XDC | KCS.";
                    readonly maxLength: 38;
                    readonly type: "string";
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly examples: readonly ["100000"];
                };
                readonly compliant: {
                    readonly description: "Compliance check, if withdrawal is not compliant, it will not be processed.";
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                };
                readonly privateKey: {
                    readonly type: "string";
                    readonly maxLength: 66;
                    readonly minLength: 66;
                    readonly description: "Private key of sender address. Either mnemonic and index, privateKey or signature Id must be present - depends on the type of account and xpub.";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly paymentId: {
                    readonly description: "Identifier of the payment, shown for created Transaction within Tatum sender account.";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["1234"];
                };
                readonly senderAccountId: {
                    readonly maxLength: 24;
                    readonly minLength: 24;
                    readonly description: "Sender account ID";
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly senderNote: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "Note visible to owner of withdrawing account";
                    readonly type: "string";
                    readonly examples: readonly ["Sender note"];
                };
                readonly gasLimit: {
                    readonly type: "string";
                    readonly description: "Gas limit for transaction in gas price. If not set, automatic calculation will be used.";
                    readonly pattern: "^[+]?\\d+$";
                    readonly examples: readonly ["40000"];
                };
                readonly gasPrice: {
                    readonly type: "string";
                    readonly description: "Gas price in Gwei. If not set, automatic calculation will be used.";
                    readonly pattern: "^[+]?\\d+$";
                    readonly examples: readonly ["20"];
                };
            };
            readonly required: readonly ["senderAccountId", "address", "amount", "privateKey"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly nonce: {
                    readonly type: "number";
                    readonly minimum: 0;
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                };
                readonly address: {
                    readonly description: "Blockchain address to send assets";
                    readonly maxLength: 42;
                    readonly minLength: 42;
                    readonly type: "string";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly amount: {
                    readonly description: "Amount to be sent in Ether | MATIC | XDC | KCS.";
                    readonly maxLength: 38;
                    readonly type: "string";
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly examples: readonly ["100000"];
                };
                readonly compliant: {
                    readonly description: "Compliance check, if withdrawal is not compliant, it will not be processed.";
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                };
                readonly index: {
                    readonly description: "Derivation index of sender address.";
                    readonly maximum: 2147483647;
                    readonly type: "integer";
                    readonly examples: readonly [0];
                };
                readonly gasLimit: {
                    readonly type: "string";
                    readonly description: "Gas limit for transaction in gas price. If not set, automatic calculation will be used.";
                    readonly pattern: "^[+]?\\d+$";
                    readonly examples: readonly ["40000"];
                };
                readonly gasPrice: {
                    readonly type: "string";
                    readonly description: "Gas price in Gwei. If not set, automatic calculation will be used.";
                    readonly pattern: "^[+]?\\d+$";
                    readonly examples: readonly ["20"];
                };
                readonly mnemonic: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "Mnemonic to generate private key for sender address. Either mnemonic and index, privateKey or signature Id must be present - depends on the type of account and xpub.";
                    readonly type: "string";
                    readonly examples: readonly ["urge pulp usage sister evidence arrest palm math please chief egg abuse"];
                };
                readonly paymentId: {
                    readonly description: "Identifier of the payment, shown for created Transaction within Tatum sender account.";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["1234"];
                };
                readonly senderAccountId: {
                    readonly maxLength: 24;
                    readonly minLength: 24;
                    readonly description: "Sender account ID";
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly senderNote: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "Note visible to owner of withdrawing account";
                    readonly type: "string";
                    readonly examples: readonly ["Sender note"];
                };
            };
            readonly required: readonly ["senderAccountId", "address", "amount", "mnemonic", "index"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly nonce: {
                    readonly type: "number";
                    readonly minimum: 0;
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                };
                readonly address: {
                    readonly description: "Blockchain address to send assets";
                    readonly maxLength: 42;
                    readonly minLength: 42;
                    readonly type: "string";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly amount: {
                    readonly description: "Amount to be sent in Ether | MATIC | XDC | KCS.";
                    readonly maxLength: 38;
                    readonly type: "string";
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly examples: readonly ["100000"];
                };
                readonly compliant: {
                    readonly description: "Compliance check, if withdrawal is not compliant, it will not be processed.";
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                };
                readonly signatureId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly description: "Identifier of the mnemonic / private key associated in signing application.\nWhen hash identifies mnemonic, index must be present to represent specific account to pay from.\nPrivate key, mnemonic or signature Id must be present.\n";
                    readonly examples: readonly ["26d3883e-4e17-48b3-a0ee-09a3e484ac83"];
                };
                readonly index: {
                    readonly description: "Derivation index of sender address.";
                    readonly maximum: 2147483647;
                    readonly type: "integer";
                    readonly examples: readonly [0];
                };
                readonly paymentId: {
                    readonly description: "Identifier of the payment, shown for created Transaction within Tatum sender account.";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["1234"];
                };
                readonly senderAccountId: {
                    readonly maxLength: 24;
                    readonly minLength: 24;
                    readonly description: "Sender account ID";
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly senderNote: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "Note visible to owner of withdrawing account";
                    readonly type: "string";
                    readonly examples: readonly ["Sender note"];
                };
                readonly gasLimit: {
                    readonly type: "string";
                    readonly description: "Gas limit for transaction in gas price. If not set, automatic calculation will be used.";
                    readonly pattern: "^[+]?\\d+$";
                    readonly examples: readonly ["40000"];
                };
                readonly gasPrice: {
                    readonly type: "string";
                    readonly description: "Gas price in Gwei. If not set, automatic calculation will be used.";
                    readonly pattern: "^[+]?\\d+$";
                    readonly examples: readonly ["20"];
                };
            };
            readonly required: readonly ["senderAccountId", "address", "signatureId", "amount"];
        }];
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly shardID: {
                    readonly default: 0;
                    readonly type: "number";
                    readonly examples: readonly [0];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Shard to operate on";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly oneOf: readonly [{
                readonly type: "object";
                readonly properties: {
                    readonly id: {
                        readonly description: "ID of withdrawal. If transaction is not valid in blockchain, use this id to cancel withdrawal.";
                        readonly type: "string";
                        readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    };
                    readonly txId: {
                        readonly description: "TX hash of successful transaction.";
                        readonly type: "string";
                        readonly examples: readonly ["c83f8818db43d9ba4accfe454aa44fc33123d47a4f89d47b314d6748eb0e9bc9"];
                    };
                    readonly completed: {
                        readonly description: "If set to \"true\", the withdrawal has been completed in the virtual account; if set to \"false\", the withdrawal has not been completed and you have to <a href=\"https://apidoc.tatum.io/tag/Withdrawal#operation/completeWithdrawal\" target=\"_blank\">complete it manually</a>";
                        readonly type: "boolean";
                        readonly examples: readonly [true];
                    };
                };
                readonly required: readonly ["txId", "id", "completed"];
            }, {
                readonly type: "object";
                readonly properties: {
                    readonly signatureId: {
                        readonly description: "ID of prepared payment template to sign. This is should be stored on a client side to retrieve ID of the blockchain transaction, when signing application signs the transaction and broadcasts it to the blockchain.";
                        readonly format: "uuid";
                        readonly type: "string";
                        readonly examples: readonly ["1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6"];
                    };
                };
                readonly required: readonly ["id", "signatureId"];
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.missing";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.missing"];
                    };
                    readonly message: {
                        readonly description: "No such withdrawal.";
                        readonly type: "string";
                        readonly examples: readonly ["No such withdrawal."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "rate.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["rate.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such currency rate.";
                        readonly type: "string";
                        readonly examples: readonly ["No such currency rate."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "vc.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["vc.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such virtual currency.";
                        readonly type: "string";
                        readonly examples: readonly ["No such virtual currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.recipient.format";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.recipient.format"];
                    };
                    readonly message: {
                        readonly description: "Recipient blockchain address has incorrect format.";
                        readonly type: "string";
                        readonly examples: readonly ["Recipient blockchain address has incorrect format."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.failed.transaction.failed";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.failed.transaction.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to store withdrawal, it is impossible to create transaction.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to store withdrawal, it is impossible to create transaction."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.account.virtual";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.account.virtual"];
                    };
                    readonly message: {
                        readonly description: "Sender account cannot be virtual.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender account cannot be virtual."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "offchain.not.supported";
                        readonly type: "string";
                        readonly examples: readonly ["offchain.not.supported"];
                    };
                    readonly message: {
                        readonly description: "Offchain not supported for account with ${account.currency} currency.";
                        readonly type: "string";
                        readonly examples: readonly ["Offchain not supported for account with ${account.currency} currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "amount.format";
                        readonly type: "string";
                        readonly examples: readonly ["amount.format"];
                    };
                    readonly message: {
                        readonly description: "Amount has incorrect format.";
                        readonly type: "string";
                        readonly examples: readonly ["Amount has incorrect format."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "fee.format";
                        readonly type: "string";
                        readonly examples: readonly ["fee.format"];
                    };
                    readonly message: {
                        readonly description: "Fee has incorrect format.";
                        readonly type: "string";
                        readonly examples: readonly ["Fee has incorrect format."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.not.cancelled.transaction.failed";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.not.cancelled.transaction.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to broadcast transaction, and impossible to cancel withdrawal. ID is attached, \"${withdrawalId}\", cancel it manually.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to broadcast transaction, and impossible to cancel withdrawal. ID is attached, \"${withdrawalId}\", cancel it manually."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.prepare.failed";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.prepare.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to prepare transaction, withdrawal cancelled.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to prepare transaction, withdrawal cancelled."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.not.exists"];
                    };
                    readonly message: {
                        readonly description: "Unable to find sender account ${transaction.senderAccountId}.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find sender account ${transaction.senderAccountId}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.customer.disabled";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.customer.disabled"];
                    };
                    readonly message: {
                        readonly description: "Sender accounts customer ${senderAccount.customerId} is disabled, unable to perform payment.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender accounts customer ${senderAccount.customerId} is disabled, unable to perform payment."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "balance.insufficient";
                        readonly type: "string";
                        readonly examples: readonly ["balance.insufficient"];
                    };
                    readonly message: {
                        readonly description: "Insufficient balance for account ${transaction.senderAccountId} and payment amount ${transaction.amount}. Sender balance is ${senderAccount.balance.availableBalance as string}, amount is ${amount}";
                        readonly type: "string";
                        readonly examples: readonly ["Insufficient balance for account ${transaction.senderAccountId} and payment amount ${transaction.amount}. Sender balance is ${senderAccount.balance.availableBalance as string}, amount is ${amount}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "amount.btc";
                        readonly type: "string";
                        readonly examples: readonly ["amount.btc"];
                    };
                    readonly message: {
                        readonly description: "BTC|LTC|BCH|DOGE payment amount must be at least 0.00000001, not ${transaction.amount}.";
                        readonly type: "string";
                        readonly examples: readonly ["BTC|LTC|BCH|DOGE payment amount must be at least 0.00000001, not ${transaction.amount}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "amount.eth";
                        readonly type: "string";
                        readonly examples: readonly ["amount.eth"];
                    };
                    readonly message: {
                        readonly description: "ETH payment amount must be at least 0.000000000001, not ${transaction.amount}.";
                        readonly type: "string";
                        readonly examples: readonly ["ETH payment amount must be at least 0.000000000001, not ${transaction.amount}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.frozen";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.frozen"];
                    };
                    readonly message: {
                        readonly description: "Sender account ${transaction.senderAccountId} is frozen, unable to perform payment.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender account ${transaction.senderAccountId} is frozen, unable to perform payment."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.pending";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.pending"];
                    };
                    readonly message: {
                        readonly description: "Unable to prepare withdrawal, last withdrawal with id ${id} is not yet processed by blockchain.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to prepare withdrawal, last withdrawal with id ${id} is not yet processed by blockchain."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "private.mnemonic.missing";
                        readonly type: "string";
                        readonly examples: readonly ["private.mnemonic.missing"];
                    };
                    readonly message: {
                        readonly description: "Either mnemonic and index or private key must be present.";
                        readonly type: "string";
                        readonly examples: readonly ["Either mnemonic and index or private key must be present."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.erc20.unsupported";
                        readonly type: "string";
                        readonly examples: readonly ["eth.erc20.unsupported"];
                    };
                    readonly message: {
                        readonly description: "Unsupported ETH ERC20 blockchain.";
                        readonly type: "string";
                        readonly examples: readonly ["Unsupported ETH ERC20 blockchain."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "ethereum.broadcast.failed";
                        readonly type: "string";
                        readonly examples: readonly ["ethereum.broadcast.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to broadcast transaction due to ${error}.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to broadcast transaction due to ${error}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "gas.price.failed";
                        readonly type: "string";
                        readonly examples: readonly ["gas.price.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to obtain current GAS price.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to obtain current GAS price."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "ethereum.transaction.body";
                        readonly type: "string";
                        readonly examples: readonly ["ethereum.transaction.body"];
                    };
                    readonly message: {
                        readonly description: "Either currency, or tokenAddress must be defined.";
                        readonly type: "string";
                        readonly examples: readonly ["Either currency, or tokenAddress must be defined."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.transaction.gas";
                        readonly type: "string";
                        readonly examples: readonly ["eth.transaction.gas"];
                    };
                    readonly message: {
                        readonly description: "Unable to calculate gas limit for transaction. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to calculate gas limit for transaction. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.transaction.hash";
                        readonly type: "string";
                        readonly examples: readonly ["eth.transaction.hash"];
                    };
                    readonly message: {
                        readonly description: "Unable to calculate transaction hash. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to calculate transaction hash. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.transaction.sign";
                        readonly type: "string";
                        readonly examples: readonly ["eth.transaction.sign"];
                    };
                    readonly message: {
                        readonly description: "Unable to sign transaction. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to sign transaction. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PolygonTransfer: {
    readonly body: {
        readonly oneOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly nonce: {
                    readonly type: "number";
                    readonly minimum: 0;
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                };
                readonly address: {
                    readonly description: "Blockchain address to send assets";
                    readonly maxLength: 42;
                    readonly minLength: 42;
                    readonly type: "string";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly amount: {
                    readonly description: "Amount to be sent in Ether | MATIC | XDC | KCS.";
                    readonly maxLength: 38;
                    readonly type: "string";
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly examples: readonly ["100000"];
                };
                readonly compliant: {
                    readonly description: "Compliance check, if withdrawal is not compliant, it will not be processed.";
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                };
                readonly privateKey: {
                    readonly type: "string";
                    readonly maxLength: 66;
                    readonly minLength: 66;
                    readonly description: "Private key of sender address. Either mnemonic and index, privateKey or signature Id must be present - depends on the type of account and xpub.";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly paymentId: {
                    readonly description: "Identifier of the payment, shown for created Transaction within Tatum sender account.";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["1234"];
                };
                readonly senderAccountId: {
                    readonly maxLength: 24;
                    readonly minLength: 24;
                    readonly description: "Sender account ID";
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly senderNote: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "Note visible to owner of withdrawing account";
                    readonly type: "string";
                    readonly examples: readonly ["Sender note"];
                };
                readonly gasLimit: {
                    readonly type: "string";
                    readonly description: "Gas limit for transaction in gas price. If not set, automatic calculation will be used.";
                    readonly pattern: "^[+]?\\d+$";
                    readonly examples: readonly ["40000"];
                };
                readonly gasPrice: {
                    readonly type: "string";
                    readonly description: "Gas price in Gwei. If not set, automatic calculation will be used.";
                    readonly pattern: "^[+]?\\d+$";
                    readonly examples: readonly ["20"];
                };
            };
            readonly required: readonly ["senderAccountId", "address", "amount", "privateKey"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly nonce: {
                    readonly type: "number";
                    readonly minimum: 0;
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                };
                readonly address: {
                    readonly description: "Blockchain address to send assets";
                    readonly maxLength: 42;
                    readonly minLength: 42;
                    readonly type: "string";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly amount: {
                    readonly description: "Amount to be sent in Ether | MATIC | XDC | KCS.";
                    readonly maxLength: 38;
                    readonly type: "string";
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly examples: readonly ["100000"];
                };
                readonly compliant: {
                    readonly description: "Compliance check, if withdrawal is not compliant, it will not be processed.";
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                };
                readonly index: {
                    readonly description: "Derivation index of sender address.";
                    readonly maximum: 2147483647;
                    readonly type: "integer";
                    readonly examples: readonly [0];
                };
                readonly gasLimit: {
                    readonly type: "string";
                    readonly description: "Gas limit for transaction in gas price. If not set, automatic calculation will be used.";
                    readonly pattern: "^[+]?\\d+$";
                    readonly examples: readonly ["40000"];
                };
                readonly gasPrice: {
                    readonly type: "string";
                    readonly description: "Gas price in Gwei. If not set, automatic calculation will be used.";
                    readonly pattern: "^[+]?\\d+$";
                    readonly examples: readonly ["20"];
                };
                readonly mnemonic: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "Mnemonic to generate private key for sender address. Either mnemonic and index, privateKey or signature Id must be present - depends on the type of account and xpub.";
                    readonly type: "string";
                    readonly examples: readonly ["urge pulp usage sister evidence arrest palm math please chief egg abuse"];
                };
                readonly paymentId: {
                    readonly description: "Identifier of the payment, shown for created Transaction within Tatum sender account.";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["1234"];
                };
                readonly senderAccountId: {
                    readonly maxLength: 24;
                    readonly minLength: 24;
                    readonly description: "Sender account ID";
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly senderNote: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "Note visible to owner of withdrawing account";
                    readonly type: "string";
                    readonly examples: readonly ["Sender note"];
                };
            };
            readonly required: readonly ["senderAccountId", "address", "amount", "mnemonic", "index"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly nonce: {
                    readonly type: "number";
                    readonly minimum: 0;
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                };
                readonly address: {
                    readonly description: "Blockchain address to send assets";
                    readonly maxLength: 42;
                    readonly minLength: 42;
                    readonly type: "string";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly amount: {
                    readonly description: "Amount to be sent in Ether | MATIC | XDC | KCS.";
                    readonly maxLength: 38;
                    readonly type: "string";
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly examples: readonly ["100000"];
                };
                readonly compliant: {
                    readonly description: "Compliance check, if withdrawal is not compliant, it will not be processed.";
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                };
                readonly signatureId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly description: "Identifier of the mnemonic / private key associated in signing application.\nWhen hash identifies mnemonic, index must be present to represent specific account to pay from.\nPrivate key, mnemonic or signature Id must be present.\n";
                    readonly examples: readonly ["26d3883e-4e17-48b3-a0ee-09a3e484ac83"];
                };
                readonly index: {
                    readonly description: "Derivation index of sender address.";
                    readonly maximum: 2147483647;
                    readonly type: "integer";
                    readonly examples: readonly [0];
                };
                readonly paymentId: {
                    readonly description: "Identifier of the payment, shown for created Transaction within Tatum sender account.";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["1234"];
                };
                readonly senderAccountId: {
                    readonly maxLength: 24;
                    readonly minLength: 24;
                    readonly description: "Sender account ID";
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly senderNote: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "Note visible to owner of withdrawing account";
                    readonly type: "string";
                    readonly examples: readonly ["Sender note"];
                };
                readonly gasLimit: {
                    readonly type: "string";
                    readonly description: "Gas limit for transaction in gas price. If not set, automatic calculation will be used.";
                    readonly pattern: "^[+]?\\d+$";
                    readonly examples: readonly ["40000"];
                };
                readonly gasPrice: {
                    readonly type: "string";
                    readonly description: "Gas price in Gwei. If not set, automatic calculation will be used.";
                    readonly pattern: "^[+]?\\d+$";
                    readonly examples: readonly ["20"];
                };
            };
            readonly required: readonly ["senderAccountId", "address", "signatureId", "amount"];
        }];
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly oneOf: readonly [{
                readonly type: "object";
                readonly properties: {
                    readonly id: {
                        readonly description: "ID of withdrawal. If transaction is not valid in blockchain, use this id to cancel withdrawal.";
                        readonly type: "string";
                        readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    };
                    readonly txId: {
                        readonly description: "TX hash of successful transaction.";
                        readonly type: "string";
                        readonly examples: readonly ["c83f8818db43d9ba4accfe454aa44fc33123d47a4f89d47b314d6748eb0e9bc9"];
                    };
                    readonly completed: {
                        readonly description: "If set to \"true\", the withdrawal has been completed in the virtual account; if set to \"false\", the withdrawal has not been completed and you have to <a href=\"https://apidoc.tatum.io/tag/Withdrawal#operation/completeWithdrawal\" target=\"_blank\">complete it manually</a>";
                        readonly type: "boolean";
                        readonly examples: readonly [true];
                    };
                };
                readonly required: readonly ["txId", "id", "completed"];
            }, {
                readonly type: "object";
                readonly properties: {
                    readonly signatureId: {
                        readonly description: "ID of prepared payment template to sign. This is should be stored on a client side to retrieve ID of the blockchain transaction, when signing application signs the transaction and broadcasts it to the blockchain.";
                        readonly format: "uuid";
                        readonly type: "string";
                        readonly examples: readonly ["1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6"];
                    };
                };
                readonly required: readonly ["id", "signatureId"];
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.missing";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.missing"];
                    };
                    readonly message: {
                        readonly description: "No such withdrawal.";
                        readonly type: "string";
                        readonly examples: readonly ["No such withdrawal."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "rate.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["rate.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such currency rate.";
                        readonly type: "string";
                        readonly examples: readonly ["No such currency rate."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "vc.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["vc.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such virtual currency.";
                        readonly type: "string";
                        readonly examples: readonly ["No such virtual currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.recipient.format";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.recipient.format"];
                    };
                    readonly message: {
                        readonly description: "Recipient blockchain address has incorrect format.";
                        readonly type: "string";
                        readonly examples: readonly ["Recipient blockchain address has incorrect format."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.failed.transaction.failed";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.failed.transaction.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to store withdrawal, it is impossible to create transaction.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to store withdrawal, it is impossible to create transaction."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.account.virtual";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.account.virtual"];
                    };
                    readonly message: {
                        readonly description: "Sender account cannot be virtual.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender account cannot be virtual."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "offchain.not.supported";
                        readonly type: "string";
                        readonly examples: readonly ["offchain.not.supported"];
                    };
                    readonly message: {
                        readonly description: "Offchain not supported for account with ${account.currency} currency.";
                        readonly type: "string";
                        readonly examples: readonly ["Offchain not supported for account with ${account.currency} currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "amount.format";
                        readonly type: "string";
                        readonly examples: readonly ["amount.format"];
                    };
                    readonly message: {
                        readonly description: "Amount has incorrect format.";
                        readonly type: "string";
                        readonly examples: readonly ["Amount has incorrect format."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "fee.format";
                        readonly type: "string";
                        readonly examples: readonly ["fee.format"];
                    };
                    readonly message: {
                        readonly description: "Fee has incorrect format.";
                        readonly type: "string";
                        readonly examples: readonly ["Fee has incorrect format."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.not.cancelled.transaction.failed";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.not.cancelled.transaction.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to broadcast transaction, and impossible to cancel withdrawal. ID is attached, \"${withdrawalId}\", cancel it manually.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to broadcast transaction, and impossible to cancel withdrawal. ID is attached, \"${withdrawalId}\", cancel it manually."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.prepare.failed";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.prepare.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to prepare transaction, withdrawal cancelled.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to prepare transaction, withdrawal cancelled."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.not.exists"];
                    };
                    readonly message: {
                        readonly description: "Unable to find sender account ${transaction.senderAccountId}.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find sender account ${transaction.senderAccountId}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.customer.disabled";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.customer.disabled"];
                    };
                    readonly message: {
                        readonly description: "Sender accounts customer ${senderAccount.customerId} is disabled, unable to perform payment.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender accounts customer ${senderAccount.customerId} is disabled, unable to perform payment."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "balance.insufficient";
                        readonly type: "string";
                        readonly examples: readonly ["balance.insufficient"];
                    };
                    readonly message: {
                        readonly description: "Insufficient balance for account ${transaction.senderAccountId} and payment amount ${transaction.amount}. Sender balance is ${senderAccount.balance.availableBalance as string}, amount is ${amount}";
                        readonly type: "string";
                        readonly examples: readonly ["Insufficient balance for account ${transaction.senderAccountId} and payment amount ${transaction.amount}. Sender balance is ${senderAccount.balance.availableBalance as string}, amount is ${amount}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "amount.btc";
                        readonly type: "string";
                        readonly examples: readonly ["amount.btc"];
                    };
                    readonly message: {
                        readonly description: "BTC|LTC|BCH|DOGE payment amount must be at least 0.00000001, not ${transaction.amount}.";
                        readonly type: "string";
                        readonly examples: readonly ["BTC|LTC|BCH|DOGE payment amount must be at least 0.00000001, not ${transaction.amount}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "amount.eth";
                        readonly type: "string";
                        readonly examples: readonly ["amount.eth"];
                    };
                    readonly message: {
                        readonly description: "ETH payment amount must be at least 0.000000000001, not ${transaction.amount}.";
                        readonly type: "string";
                        readonly examples: readonly ["ETH payment amount must be at least 0.000000000001, not ${transaction.amount}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.frozen";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.frozen"];
                    };
                    readonly message: {
                        readonly description: "Sender account ${transaction.senderAccountId} is frozen, unable to perform payment.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender account ${transaction.senderAccountId} is frozen, unable to perform payment."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.pending";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.pending"];
                    };
                    readonly message: {
                        readonly description: "Unable to prepare withdrawal, last withdrawal with id ${id} is not yet processed by blockchain.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to prepare withdrawal, last withdrawal with id ${id} is not yet processed by blockchain."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "private.mnemonic.missing";
                        readonly type: "string";
                        readonly examples: readonly ["private.mnemonic.missing"];
                    };
                    readonly message: {
                        readonly description: "Either mnemonic and index or private key must be present.";
                        readonly type: "string";
                        readonly examples: readonly ["Either mnemonic and index or private key must be present."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.erc20.unsupported";
                        readonly type: "string";
                        readonly examples: readonly ["eth.erc20.unsupported"];
                    };
                    readonly message: {
                        readonly description: "Unsupported ETH ERC20 blockchain.";
                        readonly type: "string";
                        readonly examples: readonly ["Unsupported ETH ERC20 blockchain."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "ethereum.broadcast.failed";
                        readonly type: "string";
                        readonly examples: readonly ["ethereum.broadcast.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to broadcast transaction due to ${error}.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to broadcast transaction due to ${error}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "gas.price.failed";
                        readonly type: "string";
                        readonly examples: readonly ["gas.price.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to obtain current GAS price.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to obtain current GAS price."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "ethereum.transaction.body";
                        readonly type: "string";
                        readonly examples: readonly ["ethereum.transaction.body"];
                    };
                    readonly message: {
                        readonly description: "Either currency, or tokenAddress must be defined.";
                        readonly type: "string";
                        readonly examples: readonly ["Either currency, or tokenAddress must be defined."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.transaction.gas";
                        readonly type: "string";
                        readonly examples: readonly ["eth.transaction.gas"];
                    };
                    readonly message: {
                        readonly description: "Unable to calculate gas limit for transaction. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to calculate gas limit for transaction. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.transaction.hash";
                        readonly type: "string";
                        readonly examples: readonly ["eth.transaction.hash"];
                    };
                    readonly message: {
                        readonly description: "Unable to calculate transaction hash. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to calculate transaction hash. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.transaction.sign";
                        readonly type: "string";
                        readonly examples: readonly ["eth.transaction.sign"];
                    };
                    readonly message: {
                        readonly description: "Unable to sign transaction. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to sign transaction. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const RegisterErc20Token: {
    readonly body: {
        readonly oneOf: readonly [{
            readonly properties: {
                readonly symbol: {
                    readonly description: "The name of the token; used as an identifier within the Tatum platform and as a currency symbol on the blockchain<br/>The token name that you specify here must be the same as the token name in the <code>symbol</code> parameter of the smart contract that you <a href=\"https://apidoc.tatum.io/tag/Fungible-Tokens-(ERC-20-or-compatible)#operation/Erc20Deploy\" target=\"_blank\">are going to deploy or have already deployed</a> for this token.";
                    readonly maxLength: 30;
                    readonly minLength: 1;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                };
                readonly supply: {
                    readonly description: "The supply of the token";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["1000000.0"];
                };
                readonly decimals: {
                    readonly description: "The number of decimal places that the token has";
                    readonly minimum: 0;
                    readonly type: "number";
                    readonly examples: readonly [8];
                };
                readonly description: {
                    readonly description: "The description of the token; used as a description within the Tatum platform and as a currency name on the blockchain";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["My Public Token"];
                };
                readonly xpub: {
                    readonly description: "The extended public key of the wallet from which a deposit address for the virtual account will be generated<br/><b>NOTE:</b> On Solana, you only can assign an existing address to the virtual account; use the <code>Erc20Address</code> schema of this API.";
                    readonly maxLength: 150;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["xpub6EsCk1uU6cJzqvP9CdsTiJwT2rF748YkPnhv5Qo8q44DG7nn2vbyt48YRsNSUYS44jFCW9gwvD9kLQu9AuqXpTpM1c5hgg9PsuBLdeNncid"];
                };
                readonly derivationIndex: {
                    readonly description: "The derivation index to use together with the extended public key to generate the deposit address";
                    readonly format: "int32";
                    readonly type: "integer";
                    readonly maximum: 2147483647;
                    readonly examples: readonly [0];
                    readonly minimum: -2147483648;
                };
                readonly basePair: {
                    readonly description: "The base pair for the virtual currency that represents the token; used to calculate the value of a transaction";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["EUR"];
                };
                readonly baseRate: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly minimum: 0;
                    readonly description: "The exchange rate for the base pair; one unit of the created virtual currency equals 1 unit of <code>basePair</code>*<code>baseRate</code>";
                    readonly examples: readonly [1];
                };
                readonly customer: {
                    readonly properties: {
                        readonly externalId: {
                            readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123654"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                            readonly default: "EUR";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly customerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                        readonly providerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                    };
                    readonly required: readonly ["externalId"];
                    readonly type: "object";
                    readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                };
                readonly accountingCurrency: {
                    readonly description: "The ISO 4217 code of the currency in which all transactions for the created virtual account will be billed\n\nDefault: `USD`";
                    readonly default: "USD";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["USD"];
                };
            };
            readonly required: readonly ["symbol", "supply", "decimals", "description", "basePair", "derivationIndex", "xpub"];
            readonly type: "object";
        }, {
            readonly properties: {
                readonly symbol: {
                    readonly description: "The name of the token; used as an identifier within the Tatum platform and as a currency symbol on the blockchain<br/>The token name that you specify here must be the same as the token name in the <code>symbol</code> parameter of the smart contract that you <a href=\"https://apidoc.tatum.io/tag/Fungible-Tokens-(ERC-20-or-compatible)#operation/Erc20Deploy\" target=\"_blank\">are going to deploy or have already deployed</a> for this token.";
                    readonly maxLength: 30;
                    readonly minLength: 1;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                };
                readonly supply: {
                    readonly description: "The supply of the token";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["1000000.0"];
                };
                readonly decimals: {
                    readonly description: "The number of decimal places that the token has";
                    readonly minimum: 0;
                    readonly type: "number";
                    readonly examples: readonly [8];
                };
                readonly description: {
                    readonly description: "The description of the token; used as a description within the Tatum platform and as a currency name on the blockchain";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["My Public Token"];
                };
                readonly address: {
                    readonly description: "The blockchain address to be assigned to the virtual account as a deposit address";
                    readonly maxLength: 44;
                    readonly minLength: 42;
                    readonly type: "string";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly basePair: {
                    readonly description: "The base pair for the virtual currency that represents the token; used to calculate the value of a transaction";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["EUR"];
                };
                readonly baseRate: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly minimum: 0;
                    readonly description: "The exchange rate for the base pair; one unit of the created virtual currency equals 1 unit of <code>basePair</code>*<code>baseRate</code>";
                    readonly examples: readonly [1];
                };
                readonly customer: {
                    readonly properties: {
                        readonly externalId: {
                            readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123654"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                            readonly default: "EUR";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly customerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                        readonly providerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                    };
                    readonly required: readonly ["externalId"];
                    readonly type: "object";
                    readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                };
                readonly accountingCurrency: {
                    readonly description: "AThe ISO 4217 code of the currency in which all transactions for the created virtual account will be billed\n\nDefault: `USD`";
                    readonly default: "USD";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["USD"];
                };
            };
            readonly required: readonly ["symbol", "supply", "decimals", "description", "basePair", "address"];
            readonly type: "object";
        }];
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly chain: {
                    readonly type: "string";
                    readonly enum: readonly ["ETH", "CELO", "MATIC", "KCS", "BSC", "ONE", "XDC", "KLAY", "SOL"];
                    readonly examples: readonly ["ETH"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Blockchain to work with";
                };
            };
            readonly required: readonly ["chain"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly properties: {
                readonly accountId: {
                    readonly description: "The ID of the created virtual account with the currency set to the token name (the <code>symbol</code> parameter of the request body)<br/>The token supply will be created as soon as the token smart contract is deployed on the blockchain.";
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly address: {
                    readonly description: "The deposit address of the virtual account";
                    readonly type: "string";
                    readonly examples: readonly ["0xa7673161CbfE0116A4De9E341f8465940c2211d4"];
                };
            };
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.symbol.prefix";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.symbol.prefix"];
                    };
                    readonly message: {
                        readonly description: "ERC20 token cannot start with VC_.";
                        readonly type: "string";
                        readonly examples: readonly ["ERC20 token cannot start with VC_."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.address.xpub.both";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.address.xpub.both"];
                    };
                    readonly message: {
                        readonly description: "Either xpub or address must be present, not both.";
                        readonly type: "string";
                        readonly examples: readonly ["Either xpub or address must be present, not both."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.address.xpub.missing";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.address.xpub.missing"];
                    };
                    readonly message: {
                        readonly description: "Either xpub or address must be present.";
                        readonly type: "string";
                        readonly examples: readonly ["Either xpub or address must be present."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.recipient.format";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.recipient.format"];
                    };
                    readonly message: {
                        readonly description: "Recipient blockchain address has incorrect format.";
                        readonly type: "string";
                        readonly examples: readonly ["Recipient blockchain address has incorrect format."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.duplicate.name";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.duplicate.name"];
                    };
                    readonly message: {
                        readonly description: "ERC20 token with given name already exists.";
                        readonly type: "string";
                        readonly examples: readonly ["ERC20 token with given name already exists."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "customer.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["customer.not.active"];
                    };
                    readonly message: {
                        readonly description: "Customer not active.";
                        readonly type: "string";
                        readonly examples: readonly ["Customer not active."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "virtual.creation.error";
                        readonly type: "string";
                        readonly examples: readonly ["virtual.creation.error"];
                    };
                    readonly message: {
                        readonly description: "It is not possible to create virtual currency.";
                        readonly type: "string";
                        readonly examples: readonly ["It is not possible to create virtual currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["account.not.exists"];
                    };
                    readonly message: {
                        readonly description: "No such account.";
                        readonly type: "string";
                        readonly examples: readonly ["No such account."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.missing";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.missing"];
                    };
                    readonly message: {
                        readonly description: "No xpub assigned to account, it is not possible to generate address. Use assignAddress method instead.";
                        readonly type: "string";
                        readonly examples: readonly ["No xpub assigned to account, it is not possible to generate address. Use assignAddress method instead."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "xpub.used";
                        readonly type: "string";
                        readonly examples: readonly ["xpub.used"];
                    };
                    readonly message: {
                        readonly description: "XPub already used registered within Tatum";
                        readonly type: "string";
                        readonly examples: readonly ["XPub already used registered within Tatum"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "Address.index.used";
                        readonly type: "string";
                        readonly examples: readonly ["address.index.used"];
                    };
                    readonly message: {
                        readonly description: "Unable to create address, derivation index is already used.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to create address, derivation index is already used."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "offchain.not.supported";
                        readonly type: "string";
                        readonly examples: readonly ["offchain.not.supported"];
                    };
                    readonly message: {
                        readonly description: "Offchain not supported for account with ${account.currency} currency.";
                        readonly type: "string";
                        readonly examples: readonly ["Offchain not supported for account with ${account.currency} currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.incompatible";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.incompatible"];
                    };
                    readonly message: {
                        readonly description: "Xpub not compatible with account currency.";
                        readonly type: "string";
                        readonly examples: readonly ["Xpub not compatible with account currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.present";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.present"];
                    };
                    readonly message: {
                        readonly description: "Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead.";
                        readonly type: "string";
                        readonly examples: readonly ["Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                    readonly required: {
                        readonly "0": "errorCode";
                        readonly "1": "message";
                        readonly "2": "statusCode";
                    };
                    readonly type: "object";
                };
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "vc.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["vc.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such virtual currency.";
                        readonly type: "string";
                        readonly examples: readonly ["No such virtual currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "Address.used";
                        readonly type: "string";
                        readonly examples: readonly ["address.used"];
                    };
                    readonly message: {
                        readonly description: "Address and currency already in use.";
                        readonly type: "string";
                        readonly examples: readonly ["Address and currency already in use."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.present";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.present"];
                    };
                    readonly message: {
                        readonly description: "Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead.";
                        readonly type: "string";
                        readonly examples: readonly ["Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                    readonly required: {
                        readonly "0": "errorCode";
                        readonly "1": "message";
                        readonly "2": "statusCode";
                    };
                    readonly type: "object";
                };
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.erc20.unsupported";
                        readonly type: "string";
                        readonly examples: readonly ["eth.erc20.unsupported"];
                    };
                    readonly message: {
                        readonly description: "Unsupported ETH ERC20 blockchain.";
                        readonly type: "string";
                        readonly examples: readonly ["Unsupported ETH ERC20 blockchain."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const RemoveAddress: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Account ID";
                };
                readonly address: {
                    readonly type: "string";
                    readonly examples: readonly ["2MsM67NLa71fHvTUBqNENW15P68nHB2vVXb"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Blockchain address";
                };
            };
            readonly required: readonly ["id", "address"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly index: {
                    readonly type: "number";
                    readonly minimum: 1;
                    readonly examples: readonly [1];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Destination tag or memo attribute for XRP, BNB or XLM addresses";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "account.not.exists";
                    readonly type: "string";
                    readonly examples: readonly ["account.not.exists"];
                };
                readonly message: {
                    readonly description: "No such account.";
                    readonly type: "string";
                    readonly examples: readonly ["No such account."];
                };
                readonly statusCode: {
                    readonly description: "403";
                    readonly type: "number";
                    readonly examples: readonly [403];
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const RevokeCurrency: {
    readonly body: {
        readonly properties: {
            readonly accountId: {
                readonly description: "Ledger account with currency of the virtual currency, on which the operation will be performed.";
                readonly maxLength: 24;
                readonly minLength: 24;
                readonly type: "string";
                readonly examples: readonly ["5e68c66581f2ee32bc354087"];
            };
            readonly amount: {
                readonly description: "Amount of virtual currency to operate within this operation.";
                readonly maxLength: 38;
                readonly type: "string";
                readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                readonly examples: readonly ["1.5"];
            };
            readonly paymentId: {
                readonly description: "Identifier of the payment, shown for created Transaction within Tatum sender account.";
                readonly maxLength: 100;
                readonly minLength: 1;
                readonly type: "string";
                readonly examples: readonly ["My Payment"];
            };
            readonly reference: {
                readonly description: "Reference of the payment.";
                readonly maxLength: 100;
                readonly minLength: 1;
                readonly type: "string";
                readonly examples: readonly ["akjsndakjsdn-asd-kjasnd-asdkn-asdjnasjkdn"];
            };
            readonly transactionCode: {
                readonly description: "For bookkeeping to distinct transaction purpose.";
                readonly maxLength: 100;
                readonly minLength: 1;
                readonly type: "string";
                readonly examples: readonly ["1_01_EXTERNAL_CODE"];
            };
            readonly recipientNote: {
                readonly description: "Note visible to both, sender and recipient. Available for both Mint and Revoke operations";
                readonly maxLength: 500;
                readonly minLength: 1;
                readonly type: "string";
                readonly examples: readonly ["Private note"];
            };
            readonly counterAccount: {
                readonly description: "External account identifier. By default, there is no counterAccount present in the transaction.";
                readonly maxLength: 24;
                readonly minLength: 24;
                readonly type: "string";
                readonly examples: readonly ["5e6645712b55823de7ea82f1"];
            };
            readonly senderNote: {
                readonly description: "Note visible to sender. Available in Revoke operation.";
                readonly maxLength: 500;
                readonly minLength: 1;
                readonly type: "string";
                readonly examples: readonly ["Sender note"];
            };
        };
        readonly required: readonly ["accountId", "amount"];
        readonly type: "object";
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly properties: {
                readonly reference: {
                    readonly description: "The internal reference to the transaction (a unique identifier of the transaction within the virtual account); if the transaction fails, use this reference to search through the logs";
                    readonly type: "string";
                    readonly examples: readonly ["0c64cc04-5412-4e57-a51c-ee5727939bcb"];
                };
            };
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "virtual.account.notValid";
                        readonly type: "string";
                        readonly examples: readonly ["virtual.account.notValid"];
                    };
                    readonly message: {
                        readonly description: "Unable to perform operation on virtual currency, account does not exists.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to perform operation on virtual currency, account does not exists."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "virtual.tx.failed";
                        readonly type: "string";
                        readonly examples: readonly ["virtual.tx.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to perform operation on virtual currency, impossible to store transaction.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to perform operation on virtual currency, impossible to store transaction."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "vc.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["vc.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such virtual currency.";
                        readonly type: "string";
                        readonly examples: readonly ["No such virtual currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "rate.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["rate.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such currency rate.";
                        readonly type: "string";
                        readonly examples: readonly ["No such currency rate."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["account.not.exists"];
                    };
                    readonly message: {
                        readonly description: "No such account.";
                        readonly type: "string";
                        readonly examples: readonly ["No such account."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "virtual.account.balance";
                        readonly type: "string";
                        readonly examples: readonly ["virtual.account.balance"];
                    };
                    readonly message: {
                        readonly description: "Insufficient balance to revoke virtual currency on account.";
                        readonly type: "string";
                        readonly examples: readonly ["Insufficient balance to revoke virtual currency on account."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const SendTransaction: {
    readonly body: {
        readonly properties: {
            readonly senderAccountId: {
                readonly description: "Internal sender account ID within Tatum platform";
                readonly maxLength: 24;
                readonly minLength: 24;
                readonly type: "string";
                readonly examples: readonly ["5e6645712b55823de7ea82f1"];
            };
            readonly recipientAccountId: {
                readonly description: "Internal recipient account ID within Tatum platform";
                readonly maxLength: 24;
                readonly minLength: 24;
                readonly type: "string";
                readonly examples: readonly ["5e6645712b55823de7ea82f2"];
            };
            readonly amount: {
                readonly description: "Amount to be sent.";
                readonly maxLength: 38;
                readonly type: "string";
                readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                readonly examples: readonly ["5"];
            };
            readonly anonymous: {
                readonly default: false;
                readonly description: "Anonymous transaction does not show sender account to recipient, default is false";
                readonly type: "boolean";
                readonly examples: readonly [false];
            };
            readonly compliant: {
                readonly description: "Enable compliant checks. Transaction will not be processed, if compliant check fails.";
                readonly type: "boolean";
                readonly examples: readonly [false];
            };
            readonly transactionCode: {
                readonly description: "For bookkeeping to distinct transaction purpose.";
                readonly maxLength: 100;
                readonly minLength: 1;
                readonly type: "string";
                readonly examples: readonly ["1_01_EXTERNAL_CODE"];
            };
            readonly paymentId: {
                readonly description: "Payment ID, External identifier of the payment, which can be used to pair transactions within Tatum accounts.";
                readonly maxLength: 100;
                readonly minLength: 1;
                readonly type: "string";
                readonly examples: readonly ["9625"];
            };
            readonly recipientNote: {
                readonly description: "Note visible to both, sender and recipient";
                readonly maxLength: 500;
                readonly minLength: 1;
                readonly type: "string";
                readonly examples: readonly ["Private note"];
            };
            readonly baseRate: {
                readonly type: "number";
                readonly default: 1;
                readonly minimum: 0;
                readonly description: "Exchange rate of the base pair. Only applicable for Tatum's Virtual currencies Ledger transactions. Override default exchange rate for the Virtual Currency.";
                readonly examples: readonly [1];
            };
            readonly senderNote: {
                readonly description: "Note visible to sender";
                readonly maxLength: 500;
                readonly minLength: 1;
                readonly type: "string";
                readonly examples: readonly ["Sender note"];
            };
        };
        readonly required: readonly ["amount", "recipientAccountId", "senderAccountId"];
        readonly type: "object";
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly properties: {
                readonly reference: {
                    readonly description: "The internal reference to the transaction (a unique identifier of the transaction within the virtual account); if the transaction fails, use this reference to search through the logs";
                    readonly type: "string";
                    readonly examples: readonly ["0c64cc04-5412-4e57-a51c-ee5727939bcb"];
                };
            };
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "amount.format";
                        readonly type: "string";
                        readonly examples: readonly ["amount.format"];
                    };
                    readonly message: {
                        readonly description: "Amount has incorrect format.";
                        readonly type: "string";
                        readonly examples: readonly ["Amount has incorrect format."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.not.exists"];
                    };
                    readonly message: {
                        readonly description: "Unable to find sender account ${transaction.senderAccountId}.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find sender account ${transaction.senderAccountId}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "compliance.country.btc.not.supported";
                        readonly type: "string";
                        readonly examples: readonly ["compliance.country.btc.not.supported"];
                    };
                    readonly message: {
                        readonly description: "Customer country not supported for BTC.";
                        readonly type: "string";
                        readonly examples: readonly ["Customer country not supported for BTC."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "compliance.country.eth.not.supported";
                        readonly type: "string";
                        readonly examples: readonly ["compliance.country.eth.not.supported"];
                    };
                    readonly message: {
                        readonly description: "Customer country not supported for ETH.";
                        readonly type: "string";
                        readonly examples: readonly ["Customer country not supported for ETH."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "rate.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["rate.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such currency rate.";
                        readonly type: "string";
                        readonly examples: readonly ["No such currency rate."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "vc.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["vc.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such virtual currency.";
                        readonly type: "string";
                        readonly examples: readonly ["No such virtual currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.frozen";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.frozen"];
                    };
                    readonly message: {
                        readonly description: "Sender account ${transaction.senderAccountId} is frozen, unable to perform payment.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender account ${transaction.senderAccountId} is frozen, unable to perform payment."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.customer.disabled";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.customer.disabled"];
                    };
                    readonly message: {
                        readonly description: "Sender accounts customer ${senderAccount.customerId} is disabled, unable to perform payment.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender accounts customer ${senderAccount.customerId} is disabled, unable to perform payment."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "recipientAccount.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["recipientAccount.not.exists"];
                    };
                    readonly message: {
                        readonly description: "Unable to find recipient account ${transaction.recipientAccountId}.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find recipient account ${transaction.recipientAccountId}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "transaction.currency.incompatible";
                        readonly type: "string";
                        readonly examples: readonly ["transaction.currency.incompatible"];
                    };
                    readonly message: {
                        readonly description: "Incompatible currencies for sender account ${transaction.senderAccountId} and recipient account ${transaction.recipientAccountId}.";
                        readonly type: "string";
                        readonly examples: readonly ["Incompatible currencies for sender account ${transaction.senderAccountId} and recipient account ${transaction.recipientAccountId}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "balance.insufficient";
                        readonly type: "string";
                        readonly examples: readonly ["balance.insufficient"];
                    };
                    readonly message: {
                        readonly description: "Insufficient balance for account ${transaction.senderAccountId} and payment amount ${transaction.amount}. Sender balance is ${senderAccount.balance.availableBalance as string}, amount is ${amount}";
                        readonly type: "string";
                        readonly examples: readonly ["Insufficient balance for account ${transaction.senderAccountId} and payment amount ${transaction.amount}. Sender balance is ${senderAccount.balance.availableBalance as string}, amount is ${amount}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "amount.btc";
                        readonly type: "string";
                        readonly examples: readonly ["amount.btc"];
                    };
                    readonly message: {
                        readonly description: "BTC|LTC|BCH|DOGE payment amount must be at least 0.00000001, not ${transaction.amount}.";
                        readonly type: "string";
                        readonly examples: readonly ["BTC|LTC|BCH|DOGE payment amount must be at least 0.00000001, not ${transaction.amount}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "amount.eth";
                        readonly type: "string";
                        readonly examples: readonly ["amount.eth"];
                    };
                    readonly message: {
                        readonly description: "ETH payment amount must be at least 0.000000000001, not ${transaction.amount}.";
                        readonly type: "string";
                        readonly examples: readonly ["ETH payment amount must be at least 0.000000000001, not ${transaction.amount}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "transaction.not.compliant";
                        readonly type: "string";
                        readonly examples: readonly ["transaction.not.compliant"];
                    };
                    readonly message: {
                        readonly description: "Transaction not compliant, recipient account customer country is not defined.";
                        readonly type: "string";
                        readonly examples: readonly ["Transaction not compliant, recipient account customer country is not defined."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const SendTransactionBatch: {
    readonly body: {
        readonly properties: {
            readonly senderAccountId: {
                readonly description: "Internal sender account ID within Tatum platform";
                readonly maxLength: 24;
                readonly minLength: 24;
                readonly type: "string";
                readonly examples: readonly ["5e6645712b55823de7ea82f1"];
            };
            readonly transaction: {
                readonly description: "Array of block seals.";
                readonly type: "array";
                readonly items: {
                    readonly type: "object";
                    readonly required: readonly ["amount", "recipientAccountId"];
                    readonly properties: {
                        readonly recipientAccountId: {
                            readonly description: "Internal recipient account ID within Tatum platform";
                            readonly maxLength: 24;
                            readonly minLength: 24;
                            readonly type: "string";
                            readonly examples: readonly ["5e6645712b55823de7ea82f2"];
                        };
                        readonly amount: {
                            readonly description: "Amount to be sent.";
                            readonly maxLength: 38;
                            readonly type: "string";
                            readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                            readonly examples: readonly ["5"];
                        };
                        readonly anonymous: {
                            readonly default: false;
                            readonly description: "Anonymous transaction does not show sender account to recipient, default is false";
                            readonly type: "boolean";
                            readonly examples: readonly [false];
                        };
                        readonly compliant: {
                            readonly description: "Enable compliant checks. Transaction will not be processed, if compliant check fails.";
                            readonly type: "boolean";
                            readonly examples: readonly [false];
                        };
                        readonly transactionCode: {
                            readonly description: "For bookkeeping to distinct transaction purpose.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["1_01_EXTERNAL_CODE"];
                        };
                        readonly paymentId: {
                            readonly description: "Payment ID, External identifier of the payment, which can be used to pair transactions within Tatum accounts.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["9625"];
                        };
                        readonly recipientNote: {
                            readonly description: "Note visible to both, sender and recipient";
                            readonly maxLength: 500;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["Private note"];
                        };
                        readonly baseRate: {
                            readonly type: "number";
                            readonly default: 1;
                            readonly minimum: 0;
                            readonly description: "Exchange rate of the base pair. Only applicable for Tatum's Virtual currencies Ledger transactions. Override default exchange rate for the Virtual Currency.";
                            readonly examples: readonly [1];
                        };
                        readonly senderNote: {
                            readonly description: "Note visible to sender";
                            readonly maxLength: 500;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["Sender note"];
                        };
                    };
                };
            };
        };
        readonly required: readonly ["senderAccountId"];
        readonly type: "object";
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly description: "The internal reference to the transaction (a unique identifier of the transaction within the virtual account); if the transaction fails, use this reference to search through the logs";
                readonly type: "string";
                readonly examples: readonly ["0c64cc04-5412-4e57-a51c-ee5727939bcb"];
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "amount.format";
                        readonly type: "string";
                        readonly examples: readonly ["amount.format"];
                    };
                    readonly message: {
                        readonly description: "Amount has incorrect format.";
                        readonly type: "string";
                        readonly examples: readonly ["Amount has incorrect format."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.not.exists"];
                    };
                    readonly message: {
                        readonly description: "Unable to find sender account ${transaction.senderAccountId}.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find sender account ${transaction.senderAccountId}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "compliance.country.btc.not.supported";
                        readonly type: "string";
                        readonly examples: readonly ["compliance.country.btc.not.supported"];
                    };
                    readonly message: {
                        readonly description: "Customer country not supported for BTC.";
                        readonly type: "string";
                        readonly examples: readonly ["Customer country not supported for BTC."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "compliance.country.eth.not.supported";
                        readonly type: "string";
                        readonly examples: readonly ["compliance.country.eth.not.supported"];
                    };
                    readonly message: {
                        readonly description: "Customer country not supported for ETH.";
                        readonly type: "string";
                        readonly examples: readonly ["Customer country not supported for ETH."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "rate.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["rate.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such currency rate.";
                        readonly type: "string";
                        readonly examples: readonly ["No such currency rate."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "vc.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["vc.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such virtual currency.";
                        readonly type: "string";
                        readonly examples: readonly ["No such virtual currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.frozen";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.frozen"];
                    };
                    readonly message: {
                        readonly description: "Sender account ${transaction.senderAccountId} is frozen, unable to perform payment.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender account ${transaction.senderAccountId} is frozen, unable to perform payment."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.customer.disabled";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.customer.disabled"];
                    };
                    readonly message: {
                        readonly description: "Sender accounts customer ${senderAccount.customerId} is disabled, unable to perform payment.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender accounts customer ${senderAccount.customerId} is disabled, unable to perform payment."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "recipientAccount.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["recipientAccount.not.exists"];
                    };
                    readonly message: {
                        readonly description: "Unable to find recipient account ${transaction.recipientAccountId}.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find recipient account ${transaction.recipientAccountId}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "transaction.currency.incompatible";
                        readonly type: "string";
                        readonly examples: readonly ["transaction.currency.incompatible"];
                    };
                    readonly message: {
                        readonly description: "Incompatible currencies for sender account ${transaction.senderAccountId} and recipient account ${transaction.recipientAccountId}.";
                        readonly type: "string";
                        readonly examples: readonly ["Incompatible currencies for sender account ${transaction.senderAccountId} and recipient account ${transaction.recipientAccountId}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "balance.insufficient";
                        readonly type: "string";
                        readonly examples: readonly ["balance.insufficient"];
                    };
                    readonly message: {
                        readonly description: "Insufficient balance for account ${transaction.senderAccountId} and payment amount ${transaction.amount}. Sender balance is ${senderAccount.balance.availableBalance as string}, amount is ${amount}";
                        readonly type: "string";
                        readonly examples: readonly ["Insufficient balance for account ${transaction.senderAccountId} and payment amount ${transaction.amount}. Sender balance is ${senderAccount.balance.availableBalance as string}, amount is ${amount}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "amount.btc";
                        readonly type: "string";
                        readonly examples: readonly ["amount.btc"];
                    };
                    readonly message: {
                        readonly description: "BTC|LTC|BCH|DOGE payment amount must be at least 0.00000001, not ${transaction.amount}.";
                        readonly type: "string";
                        readonly examples: readonly ["BTC|LTC|BCH|DOGE payment amount must be at least 0.00000001, not ${transaction.amount}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "amount.eth";
                        readonly type: "string";
                        readonly examples: readonly ["amount.eth"];
                    };
                    readonly message: {
                        readonly description: "ETH payment amount must be at least 0.000000000001, not ${transaction.amount}.";
                        readonly type: "string";
                        readonly examples: readonly ["ETH payment amount must be at least 0.000000000001, not ${transaction.amount}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "transaction.not.compliant";
                        readonly type: "string";
                        readonly examples: readonly ["transaction.not.compliant"];
                    };
                    readonly message: {
                        readonly description: "Transaction not compliant, recipient account customer country is not defined.";
                        readonly type: "string";
                        readonly examples: readonly ["Transaction not compliant, recipient account customer country is not defined."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const SolTransfer: {
    readonly body: {
        readonly oneOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly senderAccountId: {
                    readonly maxLength: 24;
                    readonly minLength: 24;
                    readonly description: "Sender account ID";
                    readonly type: "string";
                    readonly examples: readonly ["61b3bffddfb389cde19c73be"];
                };
                readonly from: {
                    readonly description: "Blockchain account to send from";
                    readonly maxLength: 44;
                    readonly minLength: 32;
                    readonly type: "string";
                    readonly examples: readonly ["FykfMwA9WNShzPJbbb9DNXsfgDgS3XZzWiFgrVXfWoPJ"];
                };
                readonly address: {
                    readonly description: "Blockchain address to send assets";
                    readonly maxLength: 44;
                    readonly minLength: 32;
                    readonly type: "string";
                    readonly examples: readonly ["9B5XszUGdMaxCZ7uSQhPzdks5ZQSmWxrmzCSvtJ6Ns6g"];
                };
                readonly amount: {
                    readonly description: "Amount to be sent, in SOL / USDC_SOL or custom SPL token based on the senderAccountId currency type.";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["10000"];
                };
                readonly privateKey: {
                    readonly maxLength: 128;
                    readonly minLength: 87;
                    readonly description: "Private key for account. Private key, or signature Id must be present.";
                    readonly type: "string";
                    readonly examples: readonly ["zgsAKfjuXrAxEyuYRxbbxPM3rdsPbJPnGreaGMbcdUApJ6wHnCqQnf9b1RNPdeZxsRMkezh4VgXQ7YrbpndGtEv"];
                };
                readonly fee: {
                    readonly description: "Fee to be charged for the operation. For SOL, fee is decided by the blockchain, but default SOL fee is 0.000005. This fee will be only charged on top of the withdrawal amount to the virtual account.";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["10000"];
                };
                readonly compliant: {
                    readonly description: "Compliance check, if withdrawal is not compliant, it will not be processed.";
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                };
                readonly paymentId: {
                    readonly description: "Identifier of the payment, shown for created Transaction within Tatum sender account.";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["1234"];
                };
                readonly senderNote: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "Note visible to owner of withdrawing account.";
                    readonly type: "string";
                    readonly examples: readonly ["Sender note"];
                };
            };
            readonly required: readonly ["from", "senderAccountId", "address", "privateKey", "amount"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly senderAccountId: {
                    readonly maxLength: 24;
                    readonly minLength: 24;
                    readonly description: "Sender account ID";
                    readonly type: "string";
                    readonly examples: readonly ["61b3bffddfb389cde19c73be"];
                };
                readonly from: {
                    readonly description: "Blockchain account to send from";
                    readonly maxLength: 44;
                    readonly minLength: 32;
                    readonly type: "string";
                    readonly examples: readonly ["FykfMwA9WNShzPJbbb9DNXsfgDgS3XZzWiFgrVXfWoPJ"];
                };
                readonly address: {
                    readonly description: "Blockchain address to send assets";
                    readonly maxLength: 44;
                    readonly minLength: 32;
                    readonly type: "string";
                    readonly examples: readonly ["9B5XszUGdMaxCZ7uSQhPzdks5ZQSmWxrmzCSvtJ6Ns6g"];
                };
                readonly amount: {
                    readonly description: "Amount to be sent, in SOL.";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["10000"];
                };
                readonly signatureId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly description: "Identifier of the secret associated in signing application. Secret, or signature Id must be present.";
                    readonly examples: readonly ["26d3883e-4e17-48b3-a0ee-09a3e484ac83"];
                };
                readonly fee: {
                    readonly description: "Fee to be charged for the operation. For SOL, fee is decided by the blockchain, but default SOL fee is 0.000005. This fee will be only charged on top of the withdrawal amount to the virtual account.";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["10000"];
                };
                readonly compliant: {
                    readonly description: "Compliance check, if withdrawal is not compliant, it will not be processed.";
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                };
                readonly paymentId: {
                    readonly description: "Identifier of the payment, shown for created Transaction within Tatum sender account.";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["1234"];
                };
                readonly senderNote: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "Note visible to owner of withdrawing account.";
                    readonly type: "string";
                    readonly examples: readonly ["Sender note"];
                };
            };
            readonly required: readonly ["from", "senderAccountId", "address", "signatureId", "amount"];
        }];
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly oneOf: readonly [{
                readonly type: "object";
                readonly properties: {
                    readonly id: {
                        readonly description: "ID of withdrawal. If transaction is not valid in blockchain, use this id to cancel withdrawal.";
                        readonly type: "string";
                        readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    };
                    readonly txId: {
                        readonly description: "TX hash of successful transaction.";
                        readonly type: "string";
                        readonly examples: readonly ["c83f8818db43d9ba4accfe454aa44fc33123d47a4f89d47b314d6748eb0e9bc9"];
                    };
                    readonly completed: {
                        readonly description: "If set to \"true\", the withdrawal has been completed in the virtual account; if set to \"false\", the withdrawal has not been completed and you have to <a href=\"https://apidoc.tatum.io/tag/Withdrawal#operation/completeWithdrawal\" target=\"_blank\">complete it manually</a>";
                        readonly type: "boolean";
                        readonly examples: readonly [true];
                    };
                };
                readonly required: readonly ["txId", "id", "completed"];
            }, {
                readonly type: "object";
                readonly properties: {
                    readonly signatureId: {
                        readonly description: "ID of prepared payment template to sign. This is should be stored on a client side to retrieve ID of the blockchain transaction, when signing application signs the transaction and broadcasts it to the blockchain.";
                        readonly format: "uuid";
                        readonly type: "string";
                        readonly examples: readonly ["1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6"];
                    };
                };
                readonly required: readonly ["id", "signatureId"];
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "rate.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["rate.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such currency rate.";
                        readonly type: "string";
                        readonly examples: readonly ["No such currency rate."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "vc.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["vc.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such virtual currency.";
                        readonly type: "string";
                        readonly examples: readonly ["No such virtual currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.failed.transaction.failed";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.failed.transaction.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to store withdrawal, it is impossible to create transaction.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to store withdrawal, it is impossible to create transaction."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.account.virtual";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.account.virtual"];
                    };
                    readonly message: {
                        readonly description: "Sender account cannot be virtual.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender account cannot be virtual."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "offchain.not.supported";
                        readonly type: "string";
                        readonly examples: readonly ["offchain.not.supported"];
                    };
                    readonly message: {
                        readonly description: "Offchain not supported for account with ${account.currency} currency.";
                        readonly type: "string";
                        readonly examples: readonly ["Offchain not supported for account with ${account.currency} currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "amount.format";
                        readonly type: "string";
                        readonly examples: readonly ["amount.format"];
                    };
                    readonly message: {
                        readonly description: "Amount has incorrect format.";
                        readonly type: "string";
                        readonly examples: readonly ["Amount has incorrect format."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.not.exists"];
                    };
                    readonly message: {
                        readonly description: "Unable to find sender account ${transaction.senderAccountId}.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find sender account ${transaction.senderAccountId}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.customer.disabled";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.customer.disabled"];
                    };
                    readonly message: {
                        readonly description: "Sender accounts customer ${senderAccount.customerId} is disabled, unable to perform payment.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender accounts customer ${senderAccount.customerId} is disabled, unable to perform payment."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "balance.insufficient";
                        readonly type: "string";
                        readonly examples: readonly ["balance.insufficient"];
                    };
                    readonly message: {
                        readonly description: "Insufficient balance for account ${transaction.senderAccountId} and payment amount ${transaction.amount}. Sender balance is ${senderAccount.balance.availableBalance as string}, amount is ${amount}";
                        readonly type: "string";
                        readonly examples: readonly ["Insufficient balance for account ${transaction.senderAccountId} and payment amount ${transaction.amount}. Sender balance is ${senderAccount.balance.availableBalance as string}, amount is ${amount}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.frozen";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.frozen"];
                    };
                    readonly message: {
                        readonly description: "Sender account ${transaction.senderAccountId} is frozen, unable to perform payment.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender account ${transaction.senderAccountId} is frozen, unable to perform payment."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.pending";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.pending"];
                    };
                    readonly message: {
                        readonly description: "Unable to prepare withdrawal, last withdrawal with id ${id} is not yet processed by blockchain.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to prepare withdrawal, last withdrawal with id ${id} is not yet processed by blockchain."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const StoreCeloErc20Address: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly address: {
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "ERC-20 contract address";
                };
                readonly name: {
                    readonly maxLength: 30;
                    readonly minLength: 1;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "ERC-20 symbol name.";
                };
            };
            readonly required: readonly ["address", "name"];
        }];
    };
    readonly response: {
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.token.notFound";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.token.notFound"];
                    };
                    readonly message: {
                        readonly description: "No such ERC20 currency ${name}.";
                        readonly type: "string";
                        readonly examples: readonly ["No such ERC20 currency ${name}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.address.set";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.address.set"];
                    };
                    readonly message: {
                        readonly description: "ERC20 address was already set.";
                        readonly type: "string";
                        readonly examples: readonly ["ERC20 address was already set."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const StoreTokenAddress: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly address: {
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "On Algorand, this is the asset ID; on TRON, this is the token ID; on the other blockchains, this is the address of the smart contract.";
                };
                readonly name: {
                    readonly maxLength: 30;
                    readonly minLength: 1;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "The name of the token (the token symbol)";
                };
            };
            readonly required: readonly ["address", "name"];
        }];
    };
    readonly response: {
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.token.notFound";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.token.notFound"];
                    };
                    readonly message: {
                        readonly description: "No such ERC20 currency ${name}.";
                        readonly type: "string";
                        readonly examples: readonly ["No such ERC20 currency ${name}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.address.set";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.address.set"];
                    };
                    readonly message: {
                        readonly description: "ERC20 address was already set.";
                        readonly type: "string";
                        readonly examples: readonly ["ERC20 address was already set."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const StoreTrade: {
    readonly body: {
        readonly oneOf: readonly [{
            readonly type: "object";
            readonly required: readonly ["type", "price", "amount", "pair", "currency1AccountId", "currency2AccountId"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the regular trade, BUY, SELL";
                    readonly enum: readonly ["BUY", "SELL"];
                    readonly examples: readonly ["BUY"];
                };
                readonly price: {
                    readonly type: "string";
                    readonly description: "Price to buy / sell";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly examples: readonly ["8650.4"];
                };
                readonly amount: {
                    readonly type: "string";
                    readonly description: "Amount of the trade to be bought / sold";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly examples: readonly ["15000"];
                };
                readonly pair: {
                    readonly type: "string";
                    readonly description: "Trading pair";
                    readonly minLength: 3;
                    readonly maxLength: 30;
                    readonly pattern: "^[A-a-zZ0-9_\\-]+\\/[A-Za-z0-9_\\-]+$";
                    readonly examples: readonly ["BTC/EUR"];
                };
                readonly currency1AccountId: {
                    readonly type: "string";
                    readonly description: "ID of the account of the currency 1 trade currency";
                    readonly minLength: 24;
                    readonly maxLength: 24;
                    readonly examples: readonly ["7c21ed165e294db78b95f0f1"];
                };
                readonly currency2AccountId: {
                    readonly type: "string";
                    readonly description: "ID of the account of the currency 2 trade currency";
                    readonly minLength: 24;
                    readonly maxLength: 24;
                    readonly examples: readonly ["7c21ed165e294db78b95f0f1"];
                };
                readonly feeAccountId: {
                    readonly type: "string";
                    readonly description: "ID of the account where fee will be paid, if any. If trade is a BUY or FUTURE_BUY type, feeAccountId must have same currency as a currency of currency2AccountId, and vice versa if trade is a SELL or FUTURE_SELL type, feeAccountId must have same currency as a currency of currency1AccountId.";
                    readonly minLength: 24;
                    readonly maxLength: 24;
                    readonly examples: readonly ["7c21ed165e294db78b95f0f1"];
                };
                readonly fee: {
                    readonly type: "number";
                    readonly description: "Percentage of the trade amount to be paid as a fee.";
                    readonly minimum: 0;
                    readonly maximum: 100;
                    readonly examples: readonly [1.5];
                };
            };
        }, {
            readonly type: "object";
            readonly required: readonly ["type", "price", "amount", "pair", "currency1AccountId", "currency2AccountId", "attr"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of future the trade, FUTURE_BUY, FUTURE_SELL";
                    readonly enum: readonly ["FUTURE_BUY", "FUTURE_SELL"];
                    readonly examples: readonly ["BUY"];
                };
                readonly price: {
                    readonly type: "string";
                    readonly description: "Price to buy / sell";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly examples: readonly ["8650.4"];
                };
                readonly amount: {
                    readonly type: "string";
                    readonly description: "Amount of the trade to be bought / sold";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly examples: readonly ["15000"];
                };
                readonly pair: {
                    readonly type: "string";
                    readonly description: "Trading pair";
                    readonly minLength: 3;
                    readonly maxLength: 30;
                    readonly pattern: "^[A-a-zZ0-9_\\-]+\\/[A-Za-z0-9_\\-]+$";
                    readonly examples: readonly ["BTC/EUR"];
                };
                readonly currency1AccountId: {
                    readonly type: "string";
                    readonly description: "ID of the account of the currency 1 trade currency";
                    readonly minLength: 24;
                    readonly maxLength: 24;
                    readonly examples: readonly ["7c21ed165e294db78b95f0f1"];
                };
                readonly currency2AccountId: {
                    readonly type: "string";
                    readonly description: "ID of the account of the currency 2 trade currency";
                    readonly minLength: 24;
                    readonly maxLength: 24;
                    readonly examples: readonly ["7c21ed165e294db78b95f0f1"];
                };
                readonly feeAccountId: {
                    readonly type: "string";
                    readonly description: "ID of the account where fee will be paid, if any. If trade is a BUY or FUTURE_BUY type, feeAccountId must have same currency as a currency of currency2AccountId, and vice versa if trade is a SELL or FUTURE_SELL type, feeAccountId must have same currency as a currency of currency1AccountId.";
                    readonly minLength: 24;
                    readonly maxLength: 24;
                    readonly examples: readonly ["7c21ed165e294db78b95f0f1"];
                };
                readonly fee: {
                    readonly type: "number";
                    readonly description: "Percentage of the trade amount to be paid as a fee.";
                    readonly minimum: 0;
                    readonly maximum: 100;
                    readonly examples: readonly [1.5];
                };
                readonly attr: {
                    readonly type: "object";
                    readonly description: "Additional attributes for the future type.";
                    readonly required: readonly ["sealDate"];
                    readonly properties: {
                        readonly sealDate: {
                            readonly type: "number";
                            readonly description: "Time in UTC when the future will be filled.";
                            readonly minimum: 0;
                            readonly examples: readonly [1572031674384];
                        };
                        readonly percentBlock: {
                            readonly description: "Percentage of the future amount which selling or buying account must have available on future creation. This amount will be blocked till future is filled or expires.";
                            readonly minimum: 0;
                            readonly maximum: 100;
                        };
                        readonly percentPenalty: {
                            readonly description: "If one of the parties dont have filled full amount of the future at the time of expiration, the party will be penalized. Penalty is sent to opposite party in exchanged crypto.";
                            readonly minimum: 0;
                            readonly maximum: 100;
                        };
                    };
                };
            };
        }];
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "ID of the entity.";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["account.not.exists"];
                    };
                    readonly message: {
                        readonly description: "No such account.";
                        readonly type: "string";
                        readonly examples: readonly ["No such account."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.currency.missing";
                        readonly type: "string";
                        readonly examples: readonly ["account.currency.missing"];
                    };
                    readonly message: {
                        readonly description: "No such virtual currency ${currency} for account ${account}.";
                        readonly type: "string";
                        readonly examples: readonly ["No such virtual currency ${currency} for account ${account}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "rate.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["rate.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such currency rate.";
                        readonly type: "string";
                        readonly examples: readonly ["No such currency rate."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "vc.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["vc.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such virtual currency.";
                        readonly type: "string";
                        readonly examples: readonly ["No such virtual currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "amount.format";
                        readonly type: "string";
                        readonly examples: readonly ["amount.format"];
                    };
                    readonly message: {
                        readonly description: "Amount has incorrect format.";
                        readonly type: "string";
                        readonly examples: readonly ["Amount has incorrect format."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "trade.currency1AccountId.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["trade.currency1AccountId.not.exists"];
                    };
                    readonly message: {
                        readonly description: "Unable to find currency1 account ${trade.currency1AccountId}.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find currency1 account ${trade.currency1AccountId}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "trade.currency1AccountId.frozen";
                        readonly type: "string";
                        readonly examples: readonly ["trade.currency1AccountId.frozen"];
                    };
                    readonly message: {
                        readonly description: "Currency1 account ${trade.currency1AccountId} is frozen, unable to perform trade.";
                        readonly type: "string";
                        readonly examples: readonly ["Currency1 account ${trade.currency1AccountId} is frozen, unable to perform trade."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "trade.feeAccount";
                        readonly type: "string";
                        readonly examples: readonly ["trade.feeAccount"];
                    };
                    readonly message: {
                        readonly description: "Unable to find fee account ${trade.feeAccountId}.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find fee account ${trade.feeAccountId}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "trade.currency.fee";
                        readonly type: "string";
                        readonly examples: readonly ["trade.currency.fee"];
                    };
                    readonly message: {
                        readonly description: "Incompatible currencies for currency1 and fee account.";
                        readonly type: "string";
                        readonly examples: readonly ["Incompatible currencies for currency1 and fee account."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "trade.currency1AccountId.customer.disabled";
                        readonly type: "string";
                        readonly examples: readonly ["trade.currency1AccountId.customer.disabled"];
                    };
                    readonly message: {
                        readonly description: "Currency1 account's customer ${currency1Account.customerId} is disabled, unable to perform exchange trade.";
                        readonly type: "string";
                        readonly examples: readonly ["Currency1 account's customer ${currency1Account.customerId} is disabled, unable to perform exchange trade."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "trade.currency2AccountId.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["trade.currency2AccountId.not.exists"];
                    };
                    readonly message: {
                        readonly description: "Unable to find currency2 account ${trade.currency2AccountId}.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find currency2 account ${trade.currency2AccountId}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "trade.currency2AccountId.frozen";
                        readonly type: "string";
                        readonly examples: readonly ["trade.currency2AccountId.frozen"];
                    };
                    readonly message: {
                        readonly description: "Currency2 account ${trade.currency2AccountId} is frozen, unable to perform trade.";
                        readonly type: "string";
                        readonly examples: readonly ["Currency2 account ${trade.currency2AccountId} is frozen, unable to perform trade."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "trade.currency2AccountId.customer.disabled";
                        readonly type: "string";
                        readonly examples: readonly ["trade.currency2AccountId.customer.disabled"];
                    };
                    readonly message: {
                        readonly description: "Currency2 account's customer ${currency2Account.customerId} is disabled, unable to perform exchange trade.";
                        readonly type: "string";
                        readonly examples: readonly ["Currency2 account's customer ${currency2Account.customerId} is disabled, unable to perform exchange trade."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "trade.currency1.pair";
                        readonly type: "string";
                        readonly examples: readonly ["trade.currency1.pair"];
                    };
                    readonly message: {
                        readonly description: "Incompatible currencies for currency1 account ${trade.currency1AccountId} and trading pair.";
                        readonly type: "string";
                        readonly examples: readonly ["Incompatible currencies for currency1 account ${trade.currency1AccountId} and trading pair."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "trade.currency2.pair";
                        readonly type: "string";
                        readonly examples: readonly ["trade.currency2.pair"];
                    };
                    readonly message: {
                        readonly description: "Incompatible currencies for currency2 account ${trade.currency2AccountId} and trading pair.";
                        readonly type: "string";
                        readonly examples: readonly ["Incompatible currencies for currency2 account ${trade.currency2AccountId} and trading pair."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "trade.currency1.balance";
                        readonly type: "string";
                        readonly examples: readonly ["trade.currency1.balance"];
                    };
                    readonly message: {
                        readonly description: "Insufficient balance on currency1 account ${trade.currency1AccountId}.";
                        readonly type: "string";
                        readonly examples: readonly ["Insufficient balance on currency1 account ${trade.currency1AccountId}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "trade.currency2.balance";
                        readonly type: "string";
                        readonly examples: readonly ["trade.currency2.balance"];
                    };
                    readonly message: {
                        readonly description: "Insufficient balance on currency2 account ${trade.currency2AccountId}.";
                        readonly type: "string";
                        readonly examples: readonly ["Insufficient balance on currency2 account ${trade.currency2AccountId}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const StoreTrcAddress: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly address: {
                    readonly maxLength: 34;
                    readonly minLength: 7;
                    readonly type: "string";
                    readonly examples: readonly ["TVAEYCmc15awaDRAjUZ1kvcHwQQaoPw2CW"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "TRC-10 Token ID or TRC-20 contract address";
                };
                readonly name: {
                    readonly maxLength: 30;
                    readonly minLength: 1;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "TRC 10/20 symbol name.";
                };
            };
            readonly required: readonly ["address", "name"];
        }];
    };
    readonly response: {
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.token.notFound";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.token.notFound"];
                    };
                    readonly message: {
                        readonly description: "No such ERC20 currency ${name}.";
                        readonly type: "string";
                        readonly examples: readonly ["No such ERC20 currency ${name}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.address.set";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.address.set"];
                    };
                    readonly message: {
                        readonly description: "ERC20 address was already set.";
                        readonly type: "string";
                        readonly examples: readonly ["ERC20 address was already set."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const StoreWithdrawal: {
    readonly body: {
        readonly properties: {
            readonly senderAccountId: {
                readonly description: "Sender account ID";
                readonly maxLength: 24;
                readonly minLength: 24;
                readonly type: "string";
                readonly examples: readonly ["5e68c66581f2ee32bc354087"];
            };
            readonly address: {
                readonly description: "Blockchain address to send assets to. For BTC, LTC, DOGE and BCH, it is possible to enter list of multiple recipient blockchain addresses as a comma separated string.";
                readonly maxLength: 10000;
                readonly minLength: 1;
                readonly type: "string";
                readonly examples: readonly ["mpTwPdF8up9kidgcAStriUPwRdnE9MRAg7"];
            };
            readonly amount: {
                readonly description: "Amount to be withdrawn to blockchain.";
                readonly maxLength: 38;
                readonly type: "string";
                readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                readonly examples: readonly ["0.001"];
            };
            readonly attr: {
                readonly description: "<p>Used to parametrize withdrawal. Used for XRP withdrawal to define destination tag of recipient, or XLM memo of the recipient, if needed.<br/>\nFor Bitcoin, Litecoin, Bitcoin Cash, used as a change address for left coins from transaction.</p>\n";
                readonly maxLength: 64;
                readonly minLength: 1;
                readonly type: "string";
                readonly examples: readonly ["12345"];
            };
            readonly compliant: {
                readonly description: "Compliance check, if withdrawal is not compliant, it will not be processed.";
                readonly type: "boolean";
                readonly examples: readonly [false];
            };
            readonly fee: {
                readonly description: "Fee to be submitted as a transaction fee to blockchain.";
                readonly type: "string";
                readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                readonly examples: readonly ["0.0005"];
            };
            readonly multipleAmounts: {
                readonly description: "For BTC, LTC, DOGE and BCH, it is possible to enter list of multiple recipient blockchain amounts. List of recipient addresses must be present in the address field and total sum of amounts must be equal to the amount field.";
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly examples: readonly ["0.1"];
                };
            };
            readonly paymentId: {
                readonly description: "Identifier of the payment, shown for created Transaction within Tatum sender account.";
                readonly maxLength: 100;
                readonly minLength: 1;
                readonly type: "string";
                readonly examples: readonly ["12345"];
            };
            readonly senderNote: {
                readonly description: "Note visible to owner of withdrawing account";
                readonly maxLength: 500;
                readonly minLength: 1;
                readonly type: "string";
                readonly examples: readonly ["Sender note"];
            };
        };
        readonly required: readonly ["amount", "senderAccountId", "address", "fee"];
        readonly type: "object";
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly properties: {
                readonly reference: {
                    readonly description: "Transaction reference of the transaction connected to this withdrawal.";
                    readonly type: "string";
                    readonly examples: readonly ["5e6be8e9e6aa436299950c41"];
                };
                readonly data: {
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly address: {
                                readonly required: readonly ["address", "currency"];
                                readonly properties: {
                                    readonly address: {
                                        readonly description: "Blockchain address.";
                                        readonly type: "string";
                                        readonly examples: readonly ["7c21ed165e294db78b95f0f181086d6f"];
                                    };
                                    readonly currency: {
                                        readonly description: "Currency of generated address. BTC, LTC, DOGE, BCH, ETH, XRP, XLM, BNB, TRX, ERC20, TRC20.";
                                        readonly type: "string";
                                        readonly examples: readonly ["BTC"];
                                    };
                                    readonly derivationKey: {
                                        readonly description: "Derivation key index for given address.";
                                        readonly format: "int32";
                                        readonly type: "integer";
                                        readonly maximum: 2147483647;
                                        readonly minimum: -2147483648;
                                    };
                                    readonly xpub: {
                                        readonly description: "Extended public key to derive address from. In case of XRP, this is account address, since address is defined as DestinationTag, which is address field. In case of XLM, this is account address, since address is defined as message, which is address field.";
                                        readonly type: "string";
                                        readonly examples: readonly ["xpub6FB4LJzdKNkkpsjggFAGS2p34G48pqjtmSktmK2Ke3k1LKqm9ULsg8bGfDakYUrdhe2EHw5uGKX9DrMbrgYnVfDwrksT4ZVQ3vmgEruo3Ka"];
                                    };
                                    readonly destinationTag: {
                                        readonly description: "In case of XRP, destinationTag is the distinguisher of the account.";
                                        readonly type: "number";
                                        readonly examples: readonly [5];
                                    };
                                    readonly memo: {
                                        readonly description: "In case of BNB, message is the distinguisher of the account.";
                                        readonly type: "string";
                                        readonly examples: readonly ["5"];
                                    };
                                    readonly message: {
                                        readonly description: "In case of XLM, message is the distinguisher of the account.";
                                        readonly type: "string";
                                        readonly examples: readonly ["5"];
                                    };
                                };
                                readonly type: "object";
                            };
                            readonly amount: {
                                readonly description: "Amount of unprocessed transaction outputs, that can be used for withdrawal. Bitcoin, Litecoin, Bitcoin Cash only.";
                                readonly type: "number";
                            };
                            readonly vIn: {
                                readonly description: "Last used unprocessed transaction output, that can be used. Bitcoin, Litecoin, Bitcoin Cash only. If -1, it indicates prepared vOut with amount to be transferred to pool address.";
                                readonly type: "string";
                            };
                            readonly vInIndex: {
                                readonly description: "Index of last used unprocessed transaction output in raw transaction, that can be used. Bitcoin, Litecoin, Bitcoin Cash only.";
                                readonly type: "integer";
                            };
                            readonly scriptPubKey: {
                                readonly type: "string";
                                readonly description: "Script of last unprocessed UTXO. Bitcoin SV only.";
                            };
                        };
                    };
                    readonly type: "array";
                };
                readonly id: {
                    readonly description: "ID of withdrawal";
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
            };
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "rate.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["rate.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such currency rate.";
                        readonly type: "string";
                        readonly examples: readonly ["No such currency rate."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.recipient.format";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.recipient.format"];
                    };
                    readonly message: {
                        readonly description: "Recipient blockchain address has incorrect format.";
                        readonly type: "string";
                        readonly examples: readonly ["Recipient blockchain address has incorrect format."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "vc.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["vc.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such virtual currency.";
                        readonly type: "string";
                        readonly examples: readonly ["No such virtual currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.failed.transaction.failed";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.failed.transaction.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to store withdrawal, it is impossible to create transaction.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to store withdrawal, it is impossible to create transaction."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.account.virtual";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.account.virtual"];
                    };
                    readonly message: {
                        readonly description: "Sender account cannot be virtual.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender account cannot be virtual."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "offchain.not.supported";
                        readonly type: "string";
                        readonly examples: readonly ["offchain.not.supported"];
                    };
                    readonly message: {
                        readonly description: "Offchain not supported for account with ${account.currency} currency.";
                        readonly type: "string";
                        readonly examples: readonly ["Offchain not supported for account with ${account.currency} currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "amount.format";
                        readonly type: "string";
                        readonly examples: readonly ["amount.format"];
                    };
                    readonly message: {
                        readonly description: "Amount has incorrect format.";
                        readonly type: "string";
                        readonly examples: readonly ["Amount has incorrect format."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "fee.format";
                        readonly type: "string";
                        readonly examples: readonly ["fee.format"];
                    };
                    readonly message: {
                        readonly description: "Fee has incorrect format.";
                        readonly type: "string";
                        readonly examples: readonly ["Fee has incorrect format."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.not.exists"];
                    };
                    readonly message: {
                        readonly description: "Unable to find sender account ${transaction.senderAccountId}.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find sender account ${transaction.senderAccountId}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.customer.disabled";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.customer.disabled"];
                    };
                    readonly message: {
                        readonly description: "Sender accounts customer ${senderAccount.customerId} is disabled, unable to perform payment.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender accounts customer ${senderAccount.customerId} is disabled, unable to perform payment."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "balance.insufficient";
                        readonly type: "string";
                        readonly examples: readonly ["balance.insufficient"];
                    };
                    readonly message: {
                        readonly description: "Insufficient balance for account ${transaction.senderAccountId} and payment amount ${transaction.amount}. Sender balance is ${senderAccount.balance.availableBalance as string}, amount is ${amount}";
                        readonly type: "string";
                        readonly examples: readonly ["Insufficient balance for account ${transaction.senderAccountId} and payment amount ${transaction.amount}. Sender balance is ${senderAccount.balance.availableBalance as string}, amount is ${amount}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "transaction.amount.btc";
                        readonly type: "string";
                        readonly examples: readonly ["transaction.amount.btc"];
                    };
                    readonly message: {
                        readonly description: "BTC|LTC|BCH|DOGE payment amount must be at least 0.00000001, not ${transaction.amount}.";
                        readonly type: "string";
                        readonly examples: readonly ["BTC|LTC|BCH|DOGE payment amount must be at least 0.00000001, not ${transaction.amount}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "transaction.amount.eth";
                        readonly type: "string";
                        readonly examples: readonly ["transaction.amount.eth"];
                    };
                    readonly message: {
                        readonly description: "ETH payment amount must be at least 0.000000000000000001, not ${transaction.amount}.";
                        readonly type: "string";
                        readonly examples: readonly ["ETH payment amount must be at least 0.000000000000000001, not ${transaction.amount}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.frozen";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.frozen"];
                    };
                    readonly message: {
                        readonly description: "Sender account ${transaction.senderAccountId} is frozen, unable to perform payment.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender account ${transaction.senderAccountId} is frozen, unable to perform payment."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.pending";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.pending"];
                    };
                    readonly message: {
                        readonly description: "Unable to prepare withdrawal, last withdrawal with id ${id} is not yet processed by blockchain.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to prepare withdrawal, last withdrawal with id ${id} is not yet processed by blockchain."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const TronDeployTrc: {
    readonly body: {
        readonly oneOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly symbol: {
                    readonly description: "The name of the token; used as an identifier within the Tatum platform and as a currency symbol on the blockchain";
                    readonly maxLength: 30;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                };
                readonly supply: {
                    readonly description: "The supply of the token";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["10000000"];
                };
                readonly decimals: {
                    readonly description: "The number of decimal places that the token has";
                    readonly minimum: 0;
                    readonly type: "number";
                    readonly examples: readonly [6];
                };
                readonly type: {
                    readonly description: "The type of the token";
                    readonly type: "string";
                    readonly enum: readonly ["TRC10", "TRC20"];
                    readonly examples: readonly ["TRC10"];
                };
                readonly description: {
                    readonly description: "The description of the token; used as a description within the Tatum platform and as a currency name on the blockchain";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["My Public Token"];
                };
                readonly address: {
                    readonly description: "The blockchain address to be assigned to the virtual account as a deposit address";
                    readonly maxLength: 34;
                    readonly minLength: 34;
                    readonly type: "string";
                    readonly examples: readonly ["TVAEYCmc15awaDRAjUZ1kvcHwQQaoPw2CW"];
                };
                readonly mnemonic: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "The mnemonic of the TRON wallet to generate the private key for the blockchain address from which the fee for deploying the smart contract will be deducted; is used together with the derivation index of this address";
                    readonly type: "string";
                    readonly examples: readonly ["urge pulp usage sister evidence arrest palm math please chief egg abuse"];
                };
                readonly index: {
                    readonly description: "The derivation index of the blockchain address from which the fee for deploying the smart contract will be deducted; is used together with the mnemonic to generate the private key for this address";
                    readonly type: "integer";
                    readonly maximum: 2147483647;
                    readonly examples: readonly [0];
                };
                readonly basePair: {
                    readonly description: "The base pair for the virtual currency that represents the token; used to calculate the value of a transaction";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["EUR"];
                };
                readonly baseRate: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly minimum: 0;
                    readonly description: "The exchange rate for the base pair; one unit of the created virtual currency equals 1 unit of <code>basePair</code>*<code>baseRate</code>";
                    readonly examples: readonly [1];
                };
                readonly url: {
                    readonly description: "(TRC-10 tokens only) The URL of the project that the token is created for<br/>Use this parameter only with TRC-10 tokens. Do <b>not</b> use this parameter with TRC-20 tokens.";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["https://mytoken.com"];
                };
                readonly customer: {
                    readonly properties: {
                        readonly externalId: {
                            readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123654"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                            readonly default: "EUR";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly customerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                        readonly providerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                    };
                    readonly required: readonly ["externalId"];
                    readonly type: "object";
                    readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                };
            };
            readonly required: readonly ["description", "supply", "symbol", "decimals", "type", "basePair", "address", "mnemonic", "index"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly symbol: {
                    readonly description: "The name of the token; used as an identifier within the Tatum platform and as a currency symbol on the blockchain";
                    readonly maxLength: 30;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                };
                readonly supply: {
                    readonly description: "The supply of the token";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["10000000"];
                };
                readonly decimals: {
                    readonly description: "The number of decimal places that the token has";
                    readonly minimum: 0;
                    readonly type: "number";
                    readonly examples: readonly [6];
                };
                readonly type: {
                    readonly description: "The type of the token";
                    readonly type: "string";
                    readonly enum: readonly ["TRC10", "TRC20"];
                    readonly examples: readonly ["TRC10"];
                };
                readonly description: {
                    readonly description: "The description of the token; used as a description within the Tatum platform and as a currency name on the blockchain";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["My Public Token"];
                };
                readonly xpub: {
                    readonly description: "The extended public key of the TRON wallet from which a deposit address for the virtual account will be generated";
                    readonly maxLength: 130;
                    readonly minLength: 130;
                    readonly type: "string";
                    readonly examples: readonly ["0244b3f40c6e570ae0032f6d7be87737a6c4e5314a4a1a82e22d0460a0d0cd794936c61f0c80dc74ace4cd04690d4eeb1aa6555883be006e1748306faa7ed3a26a"];
                };
                readonly derivationIndex: {
                    readonly description: "The derivation index to use together with the extended public key to generate the deposit address";
                    readonly format: "int32";
                    readonly type: "integer";
                    readonly maximum: 2147483647;
                    readonly examples: readonly [0];
                    readonly minimum: -2147483648;
                };
                readonly mnemonic: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "The mnemonic of the TRON wallet to generate the private key for the blockchain address from which the fee for deploying the smart contract will be deducted; is used together with the derivation index of this address";
                    readonly type: "string";
                    readonly examples: readonly ["urge pulp usage sister evidence arrest palm math please chief egg abuse"];
                };
                readonly index: {
                    readonly description: "The derivation index of the blockchain address from which the fee for deploying the smart contract will be deducted; is used together with the mnemonic to generate the private key for this address";
                    readonly type: "integer";
                    readonly maximum: 2147483647;
                    readonly examples: readonly [0];
                };
                readonly basePair: {
                    readonly description: "The base pair for the virtual currency that represents the token; used to calculate the value of a transaction";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["EUR"];
                };
                readonly baseRate: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly minimum: 0;
                    readonly description: "The exchange rate for the base pair; one unit of the created virtual currency equals 1 unit of <code>basePair</code>*<code>baseRate</code>";
                    readonly examples: readonly [1];
                };
                readonly url: {
                    readonly description: "(TRC-10 tokens only) The URL of the project that the token is created for<br/>Use this parameter only with TRC-10 tokens. Do <b>not</b> use this parameter with TRC-20 tokens.";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["https://mytoken.com"];
                };
                readonly customer: {
                    readonly properties: {
                        readonly externalId: {
                            readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123654"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                            readonly default: "EUR";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly customerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                        readonly providerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                    };
                    readonly required: readonly ["externalId"];
                    readonly type: "object";
                    readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                };
            };
            readonly required: readonly ["description", "supply", "symbol", "basePair", "decimals", "type", "xpub", "derivationIndex", "mnemonic", "index"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly symbol: {
                    readonly description: "The name of the token; used as an identifier within the Tatum platform and as a currency symbol on the blockchain";
                    readonly maxLength: 30;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                };
                readonly supply: {
                    readonly description: "The supply of the token";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["10000000"];
                };
                readonly decimals: {
                    readonly description: "The number of decimal places that the token has";
                    readonly minimum: 0;
                    readonly type: "number";
                    readonly examples: readonly [6];
                };
                readonly type: {
                    readonly description: "The type of the token";
                    readonly type: "string";
                    readonly enum: readonly ["TRC10", "TRC20"];
                    readonly examples: readonly ["TRC10"];
                };
                readonly description: {
                    readonly description: "The description of the token; used as a description within the Tatum platform and as a currency name on the blockchain";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["My Public Token"];
                };
                readonly address: {
                    readonly description: "The blockchain address to be assigned to the virtual account as a deposit address";
                    readonly maxLength: 34;
                    readonly minLength: 34;
                    readonly type: "string";
                    readonly examples: readonly ["TVAEYCmc15awaDRAjUZ1kvcHwQQaoPw2CW"];
                };
                readonly privateKey: {
                    readonly description: "The private key of the blockchain address from which the fee for deploying the smart contract will be deducted";
                    readonly type: "string";
                    readonly maxLength: 64;
                    readonly minLength: 64;
                    readonly examples: readonly ["e75d702ce00987633f8009fbb1eabb5b187cb5b50fe9179a8d6cee6bab076b66"];
                };
                readonly basePair: {
                    readonly description: "The base pair for the virtual currency that represents the token; used to calculate the value of a transaction";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["EUR"];
                };
                readonly baseRate: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly minimum: 0;
                    readonly description: "The exchange rate for the base pair; one unit of the created virtual currency equals 1 unit of <code>basePair</code>*<code>baseRate</code>";
                    readonly examples: readonly [1];
                };
                readonly url: {
                    readonly description: "(TRC-10 tokens only) The URL of the project that the token is created for<br/>Use this parameter only with TRC-10 tokens. Do <b>not</b> use this parameter with TRC-20 tokens.";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["https://mytoken.com"];
                };
                readonly customer: {
                    readonly properties: {
                        readonly externalId: {
                            readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123654"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                            readonly default: "EUR";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly customerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                        readonly providerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                    };
                    readonly required: readonly ["externalId"];
                    readonly type: "object";
                    readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                };
            };
            readonly required: readonly ["description", "supply", "symbol", "decimals", "type", "basePair", "privateKey", "address"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly symbol: {
                    readonly description: "The name of the token; used as an identifier within the Tatum platform and as a currency symbol on the blockchain";
                    readonly maxLength: 30;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                };
                readonly supply: {
                    readonly description: "The supply of the token";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["10000000"];
                };
                readonly decimals: {
                    readonly description: "The number of decimal places that the token has";
                    readonly minimum: 0;
                    readonly type: "number";
                    readonly examples: readonly [6];
                };
                readonly type: {
                    readonly description: "The type of the token";
                    readonly type: "string";
                    readonly enum: readonly ["TRC10", "TRC20"];
                    readonly examples: readonly ["TRC10"];
                };
                readonly description: {
                    readonly description: "The description of the token; used as a description within the Tatum platform and as a currency name on the blockchain";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["My Public Token"];
                };
                readonly xpub: {
                    readonly description: "The extended public key of the TRON wallet from which a deposit address for the virtual account will be generated";
                    readonly maxLength: 130;
                    readonly minLength: 130;
                    readonly type: "string";
                    readonly examples: readonly ["0244b3f40c6e570ae0032f6d7be87737a6c4e5314a4a1a82e22d0460a0d0cd794936c61f0c80dc74ace4cd04690d4eeb1aa6555883be006e1748306faa7ed3a26a"];
                };
                readonly derivationIndex: {
                    readonly description: "The derivation index to use together with the extended public key to generate the deposit address";
                    readonly format: "int32";
                    readonly type: "integer";
                    readonly maximum: 2147483647;
                    readonly examples: readonly [0];
                    readonly minimum: -2147483648;
                };
                readonly privateKey: {
                    readonly description: "The private key of the blockchain address from which the fee for deploying the smart contract will be deducted";
                    readonly type: "string";
                    readonly maxLength: 64;
                    readonly minLength: 64;
                    readonly examples: readonly ["e75d702ce00987633f8009fbb1eabb5b187cb5b50fe9179a8d6cee6bab076b66"];
                };
                readonly basePair: {
                    readonly description: "The base pair for the virtual currency that represents the token; used to calculate the value of a transaction";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["EUR"];
                };
                readonly baseRate: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly minimum: 0;
                    readonly description: "The exchange rate for the base pair; one unit of the created virtual currency equals 1 unit of <code>basePair</code>*<code>baseRate</code>";
                    readonly examples: readonly [1];
                };
                readonly url: {
                    readonly description: "(TRC-10 tokens only) The URL of the project that the token is created for<br/>Use this parameter only with TRC-10 tokens. Do <b>not</b> use this parameter with TRC-20 tokens.";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["https://mytoken.com"];
                };
                readonly customer: {
                    readonly properties: {
                        readonly externalId: {
                            readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123654"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                            readonly default: "EUR";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly customerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                        readonly providerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                    };
                    readonly required: readonly ["externalId"];
                    readonly type: "object";
                    readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                };
            };
            readonly required: readonly ["description", "supply", "symbol", "basePair", "decimals", "type", "xpub", "derivationIndex", "privateKey"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly symbol: {
                    readonly description: "The name of the token; used as an identifier within the Tatum platform and as a currency symbol on the blockchain";
                    readonly maxLength: 30;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                };
                readonly supply: {
                    readonly description: "The supply of the token";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["10000000"];
                };
                readonly decimals: {
                    readonly description: "The number of decimal places that the token has";
                    readonly minimum: 0;
                    readonly type: "number";
                    readonly examples: readonly [6];
                };
                readonly type: {
                    readonly description: "The type of the token";
                    readonly type: "string";
                    readonly enum: readonly ["TRC10", "TRC20"];
                    readonly examples: readonly ["TRC10"];
                };
                readonly description: {
                    readonly description: "The description of the token; used as a description within the Tatum platform and as a currency name on the blockchain";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["My Public Token"];
                };
                readonly address: {
                    readonly description: "The blockchain address to be assigned to the virtual account as a deposit address";
                    readonly maxLength: 34;
                    readonly minLength: 34;
                    readonly type: "string";
                    readonly examples: readonly ["TVAEYCmc15awaDRAjUZ1kvcHwQQaoPw2CW"];
                };
                readonly from: {
                    readonly description: "The blockchain address from which the fee for deploying the smart contract will be deducted";
                    readonly maxLength: 34;
                    readonly minLength: 34;
                    readonly type: "string";
                    readonly examples: readonly ["TVAEYCmc15awaDRAjUZ1kvcHwQQaoPw2CW"];
                };
                readonly signatureId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly description: "The KMS identifier of either the <b>private key</b> of the blockchain address from which the fee for deploying the smart contract will be deducted, or the <b>mnemonic</b> of the TRON wallet to generate the private key for the blockchain address from which the fee will be deducted";
                    readonly examples: readonly ["26d3883e-4e17-48b3-a0ee-09a3e484ac83"];
                };
                readonly index: {
                    readonly type: "number";
                    readonly minimum: 0;
                    readonly description: "(Only if the signature ID is mnemonic-based) The index of the address from which the fee will be deducted that was generated from the mnemonic";
                };
                readonly basePair: {
                    readonly description: "The base pair for the virtual currency that represents the token; used to calculate the value of a transaction";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["EUR"];
                };
                readonly baseRate: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly minimum: 0;
                    readonly description: "The exchange rate for the base pair; one unit of the created virtual currency equals 1 unit of <code>basePair</code>*<code>baseRate</code>";
                    readonly examples: readonly [1];
                };
                readonly url: {
                    readonly description: "(TRC-10 tokens only) The URL of the project that the token is created for<br/>Use this parameter only with TRC-10 tokens. Do <b>not</b> use this parameter with TRC-20 tokens.";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["https://mytoken.com"];
                };
                readonly customer: {
                    readonly properties: {
                        readonly externalId: {
                            readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123654"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                            readonly default: "EUR";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly customerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                        readonly providerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                    };
                    readonly required: readonly ["externalId"];
                    readonly type: "object";
                    readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                };
            };
            readonly required: readonly ["description", "supply", "symbol", "from", "decimals", "type", "basePair", "address", "signatureId"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly symbol: {
                    readonly description: "The name of the token; used as an identifier within the Tatum platform and as a currency symbol on the blockchain";
                    readonly maxLength: 30;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                };
                readonly supply: {
                    readonly description: "The supply of the token";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["10000000"];
                };
                readonly decimals: {
                    readonly description: "The number of decimal places that the token has";
                    readonly minimum: 0;
                    readonly type: "number";
                    readonly examples: readonly [6];
                };
                readonly type: {
                    readonly description: "The type of the token";
                    readonly type: "string";
                    readonly enum: readonly ["TRC10", "TRC20"];
                    readonly examples: readonly ["TRC10"];
                };
                readonly description: {
                    readonly description: "The description of the token; used as a description within the Tatum platform and as a currency name on the blockchain";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["My Public Token"];
                };
                readonly xpub: {
                    readonly description: "The extended public key of the TRON wallet from which a deposit address for the virtual account will be generated";
                    readonly maxLength: 130;
                    readonly minLength: 130;
                    readonly type: "string";
                    readonly examples: readonly ["0244b3f40c6e570ae0032f6d7be87737a6c4e5314a4a1a82e22d0460a0d0cd794936c61f0c80dc74ace4cd04690d4eeb1aa6555883be006e1748306faa7ed3a26a"];
                };
                readonly derivationIndex: {
                    readonly description: "The derivation index to use together with the extended public key to generate the deposit address";
                    readonly format: "int32";
                    readonly type: "integer";
                    readonly maximum: 2147483647;
                    readonly examples: readonly [0];
                    readonly minimum: -2147483648;
                };
                readonly from: {
                    readonly description: "The blockchain address from which the fee for deploying the smart contract will be deducted";
                    readonly maxLength: 34;
                    readonly minLength: 34;
                    readonly type: "string";
                };
                readonly signatureId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly description: "The KMS identifier of either the <b>private key</b> of the blockchain address from which the fee for deploying the smart contract will be deducted, or the <b>mnemonic</b> of the TRON wallet to generate the private key for the blockchain address from which the fee will be deducted";
                    readonly examples: readonly ["26d3883e-4e17-48b3-a0ee-09a3e484ac83"];
                };
                readonly index: {
                    readonly type: "number";
                    readonly minimum: 0;
                    readonly description: "(Only if the signature ID is mnemonic-based) The index of the address from which the fee will be deducted that was generated from the mnemonic";
                };
                readonly basePair: {
                    readonly description: "The base pair for the virtual currency that represents the token; used to calculate the value of a transaction";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["EUR"];
                };
                readonly baseRate: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly minimum: 0;
                    readonly description: "The exchange rate for the base pair; one unit of the created virtual currency equals 1 unit of <code>basePair</code>*<code>baseRate</code>";
                    readonly examples: readonly [1];
                };
                readonly url: {
                    readonly description: "(TRC-10 tokens only) The URL of the project that the token is created for<br/>Use this parameter only with TRC-10 tokens. Do <b>not</b> use this parameter with TRC-20 tokens.";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["https://mytoken.com"];
                };
                readonly customer: {
                    readonly properties: {
                        readonly externalId: {
                            readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123654"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                            readonly default: "EUR";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly customerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                        readonly providerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                    };
                    readonly required: readonly ["externalId"];
                    readonly type: "object";
                    readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                };
            };
            readonly required: readonly ["description", "supply", "symbol", "from", "decimals", "type", "basePair", "xpub", "derivationIndex", "signatureId"];
        }];
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly accountId: {
                        readonly description: "Account ID with the type of currency as created ERC20/BEP20 token symbol. Account will be unfrozen when ERC20/BEP20 contract address will be set.";
                        readonly type: "string";
                        readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    };
                    readonly txId: {
                        readonly description: "TX hash of successful transaction. From this transaction receipt contract address can be obtained.";
                        readonly type: "string";
                        readonly examples: readonly ["c83f8818db43d9ba4accfe454aa44fc33123d47a4f89d47b314d6748eb0e9bc9"];
                    };
                };
                readonly type: "object";
                readonly required: readonly ["accountId", "txId"];
            }, {
                readonly properties: {
                    readonly accountId: {
                        readonly description: "Account ID with the type of currency as created ERC20/BEP20 token symbol. Account will be unfrozen when ERC20/BEP20 contract address will be set.";
                        readonly type: "string";
                        readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    };
                    readonly signatureId: {
                        readonly description: "ID of prepared payment template to sign. This is should be stored on a client side to retrieve ID of the blockchain transaction, when signing application signs the transaction and broadcasts it to the blockchain.";
                        readonly format: "uuid";
                        readonly type: "string";
                        readonly examples: readonly ["1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6"];
                    };
                };
                readonly type: "object";
                readonly required: readonly ["accountId", "signatureId"];
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.symbol.prefix";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.symbol.prefix"];
                    };
                    readonly message: {
                        readonly description: "ERC20 token cannot start with VC_.";
                        readonly type: "string";
                        readonly examples: readonly ["ERC20 token cannot start with VC_."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.address.xpub.both";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.address.xpub.both"];
                    };
                    readonly message: {
                        readonly description: "Either xpub or address must be present, not both.";
                        readonly type: "string";
                        readonly examples: readonly ["Either xpub or address must be present, not both."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.address.xpub.missing";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.address.xpub.missing"];
                    };
                    readonly message: {
                        readonly description: "Either xpub or address must be present.";
                        readonly type: "string";
                        readonly examples: readonly ["Either xpub or address must be present."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.duplicate.name";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.duplicate.name"];
                    };
                    readonly message: {
                        readonly description: "ERC20 token with given name already exists.";
                        readonly type: "string";
                        readonly examples: readonly ["ERC20 token with given name already exists."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "customer.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["customer.not.active"];
                    };
                    readonly message: {
                        readonly description: "Customer not active.";
                        readonly type: "string";
                        readonly examples: readonly ["Customer not active."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "virtual.creation.error";
                        readonly type: "string";
                        readonly examples: readonly ["virtual.creation.error"];
                    };
                    readonly message: {
                        readonly description: "It is not possible to create virtual currency.";
                        readonly type: "string";
                        readonly examples: readonly ["It is not possible to create virtual currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["account.not.exists"];
                    };
                    readonly message: {
                        readonly description: "No such account.";
                        readonly type: "string";
                        readonly examples: readonly ["No such account."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.missing";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.missing"];
                    };
                    readonly message: {
                        readonly description: "No xpub assigned to account, it is not possible to generate address. Use assignAddress method instead.";
                        readonly type: "string";
                        readonly examples: readonly ["No xpub assigned to account, it is not possible to generate address. Use assignAddress method instead."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "xpub.used";
                        readonly type: "string";
                        readonly examples: readonly ["xpub.used"];
                    };
                    readonly message: {
                        readonly description: "XPub already used registered within Tatum";
                        readonly type: "string";
                        readonly examples: readonly ["XPub already used registered within Tatum"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "Address.index.used";
                        readonly type: "string";
                        readonly examples: readonly ["address.index.used"];
                    };
                    readonly message: {
                        readonly description: "Unable to create address, derivation index is already used.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to create address, derivation index is already used."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "offchain.not.supported";
                        readonly type: "string";
                        readonly examples: readonly ["offchain.not.supported"];
                    };
                    readonly message: {
                        readonly description: "Offchain not supported for account with ${account.currency} currency.";
                        readonly type: "string";
                        readonly examples: readonly ["Offchain not supported for account with ${account.currency} currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.incompatible";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.incompatible"];
                    };
                    readonly message: {
                        readonly description: "Xpub not compatible with account currency.";
                        readonly type: "string";
                        readonly examples: readonly ["Xpub not compatible with account currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.present";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.present"];
                    };
                    readonly message: {
                        readonly description: "Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead.";
                        readonly type: "string";
                        readonly examples: readonly ["Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                    readonly required: {
                        readonly "0": "errorCode";
                        readonly "1": "message";
                        readonly "2": "statusCode";
                    };
                    readonly type: "object";
                };
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "vc.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["vc.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such virtual currency.";
                        readonly type: "string";
                        readonly examples: readonly ["No such virtual currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "Address.used";
                        readonly type: "string";
                        readonly examples: readonly ["address.used"];
                    };
                    readonly message: {
                        readonly description: "Address and currency already in use.";
                        readonly type: "string";
                        readonly examples: readonly ["Address and currency already in use."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.present";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.present"];
                    };
                    readonly message: {
                        readonly description: "Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead.";
                        readonly type: "string";
                        readonly examples: readonly ["Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                    readonly required: {
                        readonly "0": "errorCode";
                        readonly "1": "message";
                        readonly "2": "statusCode";
                    };
                    readonly type: "object";
                };
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.erc20.unsupported";
                        readonly type: "string";
                        readonly examples: readonly ["eth.erc20.unsupported"];
                    };
                    readonly message: {
                        readonly description: "Unsupported ETH ERC20 blockchain.";
                        readonly type: "string";
                        readonly examples: readonly ["Unsupported ETH ERC20 blockchain."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "ethereum.broadcast.failed";
                        readonly type: "string";
                        readonly examples: readonly ["ethereum.broadcast.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to broadcast transaction due to ${error}.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to broadcast transaction due to ${error}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "gas.price.failed";
                        readonly type: "string";
                        readonly examples: readonly ["gas.price.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to obtain current GAS price.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to obtain current GAS price."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "ethereum.transaction.body";
                        readonly type: "string";
                        readonly examples: readonly ["ethereum.transaction.body"];
                    };
                    readonly message: {
                        readonly description: "Either currency, or tokenAddress must be defined.";
                        readonly type: "string";
                        readonly examples: readonly ["Either currency, or tokenAddress must be defined."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.transaction.gas";
                        readonly type: "string";
                        readonly examples: readonly ["eth.transaction.gas"];
                    };
                    readonly message: {
                        readonly description: "Unable to calculate gas limit for transaction. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to calculate gas limit for transaction. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.transaction.hash";
                        readonly type: "string";
                        readonly examples: readonly ["eth.transaction.hash"];
                    };
                    readonly message: {
                        readonly description: "Unable to calculate transaction hash. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to calculate transaction hash. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.transaction.sign";
                        readonly type: "string";
                        readonly examples: readonly ["eth.transaction.sign"];
                    };
                    readonly message: {
                        readonly description: "Unable to sign transaction. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to sign transaction. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const TronTransferOffchain: {
    readonly body: {
        readonly oneOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly address: {
                    readonly description: "Blockchain address to send assets";
                    readonly maxLength: 34;
                    readonly minLength: 34;
                    readonly type: "string";
                    readonly examples: readonly ["TVAEYCmc15awaDRAjUZ1kvcHwQQaoPw2CW"];
                };
                readonly amount: {
                    readonly description: "Amount to be sent in Tron.";
                    readonly maxLength: 38;
                    readonly type: "string";
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly examples: readonly ["100000"];
                };
                readonly compliant: {
                    readonly description: "Compliance check, if withdrawal is not compliant, it will not be processed.";
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                };
                readonly fromPrivateKey: {
                    readonly type: "string";
                    readonly maxLength: 64;
                    readonly minLength: 64;
                    readonly description: "Private key of sender address. Either mnemonic and index, privateKey or signature Id must be present - depends on the type of account and xpub.";
                    readonly examples: readonly ["e75d702ce00987633f8009fbb1eabb5b187cb5b50fe9179a8d6cee6bab076b66"];
                };
                readonly fee: {
                    readonly description: "Fee to be submitted as a transaction fee to blockchain. If none is set, default value of 2.5 TRX is used.";
                    readonly type: "string";
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly examples: readonly ["2.5"];
                };
                readonly paymentId: {
                    readonly description: "Identifier of the payment, shown for created Transaction within Tatum sender account.";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["1234"];
                };
                readonly senderAccountId: {
                    readonly maxLength: 24;
                    readonly minLength: 24;
                    readonly description: "Sender account ID";
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly senderNote: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "Note visible to owner of withdrawing account";
                    readonly type: "string";
                    readonly examples: readonly ["Sender note"];
                };
            };
            readonly required: readonly ["senderAccountId", "address", "amount", "fromPrivateKey"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly address: {
                    readonly description: "Blockchain address to send assets";
                    readonly maxLength: 34;
                    readonly minLength: 34;
                    readonly type: "string";
                    readonly examples: readonly ["TVAEYCmc15awaDRAjUZ1kvcHwQQaoPw2CW"];
                };
                readonly amount: {
                    readonly description: "Amount to be sent in Tron.";
                    readonly maxLength: 38;
                    readonly type: "string";
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly examples: readonly ["100000"];
                };
                readonly compliant: {
                    readonly description: "Compliance check, if withdrawal is not compliant, it will not be processed.";
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                };
                readonly fee: {
                    readonly description: "Fee to be submitted as a transaction fee to blockchain. If none is set, default value of 2.5 TRX is used.";
                    readonly type: "string";
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly examples: readonly ["2.5"];
                };
                readonly index: {
                    readonly description: "Derivation index of sender address.";
                    readonly maximum: 2147483647;
                    readonly type: "integer";
                    readonly examples: readonly [0];
                };
                readonly mnemonic: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "Mnemonic to generate private key for sender address. Either mnemonic and index, privateKey or signature Id must be present - depends on the type of account and xpub.";
                    readonly type: "string";
                    readonly examples: readonly ["urge pulp usage sister evidence arrest palm math please chief egg abuse"];
                };
                readonly paymentId: {
                    readonly description: "Identifier of the payment, shown for created Transaction within Tatum sender account.";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["1234"];
                };
                readonly senderAccountId: {
                    readonly maxLength: 24;
                    readonly minLength: 24;
                    readonly description: "Sender account ID";
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly senderNote: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "Note visible to owner of withdrawing account";
                    readonly type: "string";
                    readonly examples: readonly ["Sender note"];
                };
            };
            readonly required: readonly ["senderAccountId", "address", "amount", "mnemonic", "index"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly address: {
                    readonly description: "Blockchain address to send assets to";
                    readonly maxLength: 34;
                    readonly minLength: 34;
                    readonly type: "string";
                    readonly examples: readonly ["TVAEYCmc15awaDRAjUZ1kvcHwQQaoPw2CW"];
                };
                readonly amount: {
                    readonly description: "Amount to be sent in Tron.";
                    readonly maxLength: 38;
                    readonly type: "string";
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly examples: readonly ["100000"];
                };
                readonly compliant: {
                    readonly description: "Compliance check, if withdrawal is not compliant, it will not be processed.";
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                };
                readonly fee: {
                    readonly description: "Fee to be submitted as a transaction fee to blockchain. If none is set, default value of 2.5 TRX is used.";
                    readonly type: "string";
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly examples: readonly ["2.5"];
                };
                readonly from: {
                    readonly description: "Blockchain address to send assets from";
                    readonly maxLength: 34;
                    readonly minLength: 34;
                    readonly type: "string";
                    readonly examples: readonly ["TVAEYCmc15awaDRAjUZ1kvcHwQQaoPw2CW"];
                };
                readonly signatureId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly description: "Identifier of the mnemonic / private key associated in signing application.\nWhen hash identifies mnemonic, index must be present to represent specific account to pay from.\nPrivate key, mnemonic or signature Id must be present.\n";
                    readonly examples: readonly ["26d3883e-4e17-48b3-a0ee-09a3e484ac83"];
                };
                readonly index: {
                    readonly description: "Derivation index of sender address.";
                    readonly maximum: 2147483647;
                    readonly type: "integer";
                    readonly examples: readonly [0];
                };
                readonly paymentId: {
                    readonly description: "Identifier of the payment, shown for created Transaction within Tatum sender account.";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["1234"];
                };
                readonly senderAccountId: {
                    readonly maxLength: 24;
                    readonly minLength: 24;
                    readonly description: "Sender account ID";
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly senderNote: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "Note visible to owner of withdrawing account";
                    readonly type: "string";
                    readonly examples: readonly ["Sender note"];
                };
            };
            readonly required: readonly ["senderAccountId", "from", "address", "signatureId", "amount"];
        }];
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly oneOf: readonly [{
                readonly type: "object";
                readonly properties: {
                    readonly id: {
                        readonly description: "ID of withdrawal. If transaction is not valid in blockchain, use this id to cancel withdrawal.";
                        readonly type: "string";
                        readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    };
                    readonly txId: {
                        readonly description: "TX hash of successful transaction.";
                        readonly type: "string";
                        readonly examples: readonly ["c83f8818db43d9ba4accfe454aa44fc33123d47a4f89d47b314d6748eb0e9bc9"];
                    };
                    readonly completed: {
                        readonly description: "If set to \"true\", the withdrawal has been completed in the virtual account; if set to \"false\", the withdrawal has not been completed and you have to <a href=\"https://apidoc.tatum.io/tag/Withdrawal#operation/completeWithdrawal\" target=\"_blank\">complete it manually</a>";
                        readonly type: "boolean";
                        readonly examples: readonly [true];
                    };
                };
                readonly required: readonly ["txId", "id", "completed"];
            }, {
                readonly type: "object";
                readonly properties: {
                    readonly signatureId: {
                        readonly description: "ID of prepared payment template to sign. This is should be stored on a client side to retrieve ID of the blockchain transaction, when signing application signs the transaction and broadcasts it to the blockchain.";
                        readonly format: "uuid";
                        readonly type: "string";
                        readonly examples: readonly ["1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6"];
                    };
                };
                readonly required: readonly ["id", "signatureId"];
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.missing";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.missing"];
                    };
                    readonly message: {
                        readonly description: "No such withdrawal.";
                        readonly type: "string";
                        readonly examples: readonly ["No such withdrawal."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "rate.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["rate.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such currency rate.";
                        readonly type: "string";
                        readonly examples: readonly ["No such currency rate."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "vc.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["vc.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such virtual currency.";
                        readonly type: "string";
                        readonly examples: readonly ["No such virtual currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.recipient.format";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.recipient.format"];
                    };
                    readonly message: {
                        readonly description: "Recipient blockchain address has incorrect format.";
                        readonly type: "string";
                        readonly examples: readonly ["Recipient blockchain address has incorrect format."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.failed.transaction.failed";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.failed.transaction.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to store withdrawal, it is impossible to create transaction.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to store withdrawal, it is impossible to create transaction."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.account.virtual";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.account.virtual"];
                    };
                    readonly message: {
                        readonly description: "Sender account cannot be virtual.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender account cannot be virtual."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "offchain.not.supported";
                        readonly type: "string";
                        readonly examples: readonly ["offchain.not.supported"];
                    };
                    readonly message: {
                        readonly description: "Offchain not supported for account with ${account.currency} currency.";
                        readonly type: "string";
                        readonly examples: readonly ["Offchain not supported for account with ${account.currency} currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "amount.format";
                        readonly type: "string";
                        readonly examples: readonly ["amount.format"];
                    };
                    readonly message: {
                        readonly description: "Amount has incorrect format.";
                        readonly type: "string";
                        readonly examples: readonly ["Amount has incorrect format."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "fee.format";
                        readonly type: "string";
                        readonly examples: readonly ["fee.format"];
                    };
                    readonly message: {
                        readonly description: "Fee has incorrect format.";
                        readonly type: "string";
                        readonly examples: readonly ["Fee has incorrect format."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.not.cancelled.transaction.failed";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.not.cancelled.transaction.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to broadcast transaction, and impossible to cancel withdrawal. ID is attached, \"${withdrawalId}\", cancel it manually.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to broadcast transaction, and impossible to cancel withdrawal. ID is attached, \"${withdrawalId}\", cancel it manually."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.prepare.failed";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.prepare.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to prepare transaction, withdrawal cancelled.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to prepare transaction, withdrawal cancelled."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.not.exists"];
                    };
                    readonly message: {
                        readonly description: "Unable to find sender account ${transaction.senderAccountId}.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find sender account ${transaction.senderAccountId}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.customer.disabled";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.customer.disabled"];
                    };
                    readonly message: {
                        readonly description: "Sender accounts customer ${senderAccount.customerId} is disabled, unable to perform payment.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender accounts customer ${senderAccount.customerId} is disabled, unable to perform payment."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "balance.insufficient";
                        readonly type: "string";
                        readonly examples: readonly ["balance.insufficient"];
                    };
                    readonly message: {
                        readonly description: "Insufficient balance for account ${transaction.senderAccountId} and payment amount ${transaction.amount}. Sender balance is ${senderAccount.balance.availableBalance as string}, amount is ${amount}";
                        readonly type: "string";
                        readonly examples: readonly ["Insufficient balance for account ${transaction.senderAccountId} and payment amount ${transaction.amount}. Sender balance is ${senderAccount.balance.availableBalance as string}, amount is ${amount}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "amount.btc";
                        readonly type: "string";
                        readonly examples: readonly ["amount.btc"];
                    };
                    readonly message: {
                        readonly description: "BTC|LTC|BCH|DOGE payment amount must be at least 0.00000001, not ${transaction.amount}.";
                        readonly type: "string";
                        readonly examples: readonly ["BTC|LTC|BCH|DOGE payment amount must be at least 0.00000001, not ${transaction.amount}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "amount.eth";
                        readonly type: "string";
                        readonly examples: readonly ["amount.eth"];
                    };
                    readonly message: {
                        readonly description: "ETH payment amount must be at least 0.000000000001, not ${transaction.amount}.";
                        readonly type: "string";
                        readonly examples: readonly ["ETH payment amount must be at least 0.000000000001, not ${transaction.amount}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.frozen";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.frozen"];
                    };
                    readonly message: {
                        readonly description: "Sender account ${transaction.senderAccountId} is frozen, unable to perform payment.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender account ${transaction.senderAccountId} is frozen, unable to perform payment."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.pending";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.pending"];
                    };
                    readonly message: {
                        readonly description: "Unable to prepare withdrawal, last withdrawal with id ${id} is not yet processed by blockchain.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to prepare withdrawal, last withdrawal with id ${id} is not yet processed by blockchain."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "private.mnemonic.missing";
                        readonly type: "string";
                        readonly examples: readonly ["private.mnemonic.missing"];
                    };
                    readonly message: {
                        readonly description: "Either mnemonic and index or private key must be present.";
                        readonly type: "string";
                        readonly examples: readonly ["Either mnemonic and index or private key must be present."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.erc20.unsupported";
                        readonly type: "string";
                        readonly examples: readonly ["eth.erc20.unsupported"];
                    };
                    readonly message: {
                        readonly description: "Unsupported ETH ERC20 blockchain.";
                        readonly type: "string";
                        readonly examples: readonly ["Unsupported ETH ERC20 blockchain."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "ethereum.broadcast.failed";
                        readonly type: "string";
                        readonly examples: readonly ["ethereum.broadcast.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to broadcast transaction due to ${error}.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to broadcast transaction due to ${error}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "gas.price.failed";
                        readonly type: "string";
                        readonly examples: readonly ["gas.price.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to obtain current GAS price.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to obtain current GAS price."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "ethereum.transaction.body";
                        readonly type: "string";
                        readonly examples: readonly ["ethereum.transaction.body"];
                    };
                    readonly message: {
                        readonly description: "Either currency, or tokenAddress must be defined.";
                        readonly type: "string";
                        readonly examples: readonly ["Either currency, or tokenAddress must be defined."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.transaction.gas";
                        readonly type: "string";
                        readonly examples: readonly ["eth.transaction.gas"];
                    };
                    readonly message: {
                        readonly description: "Unable to calculate gas limit for transaction. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to calculate gas limit for transaction. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.transaction.hash";
                        readonly type: "string";
                        readonly examples: readonly ["eth.transaction.hash"];
                    };
                    readonly message: {
                        readonly description: "Unable to calculate transaction hash. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to calculate transaction hash. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.transaction.sign";
                        readonly type: "string";
                        readonly examples: readonly ["eth.transaction.sign"];
                    };
                    readonly message: {
                        readonly description: "Unable to sign transaction. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to sign transaction. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const UnblockAmountWithTransaction: {
    readonly body: {
        readonly properties: {
            readonly recipientAccountId: {
                readonly description: "Internal recipient account ID within Tatum platform";
                readonly maxLength: 24;
                readonly minLength: 24;
                readonly type: "string";
                readonly examples: readonly ["5e6645712b55823de7ea82f2"];
            };
            readonly amount: {
                readonly description: "Amount to be sent. Amount can be smaller then the blocked amount.";
                readonly maxLength: 38;
                readonly type: "string";
                readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                readonly examples: readonly ["5"];
            };
            readonly anonymous: {
                readonly default: false;
                readonly description: "Anonymous transaction does not show sender account to recipient, default is false";
                readonly type: "boolean";
                readonly examples: readonly [false];
            };
            readonly compliant: {
                readonly description: "Enable compliant checks. Transaction will not be processed, if compliant check fails.";
                readonly type: "boolean";
                readonly examples: readonly [false];
            };
            readonly transactionCode: {
                readonly description: "For bookkeeping to distinct transaction purpose.";
                readonly maxLength: 100;
                readonly minLength: 1;
                readonly type: "string";
                readonly examples: readonly ["1_01_EXTERNAL_CODE"];
            };
            readonly paymentId: {
                readonly description: "Payment ID, External identifier of the payment, which can be used to pair transactions within Tatum accounts.";
                readonly maxLength: 100;
                readonly minLength: 1;
                readonly type: "string";
                readonly examples: readonly ["9625"];
            };
            readonly recipientNote: {
                readonly description: "Note visible to both, sender and recipient";
                readonly maxLength: 500;
                readonly minLength: 1;
                readonly type: "string";
                readonly examples: readonly ["Private note"];
            };
            readonly baseRate: {
                readonly type: "number";
                readonly default: 1;
                readonly minimum: 0;
                readonly description: "Exchange rate of the base pair. Only applicable for Tatum's Virtual currencies Ledger transactions. Override default exchange rate for the Virtual Currency.";
                readonly examples: readonly [1];
            };
            readonly senderNote: {
                readonly description: "Note visible to sender";
                readonly maxLength: 500;
                readonly minLength: 1;
                readonly type: "string";
                readonly examples: readonly ["Sender note"];
            };
        };
        readonly required: readonly ["amount", "recipientAccountId"];
        readonly type: "object";
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["5e6be89ee6aa436299950c3f"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Blockage ID";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly properties: {
                readonly reference: {
                    readonly description: "The internal reference to the transaction (a unique identifier of the transaction within the virtual account); if the transaction fails, use this reference to search through the logs";
                    readonly type: "string";
                    readonly examples: readonly ["0c64cc04-5412-4e57-a51c-ee5727939bcb"];
                };
            };
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "blockage.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["blockage.not.exists"];
                    };
                    readonly message: {
                        readonly description: "No such blockage.";
                        readonly type: "string";
                        readonly examples: readonly ["No such blockage."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "blockage.amount.exceeded";
                        readonly type: "string";
                        readonly examples: readonly ["blockage.amount.exceeded"];
                    };
                    readonly message: {
                        readonly description: "Amount to transfer is greater then amount of the blockage.";
                        readonly type: "string";
                        readonly examples: readonly ["Amount to transfer is greater then amount of the blockage."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "amount.format";
                        readonly type: "string";
                        readonly examples: readonly ["amount.format"];
                    };
                    readonly message: {
                        readonly description: "Amount has incorrect format.";
                        readonly type: "string";
                        readonly examples: readonly ["Amount has incorrect format."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.not.exists"];
                    };
                    readonly message: {
                        readonly description: "Unable to find sender account ${transaction.senderAccountId}.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find sender account ${transaction.senderAccountId}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "compliance.country.btc.not.supported";
                        readonly type: "string";
                        readonly examples: readonly ["compliance.country.btc.not.supported"];
                    };
                    readonly message: {
                        readonly description: "Customer country not supported for BTC.";
                        readonly type: "string";
                        readonly examples: readonly ["Customer country not supported for BTC."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "compliance.country.eth.not.supported";
                        readonly type: "string";
                        readonly examples: readonly ["compliance.country.eth.not.supported"];
                    };
                    readonly message: {
                        readonly description: "Customer country not supported for ETH.";
                        readonly type: "string";
                        readonly examples: readonly ["Customer country not supported for ETH."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "rate.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["rate.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such currency rate.";
                        readonly type: "string";
                        readonly examples: readonly ["No such currency rate."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "vc.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["vc.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such virtual currency.";
                        readonly type: "string";
                        readonly examples: readonly ["No such virtual currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.frozen";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.frozen"];
                    };
                    readonly message: {
                        readonly description: "Sender account ${transaction.senderAccountId} is frozen, unable to perform payment.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender account ${transaction.senderAccountId} is frozen, unable to perform payment."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.customer.disabled";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.customer.disabled"];
                    };
                    readonly message: {
                        readonly description: "Sender accounts customer ${senderAccount.customerId} is disabled, unable to perform payment.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender accounts customer ${senderAccount.customerId} is disabled, unable to perform payment."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "recipientAccount.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["recipientAccount.not.exists"];
                    };
                    readonly message: {
                        readonly description: "Unable to find recipient account ${transaction.recipientAccountId}.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find recipient account ${transaction.recipientAccountId}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "transaction.currency.incompatible";
                        readonly type: "string";
                        readonly examples: readonly ["transaction.currency.incompatible"];
                    };
                    readonly message: {
                        readonly description: "Incompatible currencies for sender account ${transaction.senderAccountId} and recipient account ${transaction.recipientAccountId}.";
                        readonly type: "string";
                        readonly examples: readonly ["Incompatible currencies for sender account ${transaction.senderAccountId} and recipient account ${transaction.recipientAccountId}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "balance.insufficient";
                        readonly type: "string";
                        readonly examples: readonly ["balance.insufficient"];
                    };
                    readonly message: {
                        readonly description: "Insufficient balance for account ${transaction.senderAccountId} and payment amount ${transaction.amount}. Sender balance is ${senderAccount.balance.availableBalance as string}, amount is ${amount}";
                        readonly type: "string";
                        readonly examples: readonly ["Insufficient balance for account ${transaction.senderAccountId} and payment amount ${transaction.amount}. Sender balance is ${senderAccount.balance.availableBalance as string}, amount is ${amount}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "amount.btc";
                        readonly type: "string";
                        readonly examples: readonly ["amount.btc"];
                    };
                    readonly message: {
                        readonly description: "BTC|LTC|BCH|DOGE payment amount must be at least 0.00000001, not ${transaction.amount}.";
                        readonly type: "string";
                        readonly examples: readonly ["BTC|LTC|BCH|DOGE payment amount must be at least 0.00000001, not ${transaction.amount}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "amount.eth";
                        readonly type: "string";
                        readonly examples: readonly ["amount.eth"];
                    };
                    readonly message: {
                        readonly description: "ETH payment amount must be at least 0.000000000001, not ${transaction.amount}.";
                        readonly type: "string";
                        readonly examples: readonly ["ETH payment amount must be at least 0.000000000001, not ${transaction.amount}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "transaction.not.compliant";
                        readonly type: "string";
                        readonly examples: readonly ["transaction.not.compliant"];
                    };
                    readonly message: {
                        readonly description: "Transaction not compliant, recipient account customer country is not defined.";
                        readonly type: "string";
                        readonly examples: readonly ["Transaction not compliant, recipient account customer country is not defined."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const UnfreezeAccount: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Account ID";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["account.not.exists"];
                    };
                    readonly message: {
                        readonly description: "No such account.";
                        readonly type: "string";
                        readonly examples: readonly ["No such account."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.not.frozen";
                        readonly type: "string";
                        readonly examples: readonly ["account.not.frozen"];
                    };
                    readonly message: {
                        readonly description: "Unable to unfreeze unfrozen account.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to unfreeze unfrozen account."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const UpdateAccountByAccountId: {
    readonly body: {
        readonly properties: {
            readonly accountCode: {
                readonly description: "For bookkeeping to distinct account purpose.";
                readonly maxLength: 50;
                readonly minLength: 1;
                readonly type: "string";
                readonly examples: readonly ["AC_1011_B"];
            };
            readonly accountNumber: {
                readonly description: "Account number from external system.";
                readonly maxLength: 50;
                readonly minLength: 1;
                readonly type: "string";
                readonly examples: readonly ["123456"];
            };
        };
        readonly type: "object";
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Account ID";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "account.not.exists";
                    readonly type: "string";
                    readonly examples: readonly ["account.not.exists"];
                };
                readonly message: {
                    readonly description: "No such account.";
                    readonly type: "string";
                    readonly examples: readonly ["No such account."];
                };
                readonly statusCode: {
                    readonly description: "403";
                    readonly type: "number";
                    readonly examples: readonly [403];
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const UpdateCurrency: {
    readonly body: {
        readonly properties: {
            readonly name: {
                readonly description: "Virtual currency name, which will be updated. It is not possible to update the name of the virtual currency.";
                readonly maxLength: 30;
                readonly pattern: "^[a-zA-Z0-9_]+$";
                readonly minLength: 1;
                readonly type: "string";
                readonly examples: readonly ["VC_VIRTUAL"];
            };
            readonly baseRate: {
                readonly type: "number";
                readonly default: 1;
                readonly minimum: 0;
                readonly description: "Exchange rate of the base pair. Each unit of the created curency will represent value of baseRate*1 basePair.";
                readonly examples: readonly [1];
            };
            readonly basePair: {
                readonly description: "Base pair for virtual currency. Transaction value will be calculated according to this base pair. e.g. 1 VC_VIRTUAL is equal to 1 BTC, if basePair is set to BTC.";
                readonly type: "string";
                readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                readonly examples: readonly ["EUR"];
            };
        };
        readonly required: readonly ["name"];
        readonly type: "object";
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "vc.not.found";
                    readonly type: "string";
                    readonly examples: readonly ["vc.not.found"];
                };
                readonly message: {
                    readonly description: "No such virtual currency.";
                    readonly type: "string";
                    readonly examples: readonly ["No such virtual currency."];
                };
                readonly statusCode: {
                    readonly description: "403";
                    readonly type: "number";
                    readonly examples: readonly [403];
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const UpdateCustomer: {
    readonly body: {
        readonly properties: {
            readonly externalId: {
                readonly description: "External customer ID. If not set, it will not be updated.";
                readonly maxLength: 100;
                readonly minLength: 1;
                readonly type: "string";
                readonly examples: readonly ["123654"];
            };
            readonly accountingCurrency: {
                readonly description: "All transaction will be accounted in this currency for all accounts. Currency can be overridden per account level. If not set, it will not be updated. ISO-4217";
                readonly type: "string";
                readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                readonly examples: readonly ["USD"];
            };
            readonly customerCountry: {
                readonly description: "Country customer has to be compliant with. If not set, it will not be updated. ISO-3166-1.";
                readonly type: "string";
                readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AO", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BQ", "BR", "BL", "BM", "BN", "BO", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                readonly examples: readonly ["US"];
            };
            readonly providerCountry: {
                readonly description: "Country service provider has to be compliant with. If not set, it will not be updated. ISO-3166-1";
                readonly type: "string";
                readonly enum: readonly ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AO", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BQ", "BR", "BL", "BM", "BN", "BO", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
                readonly examples: readonly ["US"];
            };
        };
        readonly type: "object";
        readonly required: readonly ["externalId"];
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly maxLength: 50;
                    readonly minLength: 10;
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Customer internal ID";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly required: readonly ["active", "id", "externalId", "enabled"];
            readonly properties: {
                readonly externalId: {
                    readonly description: "Customer external ID.";
                    readonly type: "string";
                    readonly examples: readonly ["651234"];
                };
                readonly id: {
                    readonly description: "Customer internal ID within Tatum.";
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly enabled: {
                    readonly description: "Indicates whether customer is enabled or not";
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                };
                readonly active: {
                    readonly description: "Indicates whether customer is active or not";
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                };
                readonly accountingCurrency: {
                    readonly description: "All transaction will be accounted in this currency for all accounts of the customer. Currency can be overridden per account level. ISO-4217\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BTN` `BWP` `BYN` `BYR` `BZD` `CAD` `CDF` `CHF` `CLF` `CLP` `CNY` `COP` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DOGE` `DZD` `EGP` `ERN` `ETB` `ETH` `EUR` `FJD` `FKP` `FLOW` `FUSD` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `IMP` `INR` `IQD` `IRR` `ISK` `JEP` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SHP` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XCD` `XDR` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZMW` `ZWL`";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["USD"];
                };
                readonly customerCountry: {
                    readonly description: "Country customer has to be compliant with";
                    readonly type: "string";
                    readonly examples: readonly ["US"];
                };
                readonly providerCountry: {
                    readonly description: "Country service provider has to be compliant with";
                    readonly type: "string";
                    readonly examples: readonly ["US"];
                };
            };
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "customer.internal.not.exists";
                    readonly type: "string";
                    readonly examples: readonly ["customer.internal.not.exists"];
                };
                readonly message: {
                    readonly description: "No such customer.";
                    readonly type: "string";
                    readonly examples: readonly ["No such customer."];
                };
                readonly statusCode: {
                    readonly description: "403";
                    readonly type: "number";
                    readonly examples: readonly [403];
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const XdcDeployErc20: {
    readonly body: {
        readonly oneOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly symbol: {
                    readonly description: "The name of the token; used as an identifier within the Tatum platform and as a currency symbol on the blockchain";
                    readonly maxLength: 30;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                };
                readonly supply: {
                    readonly description: "The supply of the token";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["10000000"];
                };
                readonly description: {
                    readonly description: "The description of the token; used as a description within the Tatum platform and as a currency name on the blockchain";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["My Public Token"];
                };
                readonly address: {
                    readonly description: "The blockchain address to be assigned to the virtual account as a deposit address";
                    readonly maxLength: 42;
                    readonly minLength: 42;
                    readonly type: "string";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly mnemonic: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "The mnemonic to generate the private key for the blockchain address from which the fee for deploying the smart contract will be deducted; is used together with the derivation index of this address";
                    readonly type: "string";
                    readonly examples: readonly ["urge pulp usage sister evidence arrest palm math please chief egg abuse"];
                };
                readonly index: {
                    readonly description: "The derivation index of the blockchain address from which the fee for deploying the smart contract will be deducted; is used together with the mnemonic to generate the private key for this address";
                    readonly type: "integer";
                    readonly maximum: 2147483647;
                    readonly examples: readonly [0];
                };
                readonly basePair: {
                    readonly description: "The base pair for the virtual currency that represents the token; used to calculate the value of a transaction";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["EUR"];
                };
                readonly baseRate: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly minimum: 0;
                    readonly description: "The exchange rate for the base pair; one unit of the created virtual currency equals 1 unit of <code>basePair</code>*<code>baseRate</code>";
                    readonly examples: readonly [1];
                };
                readonly nonce: {
                    readonly type: "number";
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                    readonly minimum: 0;
                };
                readonly customer: {
                    readonly properties: {
                        readonly externalId: {
                            readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123654"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                            readonly default: "EUR";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly customerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                        readonly providerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                    };
                    readonly required: readonly ["externalId"];
                    readonly type: "object";
                    readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                };
            };
            readonly required: readonly ["description", "supply", "symbol", "basePair", "address", "mnemonic", "index"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly symbol: {
                    readonly description: "The name of the token; used as an identifier within the Tatum platform and as a currency symbol on the blockchain";
                    readonly maxLength: 30;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                };
                readonly supply: {
                    readonly description: "The supply of the token";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["10000000"];
                };
                readonly description: {
                    readonly description: "The description of the token; used as a description within the Tatum platform and as a currency name on the blockchain";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["My Public Token"];
                };
                readonly xpub: {
                    readonly description: "The extended public key from which a deposit address for the virtual account will be generated";
                    readonly maxLength: 150;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["xpub6EsCk1uU6cJzqvP9CdsTiJwT2rF748YkPnhv5Qo8q44DG7nn2vbyt48YRsNSUYS44jFCW9gwvD9kLQu9AuqXpTpM1c5hgg9PsuBLdeNncid"];
                };
                readonly derivationIndex: {
                    readonly description: "The derivation index to use together with the extended public key to generate the deposit address";
                    readonly format: "int32";
                    readonly type: "integer";
                    readonly maximum: 2147483647;
                    readonly examples: readonly [0];
                    readonly minimum: -2147483648;
                };
                readonly mnemonic: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "The mnemonic to generate the private key for the blockchain address from which the fee for deploying the smart contract will be deducted; is used together with the derivation index of this address";
                    readonly type: "string";
                    readonly examples: readonly ["urge pulp usage sister evidence arrest palm math please chief egg abuse"];
                };
                readonly index: {
                    readonly description: "The derivation index of the blockchain address from which the fee for deploying the smart contract will be deducted; is used together with the mnemonic to generate the private key for this address";
                    readonly type: "integer";
                    readonly maximum: 2147483647;
                    readonly examples: readonly [0];
                };
                readonly basePair: {
                    readonly description: "The base pair for the virtual currency that represents the token; used to calculate the value of a transaction";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["EUR"];
                };
                readonly baseRate: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly minimum: 0;
                    readonly description: "The exchange rate for the base pair; one unit of the created virtual currency equals 1 unit of <code>basePair</code>*<code>baseRate</code>";
                    readonly examples: readonly [1];
                };
                readonly nonce: {
                    readonly type: "number";
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                    readonly minimum: 0;
                };
                readonly customer: {
                    readonly properties: {
                        readonly externalId: {
                            readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123654"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                            readonly default: "EUR";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly customerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                        readonly providerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                    };
                    readonly required: readonly ["externalId"];
                    readonly type: "object";
                    readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                };
            };
            readonly required: readonly ["description", "supply", "symbol", "basePair", "xpub", "derivationIndex", "mnemonic", "index"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly symbol: {
                    readonly description: "The name of the token; used as an identifier within the Tatum platform and as a currency symbol on the blockchain";
                    readonly maxLength: 30;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                };
                readonly supply: {
                    readonly description: "The supply of the token";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["10000000"];
                };
                readonly description: {
                    readonly description: "The description of the token; used as a description within the Tatum platform and as a currency name on the blockchain";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["My Public Token"];
                };
                readonly address: {
                    readonly description: "The blockchain address to be assigned to the virtual account as a deposit address";
                    readonly maxLength: 42;
                    readonly minLength: 42;
                    readonly type: "string";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly privateKey: {
                    readonly description: "The private key of the blockchain address from which the fee for deploying the smart contract will be deducted";
                    readonly type: "string";
                    readonly maxLength: 66;
                    readonly minLength: 66;
                    readonly examples: readonly ["0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2"];
                };
                readonly basePair: {
                    readonly description: "The base pair for the virtual currency that represents the token; used to calculate the value of a transaction";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["EUR"];
                };
                readonly baseRate: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly minimum: 0;
                    readonly description: "The exchange rate for the base pair; one unit of the created virtual currency equals 1 unit of <code>basePair</code>*<code>baseRate</code>";
                    readonly examples: readonly [1];
                };
                readonly nonce: {
                    readonly type: "number";
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                    readonly minimum: 0;
                };
                readonly customer: {
                    readonly properties: {
                        readonly externalId: {
                            readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123654"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                            readonly default: "EUR";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly customerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                        readonly providerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                    };
                    readonly required: readonly ["externalId"];
                    readonly type: "object";
                    readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                };
            };
            readonly required: readonly ["description", "supply", "symbol", "basePair", "privateKey", "address"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly symbol: {
                    readonly description: "The name of the token; used as an identifier within the Tatum platform and as a currency symbol on the blockchain";
                    readonly maxLength: 30;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                };
                readonly supply: {
                    readonly description: "The supply of the token";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["10000000"];
                };
                readonly description: {
                    readonly description: "The description of the token; used as a description within the Tatum platform and as a currency name on the blockchain";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["My Public Token"];
                };
                readonly xpub: {
                    readonly description: "The extended public key from which a deposit address for the virtual account will be generated";
                    readonly maxLength: 150;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["xpub6EsCk1uU6cJzqvP9CdsTiJwT2rF748YkPnhv5Qo8q44DG7nn2vbyt48YRsNSUYS44jFCW9gwvD9kLQu9AuqXpTpM1c5hgg9PsuBLdeNncid"];
                };
                readonly derivationIndex: {
                    readonly description: "The derivation index to use together with the extended public key to generate the deposit address";
                    readonly format: "int32";
                    readonly type: "integer";
                    readonly maximum: 2147483647;
                    readonly examples: readonly [0];
                    readonly minimum: -2147483648;
                };
                readonly privateKey: {
                    readonly description: "The private key of the blockchain address from which the fee for deploying the smart contract will be deducted";
                    readonly type: "string";
                    readonly maxLength: 66;
                    readonly minLength: 66;
                    readonly examples: readonly ["0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2"];
                };
                readonly basePair: {
                    readonly description: "The base pair for the virtual currency that represents the token; used to calculate the value of a transaction";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["EUR"];
                };
                readonly baseRate: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly minimum: 0;
                    readonly description: "The exchange rate for the base pair; one unit of the created virtual currency equals 1 unit of <code>basePair</code>*<code>baseRate</code>";
                    readonly examples: readonly [1];
                };
                readonly nonce: {
                    readonly type: "number";
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                    readonly minimum: 0;
                };
                readonly customer: {
                    readonly properties: {
                        readonly externalId: {
                            readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123654"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                            readonly default: "EUR";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly customerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                        readonly providerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                    };
                    readonly required: readonly ["externalId"];
                    readonly type: "object";
                    readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                };
            };
            readonly required: readonly ["description", "supply", "symbol", "basePair", "xpub", "derivationIndex", "privateKey"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly symbol: {
                    readonly description: "The name of the token; used as an identifier within the Tatum platform and as a currency symbol on the blockchain";
                    readonly maxLength: 30;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                };
                readonly supply: {
                    readonly description: "The supply of the token";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["10000000"];
                };
                readonly description: {
                    readonly description: "The description of the token; used as a description within the Tatum platform and as a currency name on the blockchain";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["My Public Token"];
                };
                readonly address: {
                    readonly description: "The blockchain address to be assigned to the virtual account as a deposit address";
                    readonly maxLength: 42;
                    readonly minLength: 42;
                    readonly type: "string";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly signatureId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly description: "The KMS identifier of either the <b>private key</b> of the blockchain address from which the fee for deploying the smart contract will be deducted, or the <b>mnemonic</b> to generate the private key for the blockchain address from which the fee will be deducted";
                    readonly examples: readonly ["26d3883e-4e17-48b3-a0ee-09a3e484ac83"];
                };
                readonly index: {
                    readonly type: "number";
                    readonly minimum: 0;
                    readonly description: "(Only if the signature ID is mnemonic-based) The index of the address from which the fee will be deducted that was generated from the mnemonic";
                };
                readonly basePair: {
                    readonly description: "The base pair for the virtual currency that represents the token; used to calculate the value of a transaction";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["EUR"];
                };
                readonly baseRate: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly minimum: 0;
                    readonly description: "The exchange rate for the base pair; one unit of the created virtual currency equals 1 unit of <code>basePair</code>*<code>baseRate</code>";
                    readonly examples: readonly [1];
                };
                readonly nonce: {
                    readonly type: "number";
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                    readonly minimum: 0;
                };
                readonly customer: {
                    readonly properties: {
                        readonly externalId: {
                            readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123654"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                            readonly default: "EUR";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly customerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                        readonly providerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                    };
                    readonly required: readonly ["externalId"];
                    readonly type: "object";
                    readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                };
            };
            readonly required: readonly ["description", "supply", "symbol", "basePair", "address", "signatureId"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly symbol: {
                    readonly description: "The name of the token; used as an identifier within the Tatum platform and as a currency symbol on the blockchain";
                    readonly maxLength: 30;
                    readonly pattern: "^[a-zA-Z0-9_]+$";
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["MY_TOKEN"];
                };
                readonly supply: {
                    readonly description: "The supply of the token";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["10000000"];
                };
                readonly description: {
                    readonly description: "The description of the token; used as a description within the Tatum platform and as a currency name on the blockchain";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["My Public Token"];
                };
                readonly xpub: {
                    readonly description: "The extended public key from which a deposit address for the virtual account will be generated";
                    readonly maxLength: 150;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["xpub6EsCk1uU6cJzqvP9CdsTiJwT2rF748YkPnhv5Qo8q44DG7nn2vbyt48YRsNSUYS44jFCW9gwvD9kLQu9AuqXpTpM1c5hgg9PsuBLdeNncid"];
                };
                readonly derivationIndex: {
                    readonly description: "The derivation index to use together with the extended public key to generate the deposit address";
                    readonly format: "int32";
                    readonly type: "integer";
                    readonly maximum: 2147483647;
                    readonly examples: readonly [0];
                    readonly minimum: -2147483648;
                };
                readonly signatureId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly description: "The KMS identifier of either the <b>private key</b> of the blockchain address from which the fee for deploying the smart contract will be deducted, or the <b>mnemonic</b> to generate the private key for the blockchain address from which the fee will be deducted";
                    readonly examples: readonly ["26d3883e-4e17-48b3-a0ee-09a3e484ac83"];
                };
                readonly index: {
                    readonly type: "number";
                    readonly minimum: 0;
                    readonly description: "(Only if the signature ID is mnemonic-based) The index of the address from which the fee will be deducted that was generated from the mnemonic";
                };
                readonly basePair: {
                    readonly description: "The base pair for the virtual currency that represents the token; used to calculate the value of a transaction";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                    readonly examples: readonly ["EUR"];
                };
                readonly baseRate: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly minimum: 0;
                    readonly description: "The exchange rate for the base pair; one unit of the created virtual currency equals 1 unit of <code>basePair</code>*<code>baseRate</code>";
                    readonly examples: readonly [1];
                };
                readonly nonce: {
                    readonly type: "number";
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                    readonly minimum: 0;
                };
                readonly customer: {
                    readonly properties: {
                        readonly externalId: {
                            readonly description: "The external ID of the customer; use only anonymized identification that you have in your system<br/>If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly examples: readonly ["123654"];
                        };
                        readonly accountingCurrency: {
                            readonly description: "The ISO 4217 code of the currency in which all transactions for all virtual accounts of the customer will be billed; to overwrite the currency for this specific virtual account, set the <code>accountingCurrency</code> parameter at the account level.\n\nDefault: `EUR`";
                            readonly default: "EUR";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                            readonly examples: readonly ["USD"];
                        };
                        readonly customerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the customer has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                        readonly providerCountry: {
                            readonly description: "The ISO 3166-1 code of the country that the service provider has to be compliant with";
                            readonly maxLength: 2;
                            readonly minLength: 2;
                            readonly type: "string";
                            readonly examples: readonly ["US"];
                        };
                    };
                    readonly required: readonly ["externalId"];
                    readonly type: "object";
                    readonly description: "If a customer with the specified external ID does not exist, a new customer is created. If a customer with the specified external ID exists, it is updated with the provided information.";
                };
            };
            readonly required: readonly ["description", "supply", "symbol", "basePair", "xpub", "derivationIndex", "signatureId"];
        }];
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly accountId: {
                        readonly description: "Account ID with the type of currency as created ERC20/BEP20 token symbol. Account will be unfrozen when ERC20/BEP20 contract address will be set.";
                        readonly type: "string";
                        readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    };
                    readonly txId: {
                        readonly description: "TX hash of successful transaction. From this transaction receipt contract address can be obtained.";
                        readonly type: "string";
                        readonly examples: readonly ["c83f8818db43d9ba4accfe454aa44fc33123d47a4f89d47b314d6748eb0e9bc9"];
                    };
                };
                readonly type: "object";
                readonly required: readonly ["accountId", "txId"];
            }, {
                readonly properties: {
                    readonly accountId: {
                        readonly description: "Account ID with the type of currency as created ERC20/BEP20 token symbol. Account will be unfrozen when ERC20/BEP20 contract address will be set.";
                        readonly type: "string";
                        readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    };
                    readonly signatureId: {
                        readonly description: "ID of prepared payment template to sign. This is should be stored on a client side to retrieve ID of the blockchain transaction, when signing application signs the transaction and broadcasts it to the blockchain.";
                        readonly format: "uuid";
                        readonly type: "string";
                        readonly examples: readonly ["1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6"];
                    };
                };
                readonly type: "object";
                readonly required: readonly ["accountId", "signatureId"];
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.symbol.prefix";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.symbol.prefix"];
                    };
                    readonly message: {
                        readonly description: "ERC20 token cannot start with VC_.";
                        readonly type: "string";
                        readonly examples: readonly ["ERC20 token cannot start with VC_."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.address.xpub.both";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.address.xpub.both"];
                    };
                    readonly message: {
                        readonly description: "Either xpub or address must be present, not both.";
                        readonly type: "string";
                        readonly examples: readonly ["Either xpub or address must be present, not both."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.address.xpub.missing";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.address.xpub.missing"];
                    };
                    readonly message: {
                        readonly description: "Either xpub or address must be present.";
                        readonly type: "string";
                        readonly examples: readonly ["Either xpub or address must be present."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "erc20.duplicate.name";
                        readonly type: "string";
                        readonly examples: readonly ["erc20.duplicate.name"];
                    };
                    readonly message: {
                        readonly description: "ERC20 token with given name already exists.";
                        readonly type: "string";
                        readonly examples: readonly ["ERC20 token with given name already exists."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "customer.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["customer.not.active"];
                    };
                    readonly message: {
                        readonly description: "Customer not active.";
                        readonly type: "string";
                        readonly examples: readonly ["Customer not active."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "virtual.creation.error";
                        readonly type: "string";
                        readonly examples: readonly ["virtual.creation.error"];
                    };
                    readonly message: {
                        readonly description: "It is not possible to create virtual currency.";
                        readonly type: "string";
                        readonly examples: readonly ["It is not possible to create virtual currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["account.not.exists"];
                    };
                    readonly message: {
                        readonly description: "No such account.";
                        readonly type: "string";
                        readonly examples: readonly ["No such account."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.missing";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.missing"];
                    };
                    readonly message: {
                        readonly description: "No xpub assigned to account, it is not possible to generate address. Use assignAddress method instead.";
                        readonly type: "string";
                        readonly examples: readonly ["No xpub assigned to account, it is not possible to generate address. Use assignAddress method instead."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "xpub.used";
                        readonly type: "string";
                        readonly examples: readonly ["xpub.used"];
                    };
                    readonly message: {
                        readonly description: "XPub already used registered within Tatum";
                        readonly type: "string";
                        readonly examples: readonly ["XPub already used registered within Tatum"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "Address.index.used";
                        readonly type: "string";
                        readonly examples: readonly ["address.index.used"];
                    };
                    readonly message: {
                        readonly description: "Unable to create address, derivation index is already used.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to create address, derivation index is already used."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "offchain.not.supported";
                        readonly type: "string";
                        readonly examples: readonly ["offchain.not.supported"];
                    };
                    readonly message: {
                        readonly description: "Offchain not supported for account with ${account.currency} currency.";
                        readonly type: "string";
                        readonly examples: readonly ["Offchain not supported for account with ${account.currency} currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.incompatible";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.incompatible"];
                    };
                    readonly message: {
                        readonly description: "Xpub not compatible with account currency.";
                        readonly type: "string";
                        readonly examples: readonly ["Xpub not compatible with account currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.present";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.present"];
                    };
                    readonly message: {
                        readonly description: "Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead.";
                        readonly type: "string";
                        readonly examples: readonly ["Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                    readonly required: {
                        readonly "0": "errorCode";
                        readonly "1": "message";
                        readonly "2": "statusCode";
                    };
                    readonly type: "object";
                };
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "vc.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["vc.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such virtual currency.";
                        readonly type: "string";
                        readonly examples: readonly ["No such virtual currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "Address.used";
                        readonly type: "string";
                        readonly examples: readonly ["address.used"];
                    };
                    readonly message: {
                        readonly description: "Address and currency already in use.";
                        readonly type: "string";
                        readonly examples: readonly ["Address and currency already in use."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "account.xpub.present";
                        readonly type: "string";
                        readonly examples: readonly ["account.xpub.present"];
                    };
                    readonly message: {
                        readonly description: "Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead.";
                        readonly type: "string";
                        readonly examples: readonly ["Xpub assigned to account, it is not possible to assign address. Use generateAddress method instead."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                    readonly required: {
                        readonly "0": "errorCode";
                        readonly "1": "message";
                        readonly "2": "statusCode";
                    };
                    readonly type: "object";
                };
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.erc20.unsupported";
                        readonly type: "string";
                        readonly examples: readonly ["eth.erc20.unsupported"];
                    };
                    readonly message: {
                        readonly description: "Unsupported ETH ERC20 blockchain.";
                        readonly type: "string";
                        readonly examples: readonly ["Unsupported ETH ERC20 blockchain."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "ethereum.broadcast.failed";
                        readonly type: "string";
                        readonly examples: readonly ["ethereum.broadcast.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to broadcast transaction due to ${error}.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to broadcast transaction due to ${error}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "gas.price.failed";
                        readonly type: "string";
                        readonly examples: readonly ["gas.price.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to obtain current GAS price.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to obtain current GAS price."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "ethereum.transaction.body";
                        readonly type: "string";
                        readonly examples: readonly ["ethereum.transaction.body"];
                    };
                    readonly message: {
                        readonly description: "Either currency, or tokenAddress must be defined.";
                        readonly type: "string";
                        readonly examples: readonly ["Either currency, or tokenAddress must be defined."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.transaction.gas";
                        readonly type: "string";
                        readonly examples: readonly ["eth.transaction.gas"];
                    };
                    readonly message: {
                        readonly description: "Unable to calculate gas limit for transaction. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to calculate gas limit for transaction. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.transaction.hash";
                        readonly type: "string";
                        readonly examples: readonly ["eth.transaction.hash"];
                    };
                    readonly message: {
                        readonly description: "Unable to calculate transaction hash. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to calculate transaction hash. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.transaction.sign";
                        readonly type: "string";
                        readonly examples: readonly ["eth.transaction.sign"];
                    };
                    readonly message: {
                        readonly description: "Unable to sign transaction. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to sign transaction. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const XdcTransfer: {
    readonly body: {
        readonly oneOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly nonce: {
                    readonly type: "number";
                    readonly minimum: 0;
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                };
                readonly address: {
                    readonly description: "Blockchain address to send assets";
                    readonly maxLength: 42;
                    readonly minLength: 42;
                    readonly type: "string";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly amount: {
                    readonly description: "Amount to be sent in Ether | MATIC | XDC | KCS.";
                    readonly maxLength: 38;
                    readonly type: "string";
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly examples: readonly ["100000"];
                };
                readonly compliant: {
                    readonly description: "Compliance check, if withdrawal is not compliant, it will not be processed.";
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                };
                readonly privateKey: {
                    readonly type: "string";
                    readonly maxLength: 66;
                    readonly minLength: 66;
                    readonly description: "Private key of sender address. Either mnemonic and index, privateKey or signature Id must be present - depends on the type of account and xpub.";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly paymentId: {
                    readonly description: "Identifier of the payment, shown for created Transaction within Tatum sender account.";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["1234"];
                };
                readonly senderAccountId: {
                    readonly maxLength: 24;
                    readonly minLength: 24;
                    readonly description: "Sender account ID";
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly senderNote: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "Note visible to owner of withdrawing account";
                    readonly type: "string";
                    readonly examples: readonly ["Sender note"];
                };
                readonly gasLimit: {
                    readonly type: "string";
                    readonly description: "Gas limit for transaction in gas price. If not set, automatic calculation will be used.";
                    readonly pattern: "^[+]?\\d+$";
                    readonly examples: readonly ["40000"];
                };
                readonly gasPrice: {
                    readonly type: "string";
                    readonly description: "Gas price in Gwei. If not set, automatic calculation will be used.";
                    readonly pattern: "^[+]?\\d+$";
                    readonly examples: readonly ["20"];
                };
            };
            readonly required: readonly ["senderAccountId", "address", "amount", "privateKey"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly nonce: {
                    readonly type: "number";
                    readonly minimum: 0;
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                };
                readonly address: {
                    readonly description: "Blockchain address to send assets";
                    readonly maxLength: 42;
                    readonly minLength: 42;
                    readonly type: "string";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly amount: {
                    readonly description: "Amount to be sent in Ether | MATIC | XDC | KCS.";
                    readonly maxLength: 38;
                    readonly type: "string";
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly examples: readonly ["100000"];
                };
                readonly compliant: {
                    readonly description: "Compliance check, if withdrawal is not compliant, it will not be processed.";
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                };
                readonly index: {
                    readonly description: "Derivation index of sender address.";
                    readonly maximum: 2147483647;
                    readonly type: "integer";
                    readonly examples: readonly [0];
                };
                readonly gasLimit: {
                    readonly type: "string";
                    readonly description: "Gas limit for transaction in gas price. If not set, automatic calculation will be used.";
                    readonly pattern: "^[+]?\\d+$";
                    readonly examples: readonly ["40000"];
                };
                readonly gasPrice: {
                    readonly type: "string";
                    readonly description: "Gas price in Gwei. If not set, automatic calculation will be used.";
                    readonly pattern: "^[+]?\\d+$";
                    readonly examples: readonly ["20"];
                };
                readonly mnemonic: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "Mnemonic to generate private key for sender address. Either mnemonic and index, privateKey or signature Id must be present - depends on the type of account and xpub.";
                    readonly type: "string";
                    readonly examples: readonly ["urge pulp usage sister evidence arrest palm math please chief egg abuse"];
                };
                readonly paymentId: {
                    readonly description: "Identifier of the payment, shown for created Transaction within Tatum sender account.";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["1234"];
                };
                readonly senderAccountId: {
                    readonly maxLength: 24;
                    readonly minLength: 24;
                    readonly description: "Sender account ID";
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly senderNote: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "Note visible to owner of withdrawing account";
                    readonly type: "string";
                    readonly examples: readonly ["Sender note"];
                };
            };
            readonly required: readonly ["senderAccountId", "address", "amount", "mnemonic", "index"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly nonce: {
                    readonly type: "number";
                    readonly minimum: 0;
                    readonly description: "The nonce to be set to the transaction; if not present, the last known nonce will be used";
                };
                readonly address: {
                    readonly description: "Blockchain address to send assets";
                    readonly maxLength: 42;
                    readonly minLength: 42;
                    readonly type: "string";
                    readonly examples: readonly ["0x687422eEA2cB73B5d3e242bA5456b782919AFc85"];
                };
                readonly amount: {
                    readonly description: "Amount to be sent in Ether | MATIC | XDC | KCS.";
                    readonly maxLength: 38;
                    readonly type: "string";
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly examples: readonly ["100000"];
                };
                readonly compliant: {
                    readonly description: "Compliance check, if withdrawal is not compliant, it will not be processed.";
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                };
                readonly signatureId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly description: "Identifier of the mnemonic / private key associated in signing application.\nWhen hash identifies mnemonic, index must be present to represent specific account to pay from.\nPrivate key, mnemonic or signature Id must be present.\n";
                    readonly examples: readonly ["26d3883e-4e17-48b3-a0ee-09a3e484ac83"];
                };
                readonly index: {
                    readonly description: "Derivation index of sender address.";
                    readonly maximum: 2147483647;
                    readonly type: "integer";
                    readonly examples: readonly [0];
                };
                readonly paymentId: {
                    readonly description: "Identifier of the payment, shown for created Transaction within Tatum sender account.";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["1234"];
                };
                readonly senderAccountId: {
                    readonly maxLength: 24;
                    readonly minLength: 24;
                    readonly description: "Sender account ID";
                    readonly type: "string";
                    readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                };
                readonly senderNote: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "Note visible to owner of withdrawing account";
                    readonly type: "string";
                    readonly examples: readonly ["Sender note"];
                };
                readonly gasLimit: {
                    readonly type: "string";
                    readonly description: "Gas limit for transaction in gas price. If not set, automatic calculation will be used.";
                    readonly pattern: "^[+]?\\d+$";
                    readonly examples: readonly ["40000"];
                };
                readonly gasPrice: {
                    readonly type: "string";
                    readonly description: "Gas price in Gwei. If not set, automatic calculation will be used.";
                    readonly pattern: "^[+]?\\d+$";
                    readonly examples: readonly ["20"];
                };
            };
            readonly required: readonly ["senderAccountId", "address", "signatureId", "amount"];
        }];
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly oneOf: readonly [{
                readonly type: "object";
                readonly properties: {
                    readonly id: {
                        readonly description: "ID of withdrawal. If transaction is not valid in blockchain, use this id to cancel withdrawal.";
                        readonly type: "string";
                        readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    };
                    readonly txId: {
                        readonly description: "TX hash of successful transaction.";
                        readonly type: "string";
                        readonly examples: readonly ["c83f8818db43d9ba4accfe454aa44fc33123d47a4f89d47b314d6748eb0e9bc9"];
                    };
                    readonly completed: {
                        readonly description: "If set to \"true\", the withdrawal has been completed in the virtual account; if set to \"false\", the withdrawal has not been completed and you have to <a href=\"https://apidoc.tatum.io/tag/Withdrawal#operation/completeWithdrawal\" target=\"_blank\">complete it manually</a>";
                        readonly type: "boolean";
                        readonly examples: readonly [true];
                    };
                };
                readonly required: readonly ["txId", "id", "completed"];
            }, {
                readonly type: "object";
                readonly properties: {
                    readonly signatureId: {
                        readonly description: "ID of prepared payment template to sign. This is should be stored on a client side to retrieve ID of the blockchain transaction, when signing application signs the transaction and broadcasts it to the blockchain.";
                        readonly format: "uuid";
                        readonly type: "string";
                        readonly examples: readonly ["1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6"];
                    };
                };
                readonly required: readonly ["id", "signatureId"];
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.missing";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.missing"];
                    };
                    readonly message: {
                        readonly description: "No such withdrawal.";
                        readonly type: "string";
                        readonly examples: readonly ["No such withdrawal."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "rate.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["rate.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such currency rate.";
                        readonly type: "string";
                        readonly examples: readonly ["No such currency rate."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "vc.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["vc.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such virtual currency.";
                        readonly type: "string";
                        readonly examples: readonly ["No such virtual currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.recipient.format";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.recipient.format"];
                    };
                    readonly message: {
                        readonly description: "Recipient blockchain address has incorrect format.";
                        readonly type: "string";
                        readonly examples: readonly ["Recipient blockchain address has incorrect format."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.failed.transaction.failed";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.failed.transaction.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to store withdrawal, it is impossible to create transaction.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to store withdrawal, it is impossible to create transaction."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.account.virtual";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.account.virtual"];
                    };
                    readonly message: {
                        readonly description: "Sender account cannot be virtual.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender account cannot be virtual."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "offchain.not.supported";
                        readonly type: "string";
                        readonly examples: readonly ["offchain.not.supported"];
                    };
                    readonly message: {
                        readonly description: "Offchain not supported for account with ${account.currency} currency.";
                        readonly type: "string";
                        readonly examples: readonly ["Offchain not supported for account with ${account.currency} currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "amount.format";
                        readonly type: "string";
                        readonly examples: readonly ["amount.format"];
                    };
                    readonly message: {
                        readonly description: "Amount has incorrect format.";
                        readonly type: "string";
                        readonly examples: readonly ["Amount has incorrect format."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "fee.format";
                        readonly type: "string";
                        readonly examples: readonly ["fee.format"];
                    };
                    readonly message: {
                        readonly description: "Fee has incorrect format.";
                        readonly type: "string";
                        readonly examples: readonly ["Fee has incorrect format."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.not.cancelled.transaction.failed";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.not.cancelled.transaction.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to broadcast transaction, and impossible to cancel withdrawal. ID is attached, \"${withdrawalId}\", cancel it manually.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to broadcast transaction, and impossible to cancel withdrawal. ID is attached, \"${withdrawalId}\", cancel it manually."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.prepare.failed";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.prepare.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to prepare transaction, withdrawal cancelled.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to prepare transaction, withdrawal cancelled."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.not.exists"];
                    };
                    readonly message: {
                        readonly description: "Unable to find sender account ${transaction.senderAccountId}.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find sender account ${transaction.senderAccountId}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.customer.disabled";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.customer.disabled"];
                    };
                    readonly message: {
                        readonly description: "Sender accounts customer ${senderAccount.customerId} is disabled, unable to perform payment.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender accounts customer ${senderAccount.customerId} is disabled, unable to perform payment."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "balance.insufficient";
                        readonly type: "string";
                        readonly examples: readonly ["balance.insufficient"];
                    };
                    readonly message: {
                        readonly description: "Insufficient balance for account ${transaction.senderAccountId} and payment amount ${transaction.amount}. Sender balance is ${senderAccount.balance.availableBalance as string}, amount is ${amount}";
                        readonly type: "string";
                        readonly examples: readonly ["Insufficient balance for account ${transaction.senderAccountId} and payment amount ${transaction.amount}. Sender balance is ${senderAccount.balance.availableBalance as string}, amount is ${amount}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "amount.btc";
                        readonly type: "string";
                        readonly examples: readonly ["amount.btc"];
                    };
                    readonly message: {
                        readonly description: "BTC|LTC|BCH|DOGE payment amount must be at least 0.00000001, not ${transaction.amount}.";
                        readonly type: "string";
                        readonly examples: readonly ["BTC|LTC|BCH|DOGE payment amount must be at least 0.00000001, not ${transaction.amount}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "amount.eth";
                        readonly type: "string";
                        readonly examples: readonly ["amount.eth"];
                    };
                    readonly message: {
                        readonly description: "ETH payment amount must be at least 0.000000000001, not ${transaction.amount}.";
                        readonly type: "string";
                        readonly examples: readonly ["ETH payment amount must be at least 0.000000000001, not ${transaction.amount}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.frozen";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.frozen"];
                    };
                    readonly message: {
                        readonly description: "Sender account ${transaction.senderAccountId} is frozen, unable to perform payment.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender account ${transaction.senderAccountId} is frozen, unable to perform payment."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.pending";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.pending"];
                    };
                    readonly message: {
                        readonly description: "Unable to prepare withdrawal, last withdrawal with id ${id} is not yet processed by blockchain.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to prepare withdrawal, last withdrawal with id ${id} is not yet processed by blockchain."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "private.mnemonic.missing";
                        readonly type: "string";
                        readonly examples: readonly ["private.mnemonic.missing"];
                    };
                    readonly message: {
                        readonly description: "Either mnemonic and index or private key must be present.";
                        readonly type: "string";
                        readonly examples: readonly ["Either mnemonic and index or private key must be present."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.erc20.unsupported";
                        readonly type: "string";
                        readonly examples: readonly ["eth.erc20.unsupported"];
                    };
                    readonly message: {
                        readonly description: "Unsupported ETH ERC20 blockchain.";
                        readonly type: "string";
                        readonly examples: readonly ["Unsupported ETH ERC20 blockchain."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "ethereum.broadcast.failed";
                        readonly type: "string";
                        readonly examples: readonly ["ethereum.broadcast.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to broadcast transaction due to ${error}.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to broadcast transaction due to ${error}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "gas.price.failed";
                        readonly type: "string";
                        readonly examples: readonly ["gas.price.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to obtain current GAS price.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to obtain current GAS price."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "ethereum.transaction.body";
                        readonly type: "string";
                        readonly examples: readonly ["ethereum.transaction.body"];
                    };
                    readonly message: {
                        readonly description: "Either currency, or tokenAddress must be defined.";
                        readonly type: "string";
                        readonly examples: readonly ["Either currency, or tokenAddress must be defined."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.transaction.gas";
                        readonly type: "string";
                        readonly examples: readonly ["eth.transaction.gas"];
                    };
                    readonly message: {
                        readonly description: "Unable to calculate gas limit for transaction. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to calculate gas limit for transaction. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.transaction.hash";
                        readonly type: "string";
                        readonly examples: readonly ["eth.transaction.hash"];
                    };
                    readonly message: {
                        readonly description: "Unable to calculate transaction hash. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to calculate transaction hash. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "eth.transaction.sign";
                        readonly type: "string";
                        readonly examples: readonly ["eth.transaction.sign"];
                    };
                    readonly message: {
                        readonly description: "Unable to sign transaction. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to sign transaction. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const XlmAssetOffchain: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly issuerAccount: {
                readonly description: "Blockchain address of the issuer of the assets.";
                readonly maxLength: 56;
                readonly minLength: 56;
                readonly type: "string";
                readonly examples: readonly ["GC5LAVZ5UPLIFDH6SI33PNVL5TKWA4ODXTI3WEF5JM6LRM5MNGVJ56TT"];
            };
            readonly token: {
                readonly description: "Asset name.";
                readonly type: "string";
                readonly pattern: "^[a-zA-Z0-9]{1,12}$";
                readonly maxLength: 12;
                readonly minLength: 1;
                readonly examples: readonly ["TOKEN123"];
            };
            readonly basePair: {
                readonly description: "Base pair for Asset. Transaction value will be calculated according to this base pair. e.g. 1 TOKEN123 is equal to 1 EUR, if basePair is set to EUR.";
                readonly type: "string";
                readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                readonly examples: readonly ["EUR"];
            };
        };
        readonly required: readonly ["basePair", "issuerAccount", "token"];
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "virtual.creation.error";
                    readonly type: "string";
                    readonly examples: readonly ["virtual.creation.error"];
                };
                readonly message: {
                    readonly description: "It is not possible to create virtual currency.";
                    readonly type: "string";
                    readonly examples: readonly ["It is not possible to create virtual currency."];
                };
                readonly statusCode: {
                    readonly description: "403";
                    readonly type: "number";
                    readonly examples: readonly [403];
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const XlmTransfer: {
    readonly body: {
        readonly oneOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly senderAccountId: {
                    readonly maxLength: 24;
                    readonly minLength: 24;
                    readonly description: "Sender account ID";
                    readonly type: "string";
                    readonly examples: readonly ["61b3bffddfb389cde19c73be"];
                };
                readonly fromAccount: {
                    readonly description: "Blockchain account to send from";
                    readonly maxLength: 56;
                    readonly minLength: 56;
                    readonly type: "string";
                    readonly examples: readonly ["GBRPYHIL2CI3FNQ4BXLFMNDLFJUNPU2HY3ZMFSHONUCEOASW7QC7OX2H"];
                };
                readonly address: {
                    readonly description: "Blockchain address to send assets";
                    readonly maxLength: 56;
                    readonly minLength: 56;
                    readonly type: "string";
                    readonly examples: readonly ["GBRPYHIL2CI3FNQ4BXLFMNDLFJUNPU2HY3ZMFSHONUCEOASW7QC7OX2H"];
                };
                readonly amount: {
                    readonly description: "Amount to be sent, in XLM or XLM-based Asset.";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["10000"];
                };
                readonly secret: {
                    readonly maxLength: 56;
                    readonly minLength: 56;
                    readonly description: "Secret for account. Secret, or signature Id must be present.";
                    readonly type: "string";
                    readonly examples: readonly ["SCVVKNLBHOWBNJYHD3CNROOA2P3K35I5GNTYUHLLMUHMHWQYNEI7LVED"];
                };
                readonly compliant: {
                    readonly description: "Compliance check, if withdrawal is not compliant, it will not be processed.";
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                };
                readonly attr: {
                    readonly description: "Short message to recipient. Usually used as an account discriminator. It can be either 28 characters long ASCII text, 64 characters long HEX string or uint64 number. When using as an account disciminator in Tatum Offchain ledger, can be in format of destination_acc|source_acc.";
                    readonly pattern: "^[ -~]{0,64}$";
                    readonly type: "string";
                    readonly maxLength: 64;
                    readonly examples: readonly ["12355"];
                };
                readonly paymentId: {
                    readonly description: "Identifier of the payment, shown for created Transaction within Tatum sender account.";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["1234"];
                };
                readonly senderNote: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "Note visible to owner of withdrawing account.";
                    readonly type: "string";
                    readonly examples: readonly ["Sender note"];
                };
            };
            readonly required: readonly ["fromAccount", "senderAccountId", "address", "secret", "amount"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly senderAccountId: {
                    readonly maxLength: 24;
                    readonly minLength: 24;
                    readonly description: "Sender account ID";
                    readonly type: "string";
                    readonly examples: readonly ["61b3bffddfb389cde19c73be"];
                };
                readonly fromAccount: {
                    readonly description: "Blockchain account to send from";
                    readonly maxLength: 56;
                    readonly minLength: 56;
                    readonly type: "string";
                    readonly examples: readonly ["GBRPYHIL2CI3FNQ4BXLFMNDLFJUNPU2HY3ZMFSHONUCEOASW7QC7OX2H"];
                };
                readonly address: {
                    readonly description: "Blockchain address to send assets";
                    readonly maxLength: 56;
                    readonly minLength: 56;
                    readonly type: "string";
                    readonly examples: readonly ["GBRPYHIL2CI3FNQ4BXLFMNDLFJUNPU2HY3ZMFSHONUCEOASW7QC7OX2H"];
                };
                readonly amount: {
                    readonly description: "Amount to be sent, in XLM or XLM-based Asset.";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["10000"];
                };
                readonly signatureId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly description: "Identifier of the secret associated in signing application. Secret, or signature Id must be present.";
                    readonly examples: readonly ["26d3883e-4e17-48b3-a0ee-09a3e484ac83"];
                };
                readonly compliant: {
                    readonly description: "Compliance check, if withdrawal is not compliant, it will not be processed.";
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                };
                readonly attr: {
                    readonly description: "Short message to recipient. Usually used as an account discriminator. It can be either 28 characters long ASCII text, 64 characters long HEX string or uint64 number. When using as an account disciminator in Tatum Offchain ledger, can be in format of destination_acc|source_acc.";
                    readonly pattern: "^[ -~]{0,64}$";
                    readonly type: "string";
                    readonly maxLength: 64;
                    readonly examples: readonly ["12355"];
                };
                readonly paymentId: {
                    readonly description: "Identifier of the payment, shown for created Transaction within Tatum sender account.";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["1234"];
                };
                readonly senderNote: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "Note visible to owner of withdrawing account.";
                    readonly type: "string";
                    readonly examples: readonly ["Sender note"];
                };
            };
            readonly required: readonly ["fromAccount", "senderAccountId", "address", "amount", "signatureId"];
        }];
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly oneOf: readonly [{
                readonly type: "object";
                readonly properties: {
                    readonly id: {
                        readonly description: "ID of withdrawal. If transaction is not valid in blockchain, use this id to cancel withdrawal.";
                        readonly type: "string";
                        readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    };
                    readonly txId: {
                        readonly description: "TX hash of successful transaction.";
                        readonly type: "string";
                        readonly examples: readonly ["c83f8818db43d9ba4accfe454aa44fc33123d47a4f89d47b314d6748eb0e9bc9"];
                    };
                    readonly completed: {
                        readonly description: "If set to \"true\", the withdrawal has been completed in the virtual account; if set to \"false\", the withdrawal has not been completed and you have to <a href=\"https://apidoc.tatum.io/tag/Withdrawal#operation/completeWithdrawal\" target=\"_blank\">complete it manually</a>";
                        readonly type: "boolean";
                        readonly examples: readonly [true];
                    };
                };
                readonly required: readonly ["txId", "id", "completed"];
            }, {
                readonly type: "object";
                readonly properties: {
                    readonly signatureId: {
                        readonly description: "ID of prepared payment template to sign. This is should be stored on a client side to retrieve ID of the blockchain transaction, when signing application signs the transaction and broadcasts it to the blockchain.";
                        readonly format: "uuid";
                        readonly type: "string";
                        readonly examples: readonly ["1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6"];
                    };
                };
                readonly required: readonly ["id", "signatureId"];
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "xlm.failed";
                        readonly type: "string";
                        readonly examples: readonly ["xlm.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to communicate with blockchain. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to communicate with blockchain. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "xlm.tx.failed";
                        readonly type: "string";
                        readonly examples: readonly ["xlm.tx.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to construct transaction. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to construct transaction. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "rate.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["rate.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such currency rate.";
                        readonly type: "string";
                        readonly examples: readonly ["No such currency rate."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "vc.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["vc.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such virtual currency.";
                        readonly type: "string";
                        readonly examples: readonly ["No such virtual currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.failed.transaction.failed";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.failed.transaction.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to store withdrawal, it is impossible to create transaction.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to store withdrawal, it is impossible to create transaction."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.account.virtual";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.account.virtual"];
                    };
                    readonly message: {
                        readonly description: "Sender account cannot be virtual.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender account cannot be virtual."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "offchain.not.supported";
                        readonly type: "string";
                        readonly examples: readonly ["offchain.not.supported"];
                    };
                    readonly message: {
                        readonly description: "Offchain not supported for account with ${account.currency} currency.";
                        readonly type: "string";
                        readonly examples: readonly ["Offchain not supported for account with ${account.currency} currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "amount.format";
                        readonly type: "string";
                        readonly examples: readonly ["amount.format"];
                    };
                    readonly message: {
                        readonly description: "Amount has incorrect format.";
                        readonly type: "string";
                        readonly examples: readonly ["Amount has incorrect format."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.not.exists"];
                    };
                    readonly message: {
                        readonly description: "Unable to find sender account ${transaction.senderAccountId}.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find sender account ${transaction.senderAccountId}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.customer.disabled";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.customer.disabled"];
                    };
                    readonly message: {
                        readonly description: "Sender accounts customer ${senderAccount.customerId} is disabled, unable to perform payment.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender accounts customer ${senderAccount.customerId} is disabled, unable to perform payment."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "balance.insufficient";
                        readonly type: "string";
                        readonly examples: readonly ["balance.insufficient"];
                    };
                    readonly message: {
                        readonly description: "Insufficient balance for account ${transaction.senderAccountId} and payment amount ${transaction.amount}. Sender balance is ${senderAccount.balance.availableBalance as string}, amount is ${amount}";
                        readonly type: "string";
                        readonly examples: readonly ["Insufficient balance for account ${transaction.senderAccountId} and payment amount ${transaction.amount}. Sender balance is ${senderAccount.balance.availableBalance as string}, amount is ${amount}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.frozen";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.frozen"];
                    };
                    readonly message: {
                        readonly description: "Sender account ${transaction.senderAccountId} is frozen, unable to perform payment.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender account ${transaction.senderAccountId} is frozen, unable to perform payment."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.pending";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.pending"];
                    };
                    readonly message: {
                        readonly description: "Unable to prepare withdrawal, last withdrawal with id ${id} is not yet processed by blockchain.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to prepare withdrawal, last withdrawal with id ${id} is not yet processed by blockchain."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const XrpAssetOffchain: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly issuerAccount: {
                readonly description: "Blockchain address of the issuer of the assets.";
                readonly maxLength: 34;
                readonly minLength: 33;
                readonly type: "string";
                readonly examples: readonly ["rsCZjvenhxsFycrb33gPSfXdrTNAS5uiR1"];
            };
            readonly token: {
                readonly description: "Asset name.";
                readonly type: "string";
                readonly pattern: "^[A-F0-9]{40}$";
                readonly maxLength: 40;
                readonly minLength: 40;
                readonly examples: readonly ["DA39A3EE5E6B4B0D3255BFEF95601890AFD80709"];
            };
            readonly basePair: {
                readonly description: "Base pair for Asset. Transaction value will be calculated according to this base pair. e.g. 1 TOKEN123 is equal to 1 EUR, if basePair is set to EUR.";
                readonly type: "string";
                readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "ALGO", "ADA", "BAM", "BAT", "BBD", "BCH", "BDT", "BGN", "BHD", "BIF", "BMD", "BNB", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DOGE", "DZD", "EGP", "ERN", "ETB", "ETH", "EUR", "FJD", "FKP", "FLOW", "FUSD", "FREE", "GMC", "GMC_BSC", "RMD", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LEO", "LINK", "LKR", "LRD", "LSL", "LTC", "LTL", "LVL", "LYD", "MAD", "MATIC", "MDL", "MGA", "MKD", "MKR", "MMK", "MMY", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PAX", "PAXG", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TRON", "TUSD", "BUSD", "TWD", "TZS", "UAH", "UGX", "UNI", "USD", "USDC", "USDC_MATIC", "USDC_MATIC_NATIVE", "USDT", "USDT_TRON", "USDT_MATIC", "UYU", "UZS", "VEF", "VND", "VUV", "WBTC", "WST", "XAF", "XAG", "XAU", "XCD", "XCON", "XDR", "XOF", "XPF", "XRP", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
                readonly examples: readonly ["EUR"];
            };
        };
        readonly required: readonly ["basePair", "issuerAccount", "token"];
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "virtual.creation.error";
                    readonly type: "string";
                    readonly examples: readonly ["virtual.creation.error"];
                };
                readonly message: {
                    readonly description: "It is not possible to create virtual currency.";
                    readonly type: "string";
                    readonly examples: readonly ["It is not possible to create virtual currency."];
                };
                readonly statusCode: {
                    readonly description: "403";
                    readonly type: "number";
                    readonly examples: readonly [403];
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const XrpTransfer: {
    readonly body: {
        readonly oneOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly senderAccountId: {
                    readonly maxLength: 24;
                    readonly minLength: 24;
                    readonly description: "Sender account ID";
                    readonly type: "string";
                    readonly examples: readonly ["61b3bffddfb389cde19c73be"];
                };
                readonly account: {
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly description: "XRP account address. Must be the one used for generating deposit tags.";
                    readonly type: "string";
                    readonly examples: readonly ["rPRxSZzTFd6Yez3UMxFUPJvnhUhjewpjfV"];
                };
                readonly address: {
                    readonly description: "Blockchain address to send assets";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["rPRxSZzTFd6Yez3UMxFUPJvnhUhjewpjfV"];
                };
                readonly amount: {
                    readonly description: "Amount to be sent, in XRP.";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["10000"];
                };
                readonly compliant: {
                    readonly description: "Compliance check, if withdrawal is not compliant, it will not be processed.";
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                };
                readonly attr: {
                    readonly description: "Destination tag of the recipient account, if any. Must be stringified uint32.";
                    readonly type: "string";
                    readonly examples: readonly ["12355"];
                };
                readonly sourceTag: {
                    readonly description: "Source tag of sender account, if any.";
                    readonly type: "integer";
                    readonly examples: readonly [12355];
                };
                readonly paymentId: {
                    readonly description: "Identifier of the payment, shown for created Transaction within Tatum sender account.";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["1234"];
                };
                readonly secret: {
                    readonly maxLength: 29;
                    readonly minLength: 29;
                    readonly description: "Secret for account. Secret, or signature Id must be present.";
                    readonly type: "string";
                    readonly examples: readonly ["snSFTHdvSYQKKkYntvEt8cnmZuPJB"];
                };
                readonly senderNote: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "Note visible to owner of withdrawing account.";
                    readonly type: "string";
                    readonly examples: readonly ["Sender note"];
                };
            };
            readonly required: readonly ["account", "senderAccountId", "address", "amount", "secret"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly senderAccountId: {
                    readonly maxLength: 24;
                    readonly minLength: 24;
                    readonly description: "Sender account ID";
                    readonly type: "string";
                    readonly examples: readonly ["61b3bffddfb389cde19c73be"];
                };
                readonly account: {
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly description: "XRP account address. Must be the one used for generating deposit tags.";
                    readonly type: "string";
                    readonly examples: readonly ["rPRxSZzTFd6Yez3UMxFUPJvnhUhjewpjfV"];
                };
                readonly address: {
                    readonly description: "Blockchain address to send assets";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["rPRxSZzTFd6Yez3UMxFUPJvnhUhjewpjfV"];
                };
                readonly amount: {
                    readonly description: "Amount to be sent, in XRP.";
                    readonly maxLength: 38;
                    readonly pattern: "^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$";
                    readonly type: "string";
                    readonly examples: readonly ["10000"];
                };
                readonly compliant: {
                    readonly description: "Compliance check, if withdrawal is not compliant, it will not be processed.";
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                };
                readonly attr: {
                    readonly description: "Destination tag of the recipient account, if any. Must be stringified uint32.";
                    readonly type: "string";
                    readonly examples: readonly ["12355"];
                };
                readonly sourceTag: {
                    readonly description: "Source tag of sender account, if any.";
                    readonly type: "integer";
                    readonly examples: readonly [12355];
                };
                readonly paymentId: {
                    readonly description: "Identifier of the payment, shown for created Transaction within Tatum sender account.";
                    readonly maxLength: 100;
                    readonly minLength: 1;
                    readonly type: "string";
                    readonly examples: readonly ["1234"];
                };
                readonly signatureId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly description: "Identifier of the secret associated in signing application. Secret, or signature Id must be present.";
                    readonly examples: readonly ["26d3883e-4e17-48b3-a0ee-09a3e484ac83"];
                };
                readonly senderNote: {
                    readonly maxLength: 500;
                    readonly minLength: 1;
                    readonly description: "Note visible to owner of withdrawing account.";
                    readonly type: "string";
                    readonly examples: readonly ["Sender note"];
                };
            };
            readonly required: readonly ["account", "senderAccountId", "address", "signatureId", "amount"];
        }];
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly oneOf: readonly [{
                readonly type: "object";
                readonly properties: {
                    readonly id: {
                        readonly description: "ID of withdrawal. If transaction is not valid in blockchain, use this id to cancel withdrawal.";
                        readonly type: "string";
                        readonly examples: readonly ["5e68c66581f2ee32bc354087"];
                    };
                    readonly txId: {
                        readonly description: "TX hash of successful transaction.";
                        readonly type: "string";
                        readonly examples: readonly ["c83f8818db43d9ba4accfe454aa44fc33123d47a4f89d47b314d6748eb0e9bc9"];
                    };
                    readonly completed: {
                        readonly description: "If set to \"true\", the withdrawal has been completed in the virtual account; if set to \"false\", the withdrawal has not been completed and you have to <a href=\"https://apidoc.tatum.io/tag/Withdrawal#operation/completeWithdrawal\" target=\"_blank\">complete it manually</a>";
                        readonly type: "boolean";
                        readonly examples: readonly [true];
                    };
                };
                readonly required: readonly ["txId", "id", "completed"];
            }, {
                readonly type: "object";
                readonly properties: {
                    readonly signatureId: {
                        readonly description: "ID of prepared payment template to sign. This is should be stored on a client side to retrieve ID of the blockchain transaction, when signing application signs the transaction and broadcasts it to the blockchain.";
                        readonly format: "uuid";
                        readonly type: "string";
                        readonly examples: readonly ["1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6"];
                    };
                };
                readonly required: readonly ["id", "signatureId"];
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly properties: {
                readonly errorCode: {
                    readonly description: "validation.failed";
                    readonly type: "string";
                    readonly examples: readonly ["validation.failed"];
                };
                readonly message: {
                    readonly description: "Request validation failed. Please see data for additional information.";
                    readonly type: "string";
                    readonly examples: readonly ["Request validation failed. Please see data for additional information."];
                };
                readonly statusCode: {
                    readonly description: "400";
                    readonly type: "number";
                    readonly examples: readonly [400];
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["target"];
                        readonly properties: {
                            readonly target: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Request object present in the body of the HTTP request";
                            };
                            readonly value: {
                                readonly type: "number";
                                readonly description: "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.";
                                readonly examples: readonly [12345];
                            };
                            readonly property: {
                                readonly type: "string";
                                readonly description: "Property name of the target object which validation is wrong";
                                readonly examples: readonly ["property1"];
                            };
                            readonly constraints: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                                readonly description: "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.";
                            };
                        };
                    };
                };
            };
            readonly required: readonly ["errorCode", "message", "statusCode", "data"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.not.active";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.not.active"];
                    };
                    readonly message: {
                        readonly description: "Subscription not active anymore.";
                        readonly type: "string";
                        readonly examples: readonly ["Subscription not active anymore."];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "subscription.invalid";
                        readonly type: "string";
                        readonly examples: readonly ["subscription.invalid"];
                    };
                    readonly message: {
                        readonly description: "Unable to find valid subscription for '${apiKey}'";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find valid subscription for '${apiKey}'"];
                    };
                    readonly statusCode: {
                        readonly description: "401";
                        readonly type: "number";
                        readonly examples: readonly [401];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly oneOf: readonly [{
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "xrp.failed";
                        readonly type: "string";
                        readonly examples: readonly ["xrp.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to communicate with blockchain. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to communicate with blockchain. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "attr.wrong.format";
                        readonly type: "string";
                        readonly examples: readonly ["attr.wrong.format"];
                    };
                    readonly message: {
                        readonly description: "Wrong attr of withdrawal, should be of uint32 type.";
                        readonly type: "string";
                        readonly examples: readonly ["Wrong attr of withdrawal, should be of uint32 type."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "xrp.broadcast.failed";
                        readonly type: "string";
                        readonly examples: readonly ["xrp.broadcast.failed"];
                    };
                    readonly message: {
                        readonly description: "Xrp submit tx failed. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Xrp submit tx failed. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "xrp.fee";
                        readonly type: "string";
                        readonly examples: readonly ["xrp.fee"];
                    };
                    readonly message: {
                        readonly description: "Unable to calculate fee.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to calculate fee."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "xrp.sign.failed";
                        readonly type: "string";
                        readonly examples: readonly ["xrp.sign.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to sign tx. ${error}";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to sign tx. ${error}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "xrp.account.failed";
                        readonly type: "string";
                        readonly examples: readonly ["xrp.account.failed"];
                    };
                    readonly message: {
                        readonly description: "${error} Code: ${code}";
                        readonly type: "string";
                        readonly examples: readonly ["${error} Code: ${code}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "rate.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["rate.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such currency rate.";
                        readonly type: "string";
                        readonly examples: readonly ["No such currency rate."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "vc.not.found";
                        readonly type: "string";
                        readonly examples: readonly ["vc.not.found"];
                    };
                    readonly message: {
                        readonly description: "No such virtual currency.";
                        readonly type: "string";
                        readonly examples: readonly ["No such virtual currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.failed.transaction.failed";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.failed.transaction.failed"];
                    };
                    readonly message: {
                        readonly description: "Unable to store withdrawal, it is impossible to create transaction.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to store withdrawal, it is impossible to create transaction."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.account.virtual";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.account.virtual"];
                    };
                    readonly message: {
                        readonly description: "Sender account cannot be virtual.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender account cannot be virtual."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "offchain.not.supported";
                        readonly type: "string";
                        readonly examples: readonly ["offchain.not.supported"];
                    };
                    readonly message: {
                        readonly description: "Offchain not supported for account with ${account.currency} currency.";
                        readonly type: "string";
                        readonly examples: readonly ["Offchain not supported for account with ${account.currency} currency."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "amount.format";
                        readonly type: "string";
                        readonly examples: readonly ["amount.format"];
                    };
                    readonly message: {
                        readonly description: "Amount has incorrect format.";
                        readonly type: "string";
                        readonly examples: readonly ["Amount has incorrect format."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.not.exists";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.not.exists"];
                    };
                    readonly message: {
                        readonly description: "Unable to find sender account ${transaction.senderAccountId}.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to find sender account ${transaction.senderAccountId}."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.customer.disabled";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.customer.disabled"];
                    };
                    readonly message: {
                        readonly description: "Sender accounts customer ${senderAccount.customerId} is disabled, unable to perform payment.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender accounts customer ${senderAccount.customerId} is disabled, unable to perform payment."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "balance.insufficient";
                        readonly type: "string";
                        readonly examples: readonly ["balance.insufficient"];
                    };
                    readonly message: {
                        readonly description: "Insufficient balance for account ${transaction.senderAccountId} and payment amount ${transaction.amount}. Sender balance is ${senderAccount.balance.availableBalance as string}, amount is ${amount}";
                        readonly type: "string";
                        readonly examples: readonly ["Insufficient balance for account ${transaction.senderAccountId} and payment amount ${transaction.amount}. Sender balance is ${senderAccount.balance.availableBalance as string}, amount is ${amount}"];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "senderAccount.frozen";
                        readonly type: "string";
                        readonly examples: readonly ["senderAccount.frozen"];
                    };
                    readonly message: {
                        readonly description: "Sender account ${transaction.senderAccountId} is frozen, unable to perform payment.";
                        readonly type: "string";
                        readonly examples: readonly ["Sender account ${transaction.senderAccountId} is frozen, unable to perform payment."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }, {
                readonly properties: {
                    readonly errorCode: {
                        readonly description: "withdrawal.pending";
                        readonly type: "string";
                        readonly examples: readonly ["withdrawal.pending"];
                    };
                    readonly message: {
                        readonly description: "Unable to prepare withdrawal, last withdrawal with id ${id} is not yet processed by blockchain.";
                        readonly type: "string";
                        readonly examples: readonly ["Unable to prepare withdrawal, last withdrawal with id ${id} is not yet processed by blockchain."];
                    };
                    readonly statusCode: {
                        readonly description: "403";
                        readonly type: "number";
                        readonly examples: readonly [403];
                    };
                };
                readonly required: readonly ["errorCode", "message", "statusCode"];
                readonly type: "object";
            }];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "500": {
            readonly properties: {
                readonly message: {
                    readonly description: "Internal server error";
                    readonly type: "string";
                    readonly examples: readonly ["Internal server error"];
                };
                readonly statusCode: {
                    readonly description: "500";
                    readonly type: "number";
                    readonly examples: readonly [500];
                };
            };
            readonly required: readonly ["statusCode", "message"];
            readonly type: "object";
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
export { ActivateAccount, ActivateCustomer, AdaTransferOffchain, AddressExists, AlgoDeployErc20Ledger, AlgoTransfer, AssignAddress, BchTransfer, BlockAmount, BnbAssetOffchain, BnbTransfer, BroadcastBlockchainTransaction, BscDeployBep20, BscOrBepTransfer, BtcTransfer, CancelInProgressWithdrawal, CeloDeployErc20Ledger, CeloOrErc20Transfer, ChartRequest, CompleteWithdrawal, CreateAccount, CreateAccountBatch, CreateBep20, CreateCeloErc20, CreateCurrency, CreateErc20, CreateHrm20, CreateTrc, CreateXdc20, DeactivateAccount, DeactivateCustomer, DeleteAccountTrades, DeleteAllBlockAmount, DeleteBlockAmount, DeleteTrade, DisableCustomer, DogeTransfer, EgldTransfer, EnableCustomer, EthDeployErc20, EthTransfer, EthTransferErc20, FindAllCustomers, FlowTransfer, FreezeAccount, GenerateDepositAddress, GenerateDepositAddressesBatch, GetAccountBalance, GetAccountByAccountId, GetAccounts, GetAccountsByCustomerId, GetAccountsCount, GetAllDepositAddresses, GetBlockAmount, GetBlockAmountById, GetBuyTrades, GetBuyTradesBody, GetCurrency, GetCustomerByExternalOrInternalId, GetDeposits, GetDepositsCount, GetHistoricalTrades, GetHistoricalTradesBody, GetMatchedTrades, GetSellTrades, GetSellTradesBody, GetTradeById, GetTransactions, GetTransactionsByAccountId, GetTransactionsByCustomerId, GetTransactionsByReference, GetWithdrawals, KcsDeployErc20Ledger, KcsTransfer, KlayDeployErc20, KlayTransfer, LtcTransfer, MintCurrency, OneDeployHrm20, OneTransfer, PolygonTransfer, RegisterErc20Token, RemoveAddress, RevokeCurrency, SendTransaction, SendTransactionBatch, SolTransfer, StoreCeloErc20Address, StoreTokenAddress, StoreTrade, StoreTrcAddress, StoreWithdrawal, TronDeployTrc, TronTransferOffchain, UnblockAmountWithTransaction, UnfreezeAccount, UpdateAccountByAccountId, UpdateCurrency, UpdateCustomer, XdcDeployErc20, XdcTransfer, XlmAssetOffchain, XlmTransfer, XrpAssetOffchain, XrpTransfer };
